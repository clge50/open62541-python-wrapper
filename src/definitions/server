UA_Server * UA_Server_new(void);


struct UA_ServerConfig {
    ...;
};





typedef struct {
    //UA_NodeId nodeId;
    //UA_UInt32 attributeId;
    //UA_String indexRange;
    //UA_QualifiedName dataEncoding;

    ...;
} UA_ReadValueId;

typedef enum {
    UA_TIMESTAMPSTORETURN_SOURCE = 0,
    UA_TIMESTAMPSTORETURN_SERVER = 1,
    UA_TIMESTAMPSTORETURN_BOTH = 2,
    UA_TIMESTAMPSTORETURN_NEITHER = 3,
    UA_TIMESTAMPSTORETURN_INVALID = 4,
    __UA_TIMESTAMPSTORETURN_FORCE32BIT = 0x7fffffff
} UA_TimestampsToReturn;



UA_StatusCode UA_Server_run(UA_Server *server, const volatile UA_Boolean  *running);

UA_StatusCode UA_Server_run_shutdown(UA_Server *server);

UA_ServerConfig * UA_Server_getConfig(UA_Server *server);
UA_StatusCode UA_Server_run_startup(UA_Server *server);

UA_UInt16 UA_Server_run_iterate(UA_Server *server, UA_Boolean waitInternal);

void UA_Server_delete(UA_Server *server);

UA_StatusCode UA_ServerConfig_setMinimal(UA_ServerConfig *config, UA_UInt16 portNumber, const UA_ByteString *certificate);
UA_StatusCode UA_ServerConfig_setDefault(UA_ServerConfig *config);

UA_Server * UA_Server_newWithConfig(UA_ServerConfig *config);

UA_DataValue UA_Server_read(UA_Server *server, const UA_ReadValueId *item, UA_TimestampsToReturn timestamps);

UA_StatusCode UA_Server_addVariableNode(UA_Server *server, const UA_NodeId requestedNewNodeId,const UA_NodeId parentNodeId,const UA_NodeId referenceTypeId,const UA_QualifiedName browseName,const UA_NodeId typeDefinition,const UA_VariableAttributes attr,void *nodeContext, UA_NodeId *outNewNodeId);