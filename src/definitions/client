/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

//types
typedef struct {
    void *clientContext;
    UA_Logger logger;
    UA_UInt32 timeout;
    UA_ApplicationDescription clientDescription;
    UA_ExtensionObject userIdentityToken;
    UA_MessageSecurityMode securityMode;
    UA_String securityPolicyUri;
    UA_EndpointDescription endpoint;
    UA_UserTokenPolicy userTokenPolicy;
    UA_UInt32 secureChannelLifeTime;
    UA_UInt32 requestedSessionTimeout;
    UA_UInt32 connectivityCheckInterval;
    const UA_DataTypeArray *customDataTypes;

    // TODO: Types that are neither built in types nor automatically generated as well as associated fields
    // nor seemed to be absolutely crucial for early iterations have not been made available yet.
    /*
    UA_ConnectionConfig localConnectionConfig;
    size_t securityPoliciesSize;
    UA_SecurityPolicy *securityPolicies;
    UA_CertificateVerification certificateVerification;
    UA_ConnectClientConnection initConnectionFunc;

    UA_StatusCode (*pollConnectionFunc)(UA_Connection *connection,
                                        UA_UInt32 timeout,
                                        const UA_Logger *logger);
    void (*stateCallback)(UA_Client *client,
                          UA_SecureChannelState channelState,
                          UA_SessionState sessionState,
                          UA_StatusCode connectStatus);
    void (*inactivityCallback)(UA_Client *client);

    UA_UInt16 outStandingPublishRequests;

    void (*subscriptionInactivityCallback)(UA_Client *client,
                                           UA_UInt32 subscriptionId,
                                           void *subContext);
*/
} UA_ClientConfig;

// connection
UA_StatusCode UA_Client_connect(UA_Client *client, const char *endpointUrl);
UA_StatusCode UA_Client_disconnect(UA_Client *client);
UA_StatusCode UA_Client_connectSecureChannel(UA_Client *client, const char *endpointUrl);
UA_StatusCode UA_Client_disconnectSecureChannel(UA_Client *client);
UA_StatusCode UA_Client_connectAsync(UA_Client *client, const char *endpointUrl);
UA_StatusCode UA_Client_connectSecureChannelAsync(UA_Client *client, const char *endpointUrl);
UA_StatusCode UA_Client_connectUsername(UA_Client *client, const char *endpointUrl, const char *username, const char *password);
UA_StatusCode UA_Client_disconnectAsync(UA_Client *client);

// services
UA_ReadResponse UA_Client_Service_read(UA_Client *client, const UA_ReadRequest request);
UA_WriteResponse UA_Client_Service_write(UA_Client *client, const UA_WriteRequest request);
UA_CallResponse UA_Client_Service_call(UA_Client *client, const UA_CallRequest request);
UA_AddNodesResponse UA_Client_Service_addNodes(UA_Client *client, const UA_AddNodesRequest request);
UA_AddReferencesResponse UA_Client_Service_addReferences(UA_Client *client, const UA_AddReferencesRequest request);
UA_DeleteNodesResponse UA_Client_Service_deleteNodes(UA_Client *client, const UA_DeleteNodesRequest request);
UA_DeleteReferencesResponse UA_Client_Service_deleteReferences(UA_Client *client, const UA_DeleteReferencesRequest request);
UA_BrowseResponse UA_Client_Service_browse(UA_Client *client, const UA_BrowseRequest request);
UA_BrowseNextResponse UA_Client_Service_browseNext(UA_Client *client, const UA_BrowseNextRequest request);
UA_TranslateBrowsePathsToNodeIdsResponse UA_Client_Service_translateBrowsePathsToNodeIds(UA_Client *client, const UA_TranslateBrowsePathsToNodeIdsRequest request);
UA_RegisterNodesResponse UA_Client_Service_registerNodes(UA_Client *client, const UA_RegisterNodesRequest request);
UA_UnregisterNodesResponse UA_Client_Service_unregisterNodes(UA_Client *client, const UA_UnregisterNodesRequest request);

// misc
typedef void (*UA_ClientAsyncServiceCallback)(UA_Client *client, void *userdata, UA_UInt32 requestId, void *response);
typedef void (*UA_ClientCallback)(UA_Client *client, void *data);

// callback function pointer implementations
extern "Python" void python_wrapper_UA_ClientAsyncServiceCallback(UA_Client *client, void *userdata, UA_UInt32 requestId, void *response);
extern "Python" void python_wrapper_UA_ClientCallback(UA_Client *client, void *data);

// utils
UA_ClientConfig * UA_Client_getConfig(UA_Client *client);
const UA_DataType * UA_Client_findDataType(UA_Client *client, const UA_NodeId *typeId);
UA_StatusCode UA_Client_getEndpoints(UA_Client *client, const char *serverUrl, size_t* endpointDescriptionsSize, UA_EndpointDescription** endpointDescriptions);
UA_StatusCode UA_Client_findServers(UA_Client *client, const char *serverUrl, size_t serverUrisSize, UA_String *serverUris, size_t localeIdsSize, UA_String *localeIds, size_t *registeredServersSize, UA_ApplicationDescription **registeredServers);
/*UA_StatusCode UA_Client_findServersOnNetwork(UA_Client *client, const char *serverUrl, UA_UInt32 startingRecordId, UA_UInt32 maxRecordsToReturn, size_t serverCapabilityFilterSize, UA_String *serverCapabilityFilter, size_t *serverOnNetworkSize, UA_ServerOnNetwork **serverOnNetwork);*/
UA_StatusCode UA_Client_addTimedCallback(UA_Client *client, UA_ClientCallback callback, void *data, UA_DateTime date, UA_UInt64 *callbackId);
UA_StatusCode UA_Client_addRepeatedCallback(UA_Client *client, UA_ClientCallback callback, void *data, UA_Double interval_ms, UA_UInt64 *callbackId);
UA_StatusCode UA_Client_changeRepeatedCallbackInterval(UA_Client *client, UA_UInt64 callbackId, UA_Double interval_ms);
void UA_Client_removeCallback(UA_Client *client, UA_UInt64 callbackId);
UA_Client * UA_Client_newWithConfig(const UA_ClientConfig *config);
UA_StatusCode UA_Client_run_iterate(UA_Client *client, UA_UInt32 timeout);
UA_StatusCode UA_Client_renewSecureChannel(UA_Client *client);
UA_StatusCode __UA_Client_AsyncServiceEx(UA_Client *client, const void *request, const UA_DataType *requestType, UA_ClientAsyncServiceCallback callback, const UA_DataType *responseType, void *userdata, UA_UInt32 *requestId, UA_UInt32 timeout);
void UA_Client_getState(UA_Client *client, UA_SecureChannelState *channelState, UA_SessionState *sessionState, UA_StatusCode *connectStatus);
void * UA_Client_getContext(UA_Client *client);
UA_StatusCode UA_Client_modifyAsyncCallback(UA_Client *client, UA_UInt32 requestId, void *userdata, UA_ClientAsyncServiceCallback callback);
void __UA_Client_Service(UA_Client *client, const void *request,  const UA_DataType *requestType, void *response, const UA_DataType *responseType);
UA_StatusCode __UA_Client_AsyncService(UA_Client *client, const void *request, const UA_DataType *requestType, UA_ClientAsyncServiceCallback callback, const UA_DataType *responseType, void *userdata, UA_UInt32 *requestId);