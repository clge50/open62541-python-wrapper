# +++++++++++++++++++ UaDiagnosticInfo +++++++++++++++++++++++
class UaDiagnosticInfo(UaType):
    def __init__(self, val=ffi.new("UA_DiagnosticInfo*, is_pointer=False")):
        super().__init__(val, is_pointer)
        self._has_symbolic_id = UaBoolean(val=val.hasSymbolicId)
        self._has_namespace_uri = UaBoolean(val=val.hasNamespaceUri)
        self._has_localized_text = UaBoolean(val=val.hasLocalizedText)
        self._has_locale = UaBoolean(val=val.hasLocale)
        self._has_additional_info = UaBoolean(val=val.hasAdditionalInfo)
        self._has_inner_status_code = UaBoolean(val=val.hasInnerStatusCode)
        self._has_inner_diagnostic_info = UaBoolean(val=val.hasInnerDiagnosticInfo)
        self._symbolic_id = UaInt32(val=val.symbolicId)
        self._namespace_uri = UaInt32(val=val.namespaceUri)
        self._localized_text = UaInt32(val=val.localizedText)
        self._locale = UaInt32(val=val.locale)
        self._additional_info = UaString(val=val.additionalInfo)
        self._inner_status_code = UaStatusCode(val=val.innerStatusCode)
        self._inner_diagnostic_info = UaDiagnosticInfo(val=val.innerDiagnosticInfo, is_pointer=True)
    

    @property
    def has_symbolic_id(self):
        return self._has_symbolic_id

    @has_symbolic_id.setter
    def has_symbolic_id(self, val):
        self._has_symbolic_id = val
        self._value.hasSymbolicId = val.value

    @property
    def has_namespace_uri(self):
        return self._has_namespace_uri

    @has_namespace_uri.setter
    def has_namespace_uri(self, val):
        self._has_namespace_uri = val
        self._value.hasNamespaceUri = val.value

    @property
    def has_localized_text(self):
        return self._has_localized_text

    @has_localized_text.setter
    def has_localized_text(self, val):
        self._has_localized_text = val
        self._value.hasLocalizedText = val.value

    @property
    def has_locale(self):
        return self._has_locale

    @has_locale.setter
    def has_locale(self, val):
        self._has_locale = val
        self._value.hasLocale = val.value

    @property
    def has_additional_info(self):
        return self._has_additional_info

    @has_additional_info.setter
    def has_additional_info(self, val):
        self._has_additional_info = val
        self._value.hasAdditionalInfo = val.value

    @property
    def has_inner_status_code(self):
        return self._has_inner_status_code

    @has_inner_status_code.setter
    def has_inner_status_code(self, val):
        self._has_inner_status_code = val
        self._value.hasInnerStatusCode = val.value

    @property
    def has_inner_diagnostic_info(self):
        return self._has_inner_diagnostic_info

    @has_inner_diagnostic_info.setter
    def has_inner_diagnostic_info(self, val):
        self._has_inner_diagnostic_info = val
        self._value.hasInnerDiagnosticInfo = val.value

    @property
    def symbolic_id(self):
        return self._symbolic_id

    @symbolic_id.setter
    def symbolic_id(self, val):
        self._symbolic_id = val
        self._value.symbolicId = val.value

    @property
    def namespace_uri(self):
        return self._namespace_uri

    @namespace_uri.setter
    def namespace_uri(self, val):
        self._namespace_uri = val
        self._value.namespaceUri = val.value

    @property
    def localized_text(self):
        return self._localized_text

    @localized_text.setter
    def localized_text(self, val):
        self._localized_text = val
        self._value.localizedText = val.value

    @property
    def locale(self):
        return self._locale

    @locale.setter
    def locale(self, val):
        self._locale = val
        self._value.locale = val.value

    @property
    def additional_info(self):
        return self._additional_info

    @additional_info.setter
    def additional_info(self, val):
        self._additional_info = val
        self._value.additionalInfo = val.value

    @property
    def inner_status_code(self):
        return self._inner_status_code

    @inner_status_code.setter
    def inner_status_code(self, val):
        self._inner_status_code = val
        self._value.innerStatusCode = val.value

    @property
    def inner_diagnostic_info(self):
        return self._inner_diagnostic_info

    @inner_diagnostic_info.setter
    def inner_diagnostic_info(self, val):
        self._inner_diagnostic_info = val
        self._value.innerDiagnosticInfo = val.value

    def __str__(self):
        return ("UaDiagnosticInfo:\n" + 
                self._has_symbolic_id.str_helper(1) +
                self._has_namespace_uri.str_helper(1) +
                self._has_localized_text.str_helper(1) +
                self._has_locale.str_helper(1) +
                self._has_additional_info.str_helper(1) +
                self._has_inner_status_code.str_helper(1) +
                self._has_inner_diagnostic_info.str_helper(1) +
                self._symbolic_id.str_helper(1) +
                self._namespace_uri.str_helper(1) +
                self._localized_text.str_helper(1) +
                self._locale.str_helper(1) +
                self._additional_info.str_helper(1) +
                self._inner_status_code.str_helper(1) +
                self._inner_diagnostic_info.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDiagnosticInfo:\n" + 
                self._has_symbolic_id.str_helper(n+1) +
                self._has_namespace_uri.str_helper(n+1) +
                self._has_localized_text.str_helper(n+1) +
                self._has_locale.str_helper(n+1) +
                self._has_additional_info.str_helper(n+1) +
                self._has_inner_status_code.str_helper(n+1) +
                self._has_inner_diagnostic_info.str_helper(n+1) +
                self._symbolic_id.str_helper(n+1) +
                self._namespace_uri.str_helper(n+1) +
                self._localized_text.str_helper(n+1) +
                self._locale.str_helper(n+1) +
                self._additional_info.str_helper(n+1) +
                self._inner_status_code.str_helper(n+1) +
                self._inner_diagnostic_info.str_helper(n+1))
