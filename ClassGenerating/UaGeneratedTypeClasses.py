from intermediateApi import ffi, lib

# -------------------------------------------------------------
# ------------- Classes from open62541 types.h ----------------
# -------------------------------------------------------------

class UaType:
    def __init__(self, val):
        self._value = val

    @property
    def value(self):
        return self._value[0]

    def __str__(self):
        return str(self._value)


class UaBoolean(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Boolean*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        self._p_value = val
        self._value = ffi.new("UA_Boolean*", val)

    def __str__(self):
        return "UaBoolean: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaBoolean: " + str(self._p_value)


class UaSByte(UaType):
    def __init__(self, val=None):
        if val is not None:
            super().__init__(val)
            self._p_value = val[0]
        else:
            super().__init__(ffi.new("UA_SByte*"))
            self._p_value = None

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_SByte*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -128 .. 127") from e

    def __str__(self):
        return "UaSByte: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaSByte: " + str(self._p_value)


class UaByte(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Byte*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Byte*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range 0 .. 255") from e

    def __str__(self):
        return "UaByte: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaByte: " + str(self._p_value)


class UaInt16(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Int16*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Int16*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -32,768 .. 32,767") from e

    def __str__(self):
        return "UaInt16: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaInt16: " + str(self._p_value)


class UaUInt16(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_UInt16*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_UInt16*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range 0 .. 65,535") from e

    def __str__(self):
        return "UaUInt16: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaUInt16: " + str(self._p_value)


class UaInt32(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Int32*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Int32*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -2,147,483,648 .. 2,147,483,647") from e

    def __str__(self):
        return "UaInt32: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaInt32: " + str(self._p_value)


class UaUInt32(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_UInt32*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_UInt32*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range 0 .. 4,294,967,295") from e

    def __str__(self):
        return "UaUInt32: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaUInt32: " + str(self._p_value)


class UaInt64(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Int64*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Int64*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -9,223,372,036,854,775,808 .. 9,223,372,036,854,775,807") from e

    def __str__(self):
        return "UaInt64: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaInt64: " + str(self._p_value)


class UaUInt64(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_UInt64*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_UInt64*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range 0 .. 18,446,744,073,709,551,615") from e

    def __str__(self):
        return "UaUInt64: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaUInt64: " + str(self._p_value)


class UaFloat(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Float*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Float*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -3.4E38 .. 3.4E38") from e

    def __str__(self):
        return "UaFloat: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaFloat: " + str(self._p_value)


class UaDouble(UaType):
    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_Double*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_Double*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range -1.7E308 .. 1.7E308") from e

    def __str__(self):
        return "UaDouble: " + str(self._p_value)

    def str_helper(self, n: int):
        return "\t" * n + "UaDouble: " + str(self._p_value)


class UaStatusCode(UaType):
    @staticmethod
    def code_is_bad(status_code):
        return lib.UA_StatusCode_isBad(status_code)

    UA_STATUSCODE_INFOTYPE_DATAVALUE = 0x00000400
    UA_STATUSCODE_INFOBITS_OVERFLOW = 0x00000080
    UA_STATUSCODE_GOOD = 0x00000000
    UA_STATUSCODE_UNCERTAIN = 0x40000000
    UA_STATUSCODE_BAD = 0x80000000
    UA_STATUSCODE_BADUNEXPECTEDERROR = 0x80010000
    UA_STATUSCODE_BADINTERNALERROR = 0x80020000
    UA_STATUSCODE_BADOUTOFMEMORY = 0x80030000
    UA_STATUSCODE_BADRESOURCEUNAVAILABLE = 0x80040000
    UA_STATUSCODE_BADCOMMUNICATIONERROR = 0x80050000
    UA_STATUSCODE_BADENCODINGERROR = 0x80060000
    UA_STATUSCODE_BADDECODINGERROR = 0x80070000
    UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED = 0x80080000
    UA_STATUSCODE_BADREQUESTTOOLARGE = 0x80B80000
    UA_STATUSCODE_BADRESPONSETOOLARGE = 0x80B90000
    UA_STATUSCODE_BADUNKNOWNRESPONSE = 0x80090000
    UA_STATUSCODE_BADTIMEOUT = 0x800A0000
    UA_STATUSCODE_BADSERVICEUNSUPPORTED = 0x800B0000
    UA_STATUSCODE_BADSHUTDOWN = 0x800C0000
    UA_STATUSCODE_BADSERVERNOTCONNECTED = 0x800D0000
    UA_STATUSCODE_BADSERVERHALTED = 0x800E0000
    UA_STATUSCODE_BADNOTHINGTODO = 0x800F0000
    UA_STATUSCODE_BADTOOMANYOPERATIONS = 0x80100000
    UA_STATUSCODE_BADTOOMANYMONITOREDITEMS = 0x80DB0000
    UA_STATUSCODE_BADDATATYPEIDUNKNOWN = 0x80110000
    UA_STATUSCODE_BADCERTIFICATEINVALID = 0x80120000
    UA_STATUSCODE_BADSECURITYCHECKSFAILED = 0x80130000
    UA_STATUSCODE_BADCERTIFICATEPOLICYCHECKFAILED = 0x81140000
    UA_STATUSCODE_BADCERTIFICATETIMEINVALID = 0x80140000
    UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID = 0x80150000
    UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID = 0x80160000
    UA_STATUSCODE_BADCERTIFICATEURIINVALID = 0x80170000
    UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED = 0x80180000
    UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED = 0x80190000
    UA_STATUSCODE_BADCERTIFICATEUNTRUSTED = 0x801A0000
    UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN = 0x801B0000
    UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN = 0x801C0000
    UA_STATUSCODE_BADCERTIFICATEREVOKED = 0x801D0000
    UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED = 0x801E0000
    UA_STATUSCODE_BADCERTIFICATECHAININCOMPLETE = 0x810D0000
    UA_STATUSCODE_BADUSERACCESSDENIED = 0x801F0000
    UA_STATUSCODE_BADIDENTITYTOKENINVALID = 0x80200000
    UA_STATUSCODE_BADIDENTITYTOKENREJECTED = 0x80210000
    UA_STATUSCODE_BADSECURECHANNELIDINVALID = 0x80220000
    UA_STATUSCODE_BADINVALIDTIMESTAMP = 0x80230000
    UA_STATUSCODE_BADNONCEINVALID = 0x80240000
    UA_STATUSCODE_BADSESSIONIDINVALID = 0x80250000
    UA_STATUSCODE_BADSESSIONCLOSED = 0x80260000
    UA_STATUSCODE_BADSESSIONNOTACTIVATED = 0x80270000
    UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID = 0x80280000
    UA_STATUSCODE_BADREQUESTHEADERINVALID = 0x802A0000
    UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID = 0x802B0000
    UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT = 0x802C0000
    UA_STATUSCODE_BADTOOMANYARGUMENTS = 0x80E50000
    UA_STATUSCODE_BADLICENSEEXPIRED = 0x810E0000
    UA_STATUSCODE_BADLICENSELIMITSEXCEEDED = 0x810F0000
    UA_STATUSCODE_BADLICENSENOTAVAILABLE = 0x81100000
    UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED = 0x002D0000
    UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY = 0x002E0000
    UA_STATUSCODE_GOODOVERLOAD = 0x002F0000
    UA_STATUSCODE_GOODCLAMPED = 0x00300000
    UA_STATUSCODE_BADNOCOMMUNICATION = 0x80310000
    UA_STATUSCODE_BADWAITINGFORINITIALDATA = 0x80320000
    UA_STATUSCODE_BADNODEIDINVALID = 0x80330000
    UA_STATUSCODE_BADNODEIDUNKNOWN = 0x80340000
    UA_STATUSCODE_BADATTRIBUTEIDINVALID = 0x80350000
    UA_STATUSCODE_BADINDEXRANGEINVALID = 0x80360000
    UA_STATUSCODE_BADINDEXRANGENODATA = 0x80370000
    UA_STATUSCODE_BADDATAENCODINGINVALID = 0x80380000
    UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED = 0x80390000
    UA_STATUSCODE_BADNOTREADABLE = 0x803A0000
    UA_STATUSCODE_BADNOTWRITABLE = 0x803B0000
    UA_STATUSCODE_BADOUTOFRANGE = 0x803C0000
    UA_STATUSCODE_BADNOTSUPPORTED = 0x803D0000
    UA_STATUSCODE_BADNOTFOUND = 0x803E0000
    UA_STATUSCODE_BADOBJECTDELETED = 0x803F0000
    UA_STATUSCODE_BADNOTIMPLEMENTED = 0x80400000
    UA_STATUSCODE_BADMONITORINGMODEINVALID = 0x80410000
    UA_STATUSCODE_BADMONITOREDITEMIDINVALID = 0x80420000
    UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID = 0x80430000
    UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED = 0x80440000
    UA_STATUSCODE_BADFILTERNOTALLOWED = 0x80450000
    UA_STATUSCODE_BADSTRUCTUREMISSING = 0x80460000
    UA_STATUSCODE_BADEVENTFILTERINVALID = 0x80470000
    UA_STATUSCODE_BADCONTENTFILTERINVALID = 0x80480000
    UA_STATUSCODE_BADFILTEROPERATORINVALID = 0x80C10000
    UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED = 0x80C20000
    UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH = 0x80C30000
    UA_STATUSCODE_BADFILTEROPERANDINVALID = 0x80490000
    UA_STATUSCODE_BADFILTERELEMENTINVALID = 0x80C40000
    UA_STATUSCODE_BADFILTERLITERALINVALID = 0x80C50000
    UA_STATUSCODE_BADCONTINUATIONPOINTINVALID = 0x804A0000
    UA_STATUSCODE_BADNOCONTINUATIONPOINTS = 0x804B0000
    UA_STATUSCODE_BADREFERENCETYPEIDINVALID = 0x804C0000
    UA_STATUSCODE_BADBROWSEDIRECTIONINVALID = 0x804D0000
    UA_STATUSCODE_BADNODENOTINVIEW = 0x804E0000
    UA_STATUSCODE_BADNUMERICOVERFLOW = 0x81120000
    UA_STATUSCODE_BADSERVERURIINVALID = 0x804F0000
    UA_STATUSCODE_BADSERVERNAMEMISSING = 0x80500000
    UA_STATUSCODE_BADDISCOVERYURLMISSING = 0x80510000
    UA_STATUSCODE_BADSEMPAHOREFILEMISSING = 0x80520000
    UA_STATUSCODE_BADREQUESTTYPEINVALID = 0x80530000
    UA_STATUSCODE_BADSECURITYMODEREJECTED = 0x80540000
    UA_STATUSCODE_BADSECURITYPOLICYREJECTED = 0x80550000
    UA_STATUSCODE_BADTOOMANYSESSIONS = 0x80560000
    UA_STATUSCODE_BADUSERSIGNATUREINVALID = 0x80570000
    UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID = 0x80580000
    UA_STATUSCODE_BADNOVALIDCERTIFICATES = 0x80590000
    UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED = 0x80C60000
    UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST = 0x805A0000
    UA_STATUSCODE_BADPARENTNODEIDINVALID = 0x805B0000
    UA_STATUSCODE_BADREFERENCENOTALLOWED = 0x805C0000
    UA_STATUSCODE_BADNODEIDREJECTED = 0x805D0000
    UA_STATUSCODE_BADNODEIDEXISTS = 0x805E0000
    UA_STATUSCODE_BADNODECLASSINVALID = 0x805F0000
    UA_STATUSCODE_BADBROWSENAMEINVALID = 0x80600000
    UA_STATUSCODE_BADBROWSENAMEDUPLICATED = 0x80610000
    UA_STATUSCODE_BADNODEATTRIBUTESINVALID = 0x80620000
    UA_STATUSCODE_BADTYPEDEFINITIONINVALID = 0x80630000
    UA_STATUSCODE_BADSOURCENODEIDINVALID = 0x80640000
    UA_STATUSCODE_BADTARGETNODEIDINVALID = 0x80650000
    UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED = 0x80660000
    UA_STATUSCODE_BADINVALIDSELFREFERENCE = 0x80670000
    UA_STATUSCODE_BADREFERENCELOCALONLY = 0x80680000
    UA_STATUSCODE_BADNODELETERIGHTS = 0x80690000
    UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED = 0x40BC0000
    UA_STATUSCODE_BADSERVERINDEXINVALID = 0x806A0000
    UA_STATUSCODE_BADVIEWIDUNKNOWN = 0x806B0000
    UA_STATUSCODE_BADVIEWTIMESTAMPINVALID = 0x80C90000
    UA_STATUSCODE_BADVIEWPARAMETERMISMATCH = 0x80CA0000
    UA_STATUSCODE_BADVIEWVERSIONINVALID = 0x80CB0000
    UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE = 0x40C00000
    UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE = 0x00BA0000
    UA_STATUSCODE_BADNOTTYPEDEFINITION = 0x80C80000
    UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER = 0x406C0000
    UA_STATUSCODE_BADTOOMANYMATCHES = 0x806D0000
    UA_STATUSCODE_BADQUERYTOOCOMPLEX = 0x806E0000
    UA_STATUSCODE_BADNOMATCH = 0x806F0000
    UA_STATUSCODE_BADMAXAGEINVALID = 0x80700000
    UA_STATUSCODE_BADSECURITYMODEINSUFFICIENT = 0x80E60000
    UA_STATUSCODE_BADHISTORYOPERATIONINVALID = 0x80710000
    UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED = 0x80720000
    UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT = 0x80BD0000
    UA_STATUSCODE_BADWRITENOTSUPPORTED = 0x80730000
    UA_STATUSCODE_BADTYPEMISMATCH = 0x80740000
    UA_STATUSCODE_BADMETHODINVALID = 0x80750000
    UA_STATUSCODE_BADARGUMENTSMISSING = 0x80760000
    UA_STATUSCODE_BADNOTEXECUTABLE = 0x81110000
    UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS = 0x80770000
    UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS = 0x80780000
    UA_STATUSCODE_BADNOSUBSCRIPTION = 0x80790000
    UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN = 0x807A0000
    UA_STATUSCODE_GOODRETRANSMISSIONQUEUENOTSUPPORTED = 0x00DF0000
    UA_STATUSCODE_BADMESSAGENOTAVAILABLE = 0x807B0000
    UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE = 0x807C0000
    UA_STATUSCODE_BADSTATENOTACTIVE = 0x80BF0000
    UA_STATUSCODE_BADALREADYEXISTS = 0x81150000
    UA_STATUSCODE_BADTCPSERVERTOOBUSY = 0x807D0000
    UA_STATUSCODE_BADTCPMESSAGETYPEINVALID = 0x807E0000
    UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN = 0x807F0000
    UA_STATUSCODE_BADTCPMESSAGETOOLARGE = 0x80800000
    UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES = 0x80810000
    UA_STATUSCODE_BADTCPINTERNALERROR = 0x80820000
    UA_STATUSCODE_BADTCPENDPOINTURLINVALID = 0x80830000
    UA_STATUSCODE_BADREQUESTINTERRUPTED = 0x80840000
    UA_STATUSCODE_BADREQUESTTIMEOUT = 0x80850000
    UA_STATUSCODE_BADSECURECHANNELCLOSED = 0x80860000
    UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN = 0x80870000
    UA_STATUSCODE_BADSEQUENCENUMBERINVALID = 0x80880000
    UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED = 0x80BE0000
    UA_STATUSCODE_BADCONFIGURATIONERROR = 0x80890000
    UA_STATUSCODE_BADNOTCONNECTED = 0x808A0000
    UA_STATUSCODE_BADDEVICEFAILURE = 0x808B0000
    UA_STATUSCODE_BADSENSORFAILURE = 0x808C0000
    UA_STATUSCODE_BADOUTOFSERVICE = 0x808D0000
    UA_STATUSCODE_BADDEADBANDFILTERINVALID = 0x808E0000
    UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE = 0x408F0000
    UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE = 0x40900000
    UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE = 0x40910000
    UA_STATUSCODE_UNCERTAININITIALVALUE = 0x40920000
    UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE = 0x40930000
    UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED = 0x40940000
    UA_STATUSCODE_UNCERTAINSUBNORMAL = 0x40950000
    UA_STATUSCODE_GOODLOCALOVERRIDE = 0x00960000
    UA_STATUSCODE_BADREFRESHINPROGRESS = 0x80970000
    UA_STATUSCODE_BADCONDITIONALREADYDISABLED = 0x80980000
    UA_STATUSCODE_BADCONDITIONALREADYENABLED = 0x80CC0000
    UA_STATUSCODE_BADCONDITIONDISABLED = 0x80990000
    UA_STATUSCODE_BADEVENTIDUNKNOWN = 0x809A0000
    UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE = 0x80BB0000
    UA_STATUSCODE_BADDIALOGNOTACTIVE = 0x80CD0000
    UA_STATUSCODE_BADDIALOGRESPONSEINVALID = 0x80CE0000
    UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED = 0x80CF0000
    UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED = 0x80D00000
    UA_STATUSCODE_BADCONDITIONALREADYSHELVED = 0x80D10000
    UA_STATUSCODE_BADCONDITIONNOTSHELVED = 0x80D20000
    UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE = 0x80D30000
    UA_STATUSCODE_BADNODATA = 0x809B0000
    UA_STATUSCODE_BADBOUNDNOTFOUND = 0x80D70000
    UA_STATUSCODE_BADBOUNDNOTSUPPORTED = 0x80D80000
    UA_STATUSCODE_BADDATALOST = 0x809D0000
    UA_STATUSCODE_BADDATAUNAVAILABLE = 0x809E0000
    UA_STATUSCODE_BADENTRYEXISTS = 0x809F0000
    UA_STATUSCODE_BADNOENTRYEXISTS = 0x80A00000
    UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED = 0x80A10000
    UA_STATUSCODE_GOODENTRYINSERTED = 0x00A20000
    UA_STATUSCODE_GOODENTRYREPLACED = 0x00A30000
    UA_STATUSCODE_UNCERTAINDATASUBNORMAL = 0x40A40000
    UA_STATUSCODE_GOODNODATA = 0x00A50000
    UA_STATUSCODE_GOODMOREDATA = 0x00A60000
    UA_STATUSCODE_BADAGGREGATELISTMISMATCH = 0x80D40000
    UA_STATUSCODE_BADAGGREGATENOTSUPPORTED = 0x80D50000
    UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS = 0x80D60000
    UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED = 0x80DA0000
    UA_STATUSCODE_GOODDATAIGNORED = 0x00D90000
    UA_STATUSCODE_BADREQUESTNOTALLOWED = 0x80E40000
    UA_STATUSCODE_BADREQUESTNOTCOMPLETE = 0x81130000
    UA_STATUSCODE_BADTICKETREQUIRED = 0x811F0000
    UA_STATUSCODE_BADTICKETINVALID = 0x81200000
    UA_STATUSCODE_GOODEDITED = 0x00DC0000
    UA_STATUSCODE_GOODPOSTACTIONFAILED = 0x00DD0000
    UA_STATUSCODE_UNCERTAINDOMINANTVALUECHANGED = 0x40DE0000
    UA_STATUSCODE_GOODDEPENDENTVALUECHANGED = 0x00E00000
    UA_STATUSCODE_BADDOMINANTVALUECHANGED = 0x80E10000
    UA_STATUSCODE_UNCERTAINDEPENDENTVALUECHANGED = 0x40E20000
    UA_STATUSCODE_BADDEPENDENTVALUECHANGED = 0x80E30000
    UA_STATUSCODE_GOODEDITED_DEPENDENTVALUECHANGED = 0x01160000
    UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED = 0x01170000
    UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 0x01180000
    UA_STATUSCODE_BADEDITED_OUTOFRANGE = 0x81190000
    UA_STATUSCODE_BADINITIALVALUE_OUTOFRANGE = 0x811A0000
    UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED = 0x811B0000
    UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED = 0x811C0000
    UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 0x811D0000
    UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 0x811E0000
    UA_STATUSCODE_GOODCOMMUNICATIONEVENT = 0x00A70000
    UA_STATUSCODE_GOODSHUTDOWNEVENT = 0x00A80000
    UA_STATUSCODE_GOODCALLAGAIN = 0x00A90000
    UA_STATUSCODE_GOODNONCRITICALTIMEOUT = 0x00AA0000
    UA_STATUSCODE_BADINVALIDARGUMENT = 0x80AB0000
    UA_STATUSCODE_BADCONNECTIONREJECTED = 0x80AC0000
    UA_STATUSCODE_BADDISCONNECT = 0x80AD0000
    UA_STATUSCODE_BADCONNECTIONCLOSED = 0x80AE0000
    UA_STATUSCODE_BADINVALIDSTATE = 0x80AF0000
    UA_STATUSCODE_BADENDOFSTREAM = 0x80B00000
    UA_STATUSCODE_BADNODATAAVAILABLE = 0x80B10000
    UA_STATUSCODE_BADWAITINGFORRESPONSE = 0x80B20000
    UA_STATUSCODE_BADOPERATIONABANDONED = 0x80B30000
    UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK = 0x80B40000
    UA_STATUSCODE_BADWOULDBLOCK = 0x80B50000
    UA_STATUSCODE_BADSYNTAXERROR = 0x80B60000
    UA_STATUSCODE_BADMAXCONNECTIONSREACHED = 0x80B70000

    val_to_string = dict([
        (0x00000400, "UA_STATUSCODE_INFOTYPE_DATAVALUE"),
        (0x00000080, "UA_STATUSCODE_INFOBITS_OVERFLOW"),
        (0x00000000, "UA_STATUSCODE_GOOD"),
        (0x40000000, "UA_STATUSCODE_UNCERTAIN"),
        (0x80000000, "UA_STATUSCODE_BAD"),
        (0x80010000, "UA_STATUSCODE_BADUNEXPECTEDERROR"),
        (0x80020000, "UA_STATUSCODE_BADINTERNALERROR"),
        (0x80030000, "UA_STATUSCODE_BADOUTOFMEMORY"),
        (0x80040000, "UA_STATUSCODE_BADRESOURCEUNAVAILABLE"),
        (0x80050000, "UA_STATUSCODE_BADCOMMUNICATIONERROR"),
        (0x80060000, "UA_STATUSCODE_BADENCODINGERROR"),
        (0x80070000, "UA_STATUSCODE_BADDECODINGERROR"),
        (0x80080000, "UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED"),
        (0x80B80000, "UA_STATUSCODE_BADREQUESTTOOLARGE"),
        (0x80B90000, "UA_STATUSCODE_BADRESPONSETOOLARGE"),
        (0x80090000, "UA_STATUSCODE_BADUNKNOWNRESPONSE"),
        (0x800A0000, "UA_STATUSCODE_BADTIMEOUT"),
        (0x800B0000, "UA_STATUSCODE_BADSERVICEUNSUPPORTED"),
        (0x800C0000, "UA_STATUSCODE_BADSHUTDOWN"),
        (0x800D0000, "UA_STATUSCODE_BADSERVERNOTCONNECTED"),
        (0x800E0000, "UA_STATUSCODE_BADSERVERHALTED"),
        (0x800F0000, "UA_STATUSCODE_BADNOTHINGTODO"),
        (0x80100000, "UA_STATUSCODE_BADTOOMANYOPERATIONS"),
        (0x80DB0000, "UA_STATUSCODE_BADTOOMANYMONITOREDITEMS"),
        (0x80110000, "UA_STATUSCODE_BADDATATYPEIDUNKNOWN"),
        (0x80120000, "UA_STATUSCODE_BADCERTIFICATEINVALID"),
        (0x80130000, "UA_STATUSCODE_BADSECURITYCHECKSFAILED"),
        (0x81140000, "UA_STATUSCODE_BADCERTIFICATEPOLICYCHECKFAILED"),
        (0x80140000, "UA_STATUSCODE_BADCERTIFICATETIMEINVALID"),
        (0x80150000, "UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID"),
        (0x80160000, "UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID"),
        (0x80170000, "UA_STATUSCODE_BADCERTIFICATEURIINVALID"),
        (0x80180000, "UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED"),
        (0x80190000, "UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED"),
        (0x801A0000, "UA_STATUSCODE_BADCERTIFICATEUNTRUSTED"),
        (0x801B0000, "UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN"),
        (0x801C0000, "UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN"),
        (0x801D0000, "UA_STATUSCODE_BADCERTIFICATEREVOKED"),
        (0x801E0000, "UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED"),
        (0x810D0000, "UA_STATUSCODE_BADCERTIFICATECHAININCOMPLETE"),
        (0x801F0000, "UA_STATUSCODE_BADUSERACCESSDENIED"),
        (0x80200000, "UA_STATUSCODE_BADIDENTITYTOKENINVALID"),
        (0x80210000, "UA_STATUSCODE_BADIDENTITYTOKENREJECTED"),
        (0x80220000, "UA_STATUSCODE_BADSECURECHANNELIDINVALID"),
        (0x80230000, "UA_STATUSCODE_BADINVALIDTIMESTAMP"),
        (0x80240000, "UA_STATUSCODE_BADNONCEINVALID"),
        (0x80250000, "UA_STATUSCODE_BADSESSIONIDINVALID"),
        (0x80260000, "UA_STATUSCODE_BADSESSIONCLOSED"),
        (0x80270000, "UA_STATUSCODE_BADSESSIONNOTACTIVATED"),
        (0x80280000, "UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID"),
        (0x802A0000, "UA_STATUSCODE_BADREQUESTHEADERINVALID"),
        (0x802B0000, "UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID"),
        (0x802C0000, "UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT"),
        (0x80E50000, "UA_STATUSCODE_BADTOOMANYARGUMENTS"),
        (0x810E0000, "UA_STATUSCODE_BADLICENSEEXPIRED"),
        (0x810F0000, "UA_STATUSCODE_BADLICENSELIMITSEXCEEDED"),
        (0x81100000, "UA_STATUSCODE_BADLICENSENOTAVAILABLE"),
        (0x002D0000, "UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED"),
        (0x002E0000, "UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY"),
        (0x002F0000, "UA_STATUSCODE_GOODOVERLOAD"),
        (0x00300000, "UA_STATUSCODE_GOODCLAMPED"),
        (0x80310000, "UA_STATUSCODE_BADNOCOMMUNICATION"),
        (0x80320000, "UA_STATUSCODE_BADWAITINGFORINITIALDATA"),
        (0x80330000, "UA_STATUSCODE_BADNODEIDINVALID"),
        (0x80340000, "UA_STATUSCODE_BADNODEIDUNKNOWN"),
        (0x80350000, "UA_STATUSCODE_BADATTRIBUTEIDINVALID"),
        (0x80360000, "UA_STATUSCODE_BADINDEXRANGEINVALID"),
        (0x80370000, "UA_STATUSCODE_BADINDEXRANGENODATA"),
        (0x80380000, "UA_STATUSCODE_BADDATAENCODINGINVALID"),
        (0x80390000, "UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED"),
        (0x803A0000, "UA_STATUSCODE_BADNOTREADABLE"),
        (0x803B0000, "UA_STATUSCODE_BADNOTWRITABLE"),
        (0x803C0000, "UA_STATUSCODE_BADOUTOFRANGE"),
        (0x803D0000, "UA_STATUSCODE_BADNOTSUPPORTED"),
        (0x803E0000, "UA_STATUSCODE_BADNOTFOUND"),
        (0x803F0000, "UA_STATUSCODE_BADOBJECTDELETED"),
        (0x80400000, "UA_STATUSCODE_BADNOTIMPLEMENTED"),
        (0x80410000, "UA_STATUSCODE_BADMONITORINGMODEINVALID"),
        (0x80420000, "UA_STATUSCODE_BADMONITOREDITEMIDINVALID"),
        (0x80430000, "UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID"),
        (0x80440000, "UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED"),
        (0x80450000, "UA_STATUSCODE_BADFILTERNOTALLOWED"),
        (0x80460000, "UA_STATUSCODE_BADSTRUCTUREMISSING"),
        (0x80470000, "UA_STATUSCODE_BADEVENTFILTERINVALID"),
        (0x80480000, "UA_STATUSCODE_BADCONTENTFILTERINVALID"),
        (0x80C10000, "UA_STATUSCODE_BADFILTEROPERATORINVALID"),
        (0x80C20000, "UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED"),
        (0x80C30000, "UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH"),
        (0x80490000, "UA_STATUSCODE_BADFILTEROPERANDINVALID"),
        (0x80C40000, "UA_STATUSCODE_BADFILTERELEMENTINVALID"),
        (0x80C50000, "UA_STATUSCODE_BADFILTERLITERALINVALID"),
        (0x804A0000, "UA_STATUSCODE_BADCONTINUATIONPOINTINVALID"),
        (0x804B0000, "UA_STATUSCODE_BADNOCONTINUATIONPOINTS"),
        (0x804C0000, "UA_STATUSCODE_BADREFERENCETYPEIDINVALID"),
        (0x804D0000, "UA_STATUSCODE_BADBROWSEDIRECTIONINVALID"),
        (0x804E0000, "UA_STATUSCODE_BADNODENOTINVIEW"),
        (0x81120000, "UA_STATUSCODE_BADNUMERICOVERFLOW"),
        (0x804F0000, "UA_STATUSCODE_BADSERVERURIINVALID"),
        (0x80500000, "UA_STATUSCODE_BADSERVERNAMEMISSING"),
        (0x80510000, "UA_STATUSCODE_BADDISCOVERYURLMISSING"),
        (0x80520000, "UA_STATUSCODE_BADSEMPAHOREFILEMISSING"),
        (0x80530000, "UA_STATUSCODE_BADREQUESTTYPEINVALID"),
        (0x80540000, "UA_STATUSCODE_BADSECURITYMODEREJECTED"),
        (0x80550000, "UA_STATUSCODE_BADSECURITYPOLICYREJECTED"),
        (0x80560000, "UA_STATUSCODE_BADTOOMANYSESSIONS"),
        (0x80570000, "UA_STATUSCODE_BADUSERSIGNATUREINVALID"),
        (0x80580000, "UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID"),
        (0x80590000, "UA_STATUSCODE_BADNOVALIDCERTIFICATES"),
        (0x80C60000, "UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED"),
        (0x805A0000, "UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST"),
        (0x805B0000, "UA_STATUSCODE_BADPARENTNODEIDINVALID"),
        (0x805C0000, "UA_STATUSCODE_BADREFERENCENOTALLOWED"),
        (0x805D0000, "UA_STATUSCODE_BADNODEIDREJECTED"),
        (0x805E0000, "UA_STATUSCODE_BADNODEIDEXISTS"),
        (0x805F0000, "UA_STATUSCODE_BADNODECLASSINVALID"),
        (0x80600000, "UA_STATUSCODE_BADBROWSENAMEINVALID"),
        (0x80610000, "UA_STATUSCODE_BADBROWSENAMEDUPLICATED"),
        (0x80620000, "UA_STATUSCODE_BADNODEATTRIBUTESINVALID"),
        (0x80630000, "UA_STATUSCODE_BADTYPEDEFINITIONINVALID"),
        (0x80640000, "UA_STATUSCODE_BADSOURCENODEIDINVALID"),
        (0x80650000, "UA_STATUSCODE_BADTARGETNODEIDINVALID"),
        (0x80660000, "UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED"),
        (0x80670000, "UA_STATUSCODE_BADINVALIDSELFREFERENCE"),
        (0x80680000, "UA_STATUSCODE_BADREFERENCELOCALONLY"),
        (0x80690000, "UA_STATUSCODE_BADNODELETERIGHTS"),
        (0x40BC0000, "UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED"),
        (0x806A0000, "UA_STATUSCODE_BADSERVERINDEXINVALID"),
        (0x806B0000, "UA_STATUSCODE_BADVIEWIDUNKNOWN"),
        (0x80C90000, "UA_STATUSCODE_BADVIEWTIMESTAMPINVALID"),
        (0x80CA0000, "UA_STATUSCODE_BADVIEWPARAMETERMISMATCH"),
        (0x80CB0000, "UA_STATUSCODE_BADVIEWVERSIONINVALID"),
        (0x40C00000, "UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE"),
        (0x00BA0000, "UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE"),
        (0x80C80000, "UA_STATUSCODE_BADNOTTYPEDEFINITION"),
        (0x406C0000, "UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER"),
        (0x806D0000, "UA_STATUSCODE_BADTOOMANYMATCHES"),
        (0x806E0000, "UA_STATUSCODE_BADQUERYTOOCOMPLEX"),
        (0x806F0000, "UA_STATUSCODE_BADNOMATCH"),
        (0x80700000, "UA_STATUSCODE_BADMAXAGEINVALID"),
        (0x80E60000, "UA_STATUSCODE_BADSECURITYMODEINSUFFICIENT"),
        (0x80710000, "UA_STATUSCODE_BADHISTORYOPERATIONINVALID"),
        (0x80720000, "UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED"),
        (0x80BD0000, "UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT"),
        (0x80730000, "UA_STATUSCODE_BADWRITENOTSUPPORTED"),
        (0x80740000, "UA_STATUSCODE_BADTYPEMISMATCH"),
        (0x80750000, "UA_STATUSCODE_BADMETHODINVALID"),
        (0x80760000, "UA_STATUSCODE_BADARGUMENTSMISSING"),
        (0x81110000, "UA_STATUSCODE_BADNOTEXECUTABLE"),
        (0x80770000, "UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS"),
        (0x80780000, "UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS"),
        (0x80790000, "UA_STATUSCODE_BADNOSUBSCRIPTION"),
        (0x807A0000, "UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN"),
        (0x00DF0000, "UA_STATUSCODE_GOODRETRANSMISSIONQUEUENOTSUPPORTED"),
        (0x807B0000, "UA_STATUSCODE_BADMESSAGENOTAVAILABLE"),
        (0x807C0000, "UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE"),
        (0x80BF0000, "UA_STATUSCODE_BADSTATENOTACTIVE"),
        (0x81150000, "UA_STATUSCODE_BADALREADYEXISTS"),
        (0x807D0000, "UA_STATUSCODE_BADTCPSERVERTOOBUSY"),
        (0x807E0000, "UA_STATUSCODE_BADTCPMESSAGETYPEINVALID"),
        (0x807F0000, "UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN"),
        (0x80800000, "UA_STATUSCODE_BADTCPMESSAGETOOLARGE"),
        (0x80810000, "UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES"),
        (0x80820000, "UA_STATUSCODE_BADTCPINTERNALERROR"),
        (0x80830000, "UA_STATUSCODE_BADTCPENDPOINTURLINVALID"),
        (0x80840000, "UA_STATUSCODE_BADREQUESTINTERRUPTED"),
        (0x80850000, "UA_STATUSCODE_BADREQUESTTIMEOUT"),
        (0x80860000, "UA_STATUSCODE_BADSECURECHANNELCLOSED"),
        (0x80870000, "UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN"),
        (0x80880000, "UA_STATUSCODE_BADSEQUENCENUMBERINVALID"),
        (0x80BE0000, "UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED"),
        (0x80890000, "UA_STATUSCODE_BADCONFIGURATIONERROR"),
        (0x808A0000, "UA_STATUSCODE_BADNOTCONNECTED"),
        (0x808B0000, "UA_STATUSCODE_BADDEVICEFAILURE"),
        (0x808C0000, "UA_STATUSCODE_BADSENSORFAILURE"),
        (0x808D0000, "UA_STATUSCODE_BADOUTOFSERVICE"),
        (0x808E0000, "UA_STATUSCODE_BADDEADBANDFILTERINVALID"),
        (0x408F0000, "UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE"),
        (0x40900000, "UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE"),
        (0x40910000, "UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE"),
        (0x40920000, "UA_STATUSCODE_UNCERTAININITIALVALUE"),
        (0x40930000, "UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE"),
        (0x40940000, "UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED"),
        (0x40950000, "UA_STATUSCODE_UNCERTAINSUBNORMAL"),
        (0x00960000, "UA_STATUSCODE_GOODLOCALOVERRIDE"),
        (0x80970000, "UA_STATUSCODE_BADREFRESHINPROGRESS"),
        (0x80980000, "UA_STATUSCODE_BADCONDITIONALREADYDISABLED"),
        (0x80CC0000, "UA_STATUSCODE_BADCONDITIONALREADYENABLED"),
        (0x80990000, "UA_STATUSCODE_BADCONDITIONDISABLED"),
        (0x809A0000, "UA_STATUSCODE_BADEVENTIDUNKNOWN"),
        (0x80BB0000, "UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE"),
        (0x80CD0000, "UA_STATUSCODE_BADDIALOGNOTACTIVE"),
        (0x80CE0000, "UA_STATUSCODE_BADDIALOGRESPONSEINVALID"),
        (0x80CF0000, "UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED"),
        (0x80D00000, "UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED"),
        (0x80D10000, "UA_STATUSCODE_BADCONDITIONALREADYSHELVED"),
        (0x80D20000, "UA_STATUSCODE_BADCONDITIONNOTSHELVED"),
        (0x80D30000, "UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE"),
        (0x809B0000, "UA_STATUSCODE_BADNODATA"),
        (0x80D70000, "UA_STATUSCODE_BADBOUNDNOTFOUND"),
        (0x80D80000, "UA_STATUSCODE_BADBOUNDNOTSUPPORTED"),
        (0x809D0000, "UA_STATUSCODE_BADDATALOST"),
        (0x809E0000, "UA_STATUSCODE_BADDATAUNAVAILABLE"),
        (0x809F0000, "UA_STATUSCODE_BADENTRYEXISTS"),
        (0x80A00000, "UA_STATUSCODE_BADNOENTRYEXISTS"),
        (0x80A10000, "UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED"),
        (0x00A20000, "UA_STATUSCODE_GOODENTRYINSERTED"),
        (0x00A30000, "UA_STATUSCODE_GOODENTRYREPLACED"),
        (0x40A40000, "UA_STATUSCODE_UNCERTAINDATASUBNORMAL"),
        (0x00A50000, "UA_STATUSCODE_GOODNODATA"),
        (0x00A60000, "UA_STATUSCODE_GOODMOREDATA"),
        (0x80D40000, "UA_STATUSCODE_BADAGGREGATELISTMISMATCH"),
        (0x80D50000, "UA_STATUSCODE_BADAGGREGATENOTSUPPORTED"),
        (0x80D60000, "UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS"),
        (0x80DA0000, "UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED"),
        (0x00D90000, "UA_STATUSCODE_GOODDATAIGNORED"),
        (0x80E40000, "UA_STATUSCODE_BADREQUESTNOTALLOWED"),
        (0x81130000, "UA_STATUSCODE_BADREQUESTNOTCOMPLETE"),
        (0x811F0000, "UA_STATUSCODE_BADTICKETREQUIRED"),
        (0x81200000, "UA_STATUSCODE_BADTICKETINVALID"),
        (0x00DC0000, "UA_STATUSCODE_GOODEDITED"),
        (0x00DD0000, "UA_STATUSCODE_GOODPOSTACTIONFAILED"),
        (0x40DE0000, "UA_STATUSCODE_UNCERTAINDOMINANTVALUECHANGED"),
        (0x00E00000, "UA_STATUSCODE_GOODDEPENDENTVALUECHANGED"),
        (0x80E10000, "UA_STATUSCODE_BADDOMINANTVALUECHANGED"),
        (0x40E20000, "UA_STATUSCODE_UNCERTAINDEPENDENTVALUECHANGED"),
        (0x80E30000, "UA_STATUSCODE_BADDEPENDENTVALUECHANGED"),
        (0x01160000, "UA_STATUSCODE_GOODEDITED_DEPENDENTVALUECHANGED"),
        (0x01170000, "UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED"),
        (0x01180000, "UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED"),
        (0x81190000, "UA_STATUSCODE_BADEDITED_OUTOFRANGE"),
        (0x811A0000, "UA_STATUSCODE_BADINITIALVALUE_OUTOFRANGE"),
        (0x811B0000, "UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED"),
        (0x811C0000, "UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED"),
        (0x811D0000, "UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED"),
        (0x811E0000, "UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED"),
        (0x00A70000, "UA_STATUSCODE_GOODCOMMUNICATIONEVENT"),
        (0x00A80000, "UA_STATUSCODE_GOODSHUTDOWNEVENT"),
        (0x00A90000, "UA_STATUSCODE_GOODCALLAGAIN"),
        (0x00AA0000, "UA_STATUSCODE_GOODNONCRITICALTIMEOUT"),
        (0x80AB0000, "UA_STATUSCODE_BADINVALIDARGUMENT"),
        (0x80AC0000, "UA_STATUSCODE_BADCONNECTIONREJECTED"),
        (0x80AD0000, "UA_STATUSCODE_BADDISCONNECT"),
        (0x80AE0000, "UA_STATUSCODE_BADCONNECTIONCLOSED"),
        (0x80AF0000, "UA_STATUSCODE_BADINVALIDSTATE"),
        (0x80B00000, "UA_STATUSCODE_BADENDOFSTREAM"),
        (0x80B10000, "UA_STATUSCODE_BADNODATAAVAILABLE"),
        (0x80B20000, "UA_STATUSCODE_BADWAITINGFORRESPONSE"),
        (0x80B30000, "UA_STATUSCODE_BADOPERATIONABANDONED"),
        (0x80B40000, "UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK"),
        (0x80B50000, "UA_STATUSCODE_BADWOULDBLOCK"),
        (0x80B60000, "UA_STATUSCODE_BADSYNTAXERROR"),
        (0x80B70000, "UA_STATUSCODE_BADMAXCONNECTIONSREACHED") ])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_StatusCode*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        try:
            self._p_value = val
            self._value = ffi.new("UA_StatusCode*", val)
        except OverflowError as e:
            raise OverflowError(f"{val} is not in range 0 .. 4,294,967,295") from e

    def __str__(self):
        return f"UaStatusCode: {UaStatusCode.val_to_string[self._p_value]} ({self._p_value})"

    def str_helper(self, n: int):
        return "\t" * n + "UaStatusCode: " + str(self._p_value)

    def is_bad(self):
        return lib.UA_StatusCode_isBad(self.value)



# -------------------------------------------------------------
# --------- Classes from types_generated.h (Enums) ------------
# -------------------------------------------------------------
# These autogenerated classes represent the open62541 enumerated types.
# The attribute val holds a ffi POINTER(!) on a variable with the Type of the corresponding enum.
# So a member of this class represents a variable with type of that enum
# The static attributes are the Python equivalents to the members of the enum.

 

# +++++++++++++++++++ UaMessageSecurityMode +++++++++++++++++++++++

class UaMessageSecurityMode(UaType):
    UA_MESSAGESECURITYMODE_INVALID = 0
    UA_MESSAGESECURITYMODE_NONE = 1
    UA_MESSAGESECURITYMODE_SIGN = 2
    UA_MESSAGESECURITYMODE_SIGNANDENCRYPT = 3
    __UA_MESSAGESECURITYMODE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_MESSAGESECURITYMODE_INVALID"),
        (1, "UA_MESSAGESECURITYMODE_NONE"),
        (2, "UA_MESSAGESECURITYMODE_SIGN"),
        (3, "UA_MESSAGESECURITYMODE_SIGNANDENCRYPT"),
        (2147483647, "__UA_MESSAGESECURITYMODE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_MessageSecurityMode*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_MessageSecurityMode*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaMessageSecurityMode: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaStructureType +++++++++++++++++++++++

class UaStructureType(UaType):
    UA_STRUCTURETYPE_STRUCTURE = 0
    UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS = 1
    UA_STRUCTURETYPE_UNION = 2
    __UA_STRUCTURETYPE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_STRUCTURETYPE_STRUCTURE"),
        (1, "UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS"),
        (2, "UA_STRUCTURETYPE_UNION"),
        (2147483647, "__UA_STRUCTURETYPE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_StructureType*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_StructureType*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaStructureType: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaMonitoringMode +++++++++++++++++++++++

class UaMonitoringMode(UaType):
    UA_MONITORINGMODE_DISABLED = 0
    UA_MONITORINGMODE_SAMPLING = 1
    UA_MONITORINGMODE_REPORTING = 2
    __UA_MONITORINGMODE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_MONITORINGMODE_DISABLED"),
        (1, "UA_MONITORINGMODE_SAMPLING"),
        (2, "UA_MONITORINGMODE_REPORTING"),
        (2147483647, "__UA_MONITORINGMODE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_MonitoringMode*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_MonitoringMode*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaMonitoringMode: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaBrowseResultMask +++++++++++++++++++++++

class UaBrowseResultMask(UaType):
    UA_BROWSERESULTMASK_NONE = 0
    UA_BROWSERESULTMASK_REFERENCETYPEID = 1
    UA_BROWSERESULTMASK_ISFORWARD = 2
    UA_BROWSERESULTMASK_NODECLASS = 4
    UA_BROWSERESULTMASK_BROWSENAME = 8
    UA_BROWSERESULTMASK_DISPLAYNAME = 16
    UA_BROWSERESULTMASK_TYPEDEFINITION = 32
    UA_BROWSERESULTMASK_ALL = 63
    UA_BROWSERESULTMASK_REFERENCETYPEINFO = 3
    UA_BROWSERESULTMASK_TARGETINFO = 60
    __UA_BROWSERESULTMASK_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_BROWSERESULTMASK_NONE"),
        (1, "UA_BROWSERESULTMASK_REFERENCETYPEID"),
        (2, "UA_BROWSERESULTMASK_ISFORWARD"),
        (4, "UA_BROWSERESULTMASK_NODECLASS"),
        (8, "UA_BROWSERESULTMASK_BROWSENAME"),
        (16, "UA_BROWSERESULTMASK_DISPLAYNAME"),
        (32, "UA_BROWSERESULTMASK_TYPEDEFINITION"),
        (63, "UA_BROWSERESULTMASK_ALL"),
        (3, "UA_BROWSERESULTMASK_REFERENCETYPEINFO"),
        (60, "UA_BROWSERESULTMASK_TARGETINFO"),
        (2147483647, "__UA_BROWSERESULTMASK_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_BrowseResultMask*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_BrowseResultMask*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaBrowseResultMask: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaAxisScaleEnumeration +++++++++++++++++++++++

class UaAxisScaleEnumeration(UaType):
    UA_AXISSCALEENUMERATION_LINEAR = 0
    UA_AXISSCALEENUMERATION_LOG = 1
    UA_AXISSCALEENUMERATION_LN = 2
    __UA_AXISSCALEENUMERATION_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_AXISSCALEENUMERATION_LINEAR"),
        (1, "UA_AXISSCALEENUMERATION_LOG"),
        (2, "UA_AXISSCALEENUMERATION_LN"),
        (2147483647, "__UA_AXISSCALEENUMERATION_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_AxisScaleEnumeration*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_AxisScaleEnumeration*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaAxisScaleEnumeration: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaBrowseDirection +++++++++++++++++++++++

class UaBrowseDirection(UaType):
    UA_BROWSEDIRECTION_FORWARD = 0
    UA_BROWSEDIRECTION_INVERSE = 1
    UA_BROWSEDIRECTION_BOTH = 2
    UA_BROWSEDIRECTION_INVALID = 3
    __UA_BROWSEDIRECTION_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_BROWSEDIRECTION_FORWARD"),
        (1, "UA_BROWSEDIRECTION_INVERSE"),
        (2, "UA_BROWSEDIRECTION_BOTH"),
        (3, "UA_BROWSEDIRECTION_INVALID"),
        (2147483647, "__UA_BROWSEDIRECTION_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_BrowseDirection*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_BrowseDirection*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaBrowseDirection: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaTimestampsToReturn +++++++++++++++++++++++

class UaTimestampsToReturn(UaType):
    UA_TIMESTAMPSTORETURN_SOURCE = 0
    UA_TIMESTAMPSTORETURN_SERVER = 1
    UA_TIMESTAMPSTORETURN_BOTH = 2
    UA_TIMESTAMPSTORETURN_NEITHER = 3
    UA_TIMESTAMPSTORETURN_INVALID = 4
    __UA_TIMESTAMPSTORETURN_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_TIMESTAMPSTORETURN_SOURCE"),
        (1, "UA_TIMESTAMPSTORETURN_SERVER"),
        (2, "UA_TIMESTAMPSTORETURN_BOTH"),
        (3, "UA_TIMESTAMPSTORETURN_NEITHER"),
        (4, "UA_TIMESTAMPSTORETURN_INVALID"),
        (2147483647, "__UA_TIMESTAMPSTORETURN_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_TimestampsToReturn*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_TimestampsToReturn*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaTimestampsToReturn: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaNodeClass +++++++++++++++++++++++

class UaNodeClass(UaType):
    UA_NODECLASS_UNSPECIFIED = 0
    UA_NODECLASS_OBJECT = 1
    UA_NODECLASS_VARIABLE = 2
    UA_NODECLASS_METHOD = 4
    UA_NODECLASS_OBJECTTYPE = 8
    UA_NODECLASS_VARIABLETYPE = 16
    UA_NODECLASS_REFERENCETYPE = 32
    UA_NODECLASS_DATATYPE = 64
    UA_NODECLASS_VIEW = 128
    __UA_NODECLASS_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_NODECLASS_UNSPECIFIED"),
        (1, "UA_NODECLASS_OBJECT"),
        (2, "UA_NODECLASS_VARIABLE"),
        (4, "UA_NODECLASS_METHOD"),
        (8, "UA_NODECLASS_OBJECTTYPE"),
        (16, "UA_NODECLASS_VARIABLETYPE"),
        (32, "UA_NODECLASS_REFERENCETYPE"),
        (64, "UA_NODECLASS_DATATYPE"),
        (128, "UA_NODECLASS_VIEW"),
        (2147483647, "__UA_NODECLASS_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_NodeClass*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_NodeClass*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaNodeClass: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaSecurityTokenRequestType +++++++++++++++++++++++

class UaSecurityTokenRequestType(UaType):
    UA_SECURITYTOKENREQUESTTYPE_ISSUE = 0
    UA_SECURITYTOKENREQUESTTYPE_RENEW = 1
    __UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_SECURITYTOKENREQUESTTYPE_ISSUE"),
        (1, "UA_SECURITYTOKENREQUESTTYPE_RENEW"),
        (2147483647, "__UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_SecurityTokenRequestType*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_SecurityTokenRequestType*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaSecurityTokenRequestType: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaApplicationType +++++++++++++++++++++++

class UaApplicationType(UaType):
    UA_APPLICATIONTYPE_SERVER = 0
    UA_APPLICATIONTYPE_CLIENT = 1
    UA_APPLICATIONTYPE_CLIENTANDSERVER = 2
    UA_APPLICATIONTYPE_DISCOVERYSERVER = 3
    __UA_APPLICATIONTYPE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_APPLICATIONTYPE_SERVER"),
        (1, "UA_APPLICATIONTYPE_CLIENT"),
        (2, "UA_APPLICATIONTYPE_CLIENTANDSERVER"),
        (3, "UA_APPLICATIONTYPE_DISCOVERYSERVER"),
        (2147483647, "__UA_APPLICATIONTYPE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_ApplicationType*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_ApplicationType*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaApplicationType: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaDeadbandType +++++++++++++++++++++++

class UaDeadbandType(UaType):
    UA_DEADBANDTYPE_NONE = 0
    UA_DEADBANDTYPE_ABSOLUTE = 1
    UA_DEADBANDTYPE_PERCENT = 2
    __UA_DEADBANDTYPE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_DEADBANDTYPE_NONE"),
        (1, "UA_DEADBANDTYPE_ABSOLUTE"),
        (2, "UA_DEADBANDTYPE_PERCENT"),
        (2147483647, "__UA_DEADBANDTYPE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_DeadbandType*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_DeadbandType*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaDeadbandType: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaDataChangeTrigger +++++++++++++++++++++++

class UaDataChangeTrigger(UaType):
    UA_DATACHANGETRIGGER_STATUS = 0
    UA_DATACHANGETRIGGER_STATUSVALUE = 1
    UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP = 2
    __UA_DATACHANGETRIGGER_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_DATACHANGETRIGGER_STATUS"),
        (1, "UA_DATACHANGETRIGGER_STATUSVALUE"),
        (2, "UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP"),
        (2147483647, "__UA_DATACHANGETRIGGER_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_DataChangeTrigger*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_DataChangeTrigger*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaDataChangeTrigger: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaUserTokenType +++++++++++++++++++++++

class UaUserTokenType(UaType):
    UA_USERTOKENTYPE_ANONYMOUS = 0
    UA_USERTOKENTYPE_USERNAME = 1
    UA_USERTOKENTYPE_CERTIFICATE = 2
    UA_USERTOKENTYPE_ISSUEDTOKEN = 3
    __UA_USERTOKENTYPE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_USERTOKENTYPE_ANONYMOUS"),
        (1, "UA_USERTOKENTYPE_USERNAME"),
        (2, "UA_USERTOKENTYPE_CERTIFICATE"),
        (3, "UA_USERTOKENTYPE_ISSUEDTOKEN"),
        (2147483647, "__UA_USERTOKENTYPE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_UserTokenType*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_UserTokenType*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaUserTokenType: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaNodeAttributesMask +++++++++++++++++++++++

class UaNodeAttributesMask(UaType):
    UA_NODEATTRIBUTESMASK_NONE = 0
    UA_NODEATTRIBUTESMASK_ACCESSLEVEL = 1
    UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS = 2
    UA_NODEATTRIBUTESMASK_BROWSENAME = 4
    UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS = 8
    UA_NODEATTRIBUTESMASK_DATATYPE = 16
    UA_NODEATTRIBUTESMASK_DESCRIPTION = 32
    UA_NODEATTRIBUTESMASK_DISPLAYNAME = 64
    UA_NODEATTRIBUTESMASK_EVENTNOTIFIER = 128
    UA_NODEATTRIBUTESMASK_EXECUTABLE = 256
    UA_NODEATTRIBUTESMASK_HISTORIZING = 512
    UA_NODEATTRIBUTESMASK_INVERSENAME = 1024
    UA_NODEATTRIBUTESMASK_ISABSTRACT = 2048
    UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL = 4096
    UA_NODEATTRIBUTESMASK_NODECLASS = 8192
    UA_NODEATTRIBUTESMASK_NODEID = 16384
    UA_NODEATTRIBUTESMASK_SYMMETRIC = 32768
    UA_NODEATTRIBUTESMASK_USERACCESSLEVEL = 65536
    UA_NODEATTRIBUTESMASK_USEREXECUTABLE = 131072
    UA_NODEATTRIBUTESMASK_USERWRITEMASK = 262144
    UA_NODEATTRIBUTESMASK_VALUERANK = 524288
    UA_NODEATTRIBUTESMASK_WRITEMASK = 1048576
    UA_NODEATTRIBUTESMASK_VALUE = 2097152
    UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION = 4194304
    UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS = 8388608
    UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS = 16777216
    UA_NODEATTRIBUTESMASK_ALL = 33554431
    UA_NODEATTRIBUTESMASK_BASENODE = 26501220
    UA_NODEATTRIBUTESMASK_OBJECT = 26501348
    UA_NODEATTRIBUTESMASK_OBJECTTYPE = 26503268
    UA_NODEATTRIBUTESMASK_VARIABLE = 26571383
    UA_NODEATTRIBUTESMASK_VARIABLETYPE = 28600438
    UA_NODEATTRIBUTESMASK_METHOD = 26632548
    UA_NODEATTRIBUTESMASK_REFERENCETYPE = 26537060
    UA_NODEATTRIBUTESMASK_VIEW = 26501356
    __UA_NODEATTRIBUTESMASK_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_NODEATTRIBUTESMASK_NONE"),
        (1, "UA_NODEATTRIBUTESMASK_ACCESSLEVEL"),
        (2, "UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS"),
        (4, "UA_NODEATTRIBUTESMASK_BROWSENAME"),
        (8, "UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS"),
        (16, "UA_NODEATTRIBUTESMASK_DATATYPE"),
        (32, "UA_NODEATTRIBUTESMASK_DESCRIPTION"),
        (64, "UA_NODEATTRIBUTESMASK_DISPLAYNAME"),
        (128, "UA_NODEATTRIBUTESMASK_EVENTNOTIFIER"),
        (256, "UA_NODEATTRIBUTESMASK_EXECUTABLE"),
        (512, "UA_NODEATTRIBUTESMASK_HISTORIZING"),
        (1024, "UA_NODEATTRIBUTESMASK_INVERSENAME"),
        (2048, "UA_NODEATTRIBUTESMASK_ISABSTRACT"),
        (4096, "UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL"),
        (8192, "UA_NODEATTRIBUTESMASK_NODECLASS"),
        (16384, "UA_NODEATTRIBUTESMASK_NODEID"),
        (32768, "UA_NODEATTRIBUTESMASK_SYMMETRIC"),
        (65536, "UA_NODEATTRIBUTESMASK_USERACCESSLEVEL"),
        (131072, "UA_NODEATTRIBUTESMASK_USEREXECUTABLE"),
        (262144, "UA_NODEATTRIBUTESMASK_USERWRITEMASK"),
        (524288, "UA_NODEATTRIBUTESMASK_VALUERANK"),
        (1048576, "UA_NODEATTRIBUTESMASK_WRITEMASK"),
        (2097152, "UA_NODEATTRIBUTESMASK_VALUE"),
        (4194304, "UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION"),
        (8388608, "UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS"),
        (16777216, "UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS"),
        (33554431, "UA_NODEATTRIBUTESMASK_ALL"),
        (26501220, "UA_NODEATTRIBUTESMASK_BASENODE"),
        (26501348, "UA_NODEATTRIBUTESMASK_OBJECT"),
        (26503268, "UA_NODEATTRIBUTESMASK_OBJECTTYPE"),
        (26571383, "UA_NODEATTRIBUTESMASK_VARIABLE"),
        (28600438, "UA_NODEATTRIBUTESMASK_VARIABLETYPE"),
        (26632548, "UA_NODEATTRIBUTESMASK_METHOD"),
        (26537060, "UA_NODEATTRIBUTESMASK_REFERENCETYPE"),
        (26501356, "UA_NODEATTRIBUTESMASK_VIEW"),
        (2147483647, "__UA_NODEATTRIBUTESMASK_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_NodeAttributesMask*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_NodeAttributesMask*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaNodeAttributesMask: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaServerState +++++++++++++++++++++++

class UaServerState(UaType):
    UA_SERVERSTATE_RUNNING = 0
    UA_SERVERSTATE_FAILED = 1
    UA_SERVERSTATE_NOCONFIGURATION = 2
    UA_SERVERSTATE_SUSPENDED = 3
    UA_SERVERSTATE_SHUTDOWN = 4
    UA_SERVERSTATE_TEST = 5
    UA_SERVERSTATE_COMMUNICATIONFAULT = 6
    UA_SERVERSTATE_UNKNOWN = 7
    __UA_SERVERSTATE_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_SERVERSTATE_RUNNING"),
        (1, "UA_SERVERSTATE_FAILED"),
        (2, "UA_SERVERSTATE_NOCONFIGURATION"),
        (3, "UA_SERVERSTATE_SUSPENDED"),
        (4, "UA_SERVERSTATE_SHUTDOWN"),
        (5, "UA_SERVERSTATE_TEST"),
        (6, "UA_SERVERSTATE_COMMUNICATIONFAULT"),
        (7, "UA_SERVERSTATE_UNKNOWN"),
        (2147483647, "__UA_SERVERSTATE_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_ServerState*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_ServerState*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaServerState: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaFilterOperator +++++++++++++++++++++++

class UaFilterOperator(UaType):
    UA_FILTEROPERATOR_EQUALS = 0
    UA_FILTEROPERATOR_ISNULL = 1
    UA_FILTEROPERATOR_GREATERTHAN = 2
    UA_FILTEROPERATOR_LESSTHAN = 3
    UA_FILTEROPERATOR_GREATERTHANOREQUAL = 4
    UA_FILTEROPERATOR_LESSTHANOREQUAL = 5
    UA_FILTEROPERATOR_LIKE = 6
    UA_FILTEROPERATOR_NOT = 7
    UA_FILTEROPERATOR_BETWEEN = 8
    UA_FILTEROPERATOR_INLIST = 9
    UA_FILTEROPERATOR_AND = 10
    UA_FILTEROPERATOR_OR = 11
    UA_FILTEROPERATOR_CAST = 12
    UA_FILTEROPERATOR_INVIEW = 13
    UA_FILTEROPERATOR_OFTYPE = 14
    UA_FILTEROPERATOR_RELATEDTO = 15
    UA_FILTEROPERATOR_BITWISEAND = 16
    UA_FILTEROPERATOR_BITWISEOR = 17
    __UA_FILTEROPERATOR_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_FILTEROPERATOR_EQUALS"),
        (1, "UA_FILTEROPERATOR_ISNULL"),
        (2, "UA_FILTEROPERATOR_GREATERTHAN"),
        (3, "UA_FILTEROPERATOR_LESSTHAN"),
        (4, "UA_FILTEROPERATOR_GREATERTHANOREQUAL"),
        (5, "UA_FILTEROPERATOR_LESSTHANOREQUAL"),
        (6, "UA_FILTEROPERATOR_LIKE"),
        (7, "UA_FILTEROPERATOR_NOT"),
        (8, "UA_FILTEROPERATOR_BETWEEN"),
        (9, "UA_FILTEROPERATOR_INLIST"),
        (10, "UA_FILTEROPERATOR_AND"),
        (11, "UA_FILTEROPERATOR_OR"),
        (12, "UA_FILTEROPERATOR_CAST"),
        (13, "UA_FILTEROPERATOR_INVIEW"),
        (14, "UA_FILTEROPERATOR_OFTYPE"),
        (15, "UA_FILTEROPERATOR_RELATEDTO"),
        (16, "UA_FILTEROPERATOR_BITWISEAND"),
        (17, "UA_FILTEROPERATOR_BITWISEOR"),
        (2147483647, "__UA_FILTEROPERATOR_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_FilterOperator*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_FilterOperator*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaFilterOperator: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)




 

# +++++++++++++++++++ UaRedundancySupport +++++++++++++++++++++++

class UaRedundancySupport(UaType):
    UA_REDUNDANCYSUPPORT_NONE = 0
    UA_REDUNDANCYSUPPORT_COLD = 1
    UA_REDUNDANCYSUPPORT_WARM = 2
    UA_REDUNDANCYSUPPORT_HOT = 3
    UA_REDUNDANCYSUPPORT_TRANSPARENT = 4
    UA_REDUNDANCYSUPPORT_HOTANDMIRRORED = 5
    __UA_REDUNDANCYSUPPORT_FORCE32BIT = 2147483647

    val_to_string = dict([
        (0, "UA_REDUNDANCYSUPPORT_NONE"),
        (1, "UA_REDUNDANCYSUPPORT_COLD"),
        (2, "UA_REDUNDANCYSUPPORT_WARM"),
        (3, "UA_REDUNDANCYSUPPORT_HOT"),
        (4, "UA_REDUNDANCYSUPPORT_TRANSPARENT"),
        (5, "UA_REDUNDANCYSUPPORT_HOTANDMIRRORED"),
        (2147483647, "__UA_REDUNDANCYSUPPORT_FORCE32BIT")])

    def __init__(self, val=None):
        if val is None:
            super().__init__(ffi.new("UA_RedundancySupport*"))
            self._p_value = None
        else:
            super().__init__(val)
            self._p_value = val[0]

    @property
    def p_value(self):
        return self._p_value

    @p_value.setter
    def p_value(self, val):
        if val in self.val_to_string.keys():
            self._p_value = val
            super.__init__(ffi.new("UA_RedundancySupport*", val))
        else:
            raise OverflowError(f"{val} is not a valid member of this class")

    def __str__(self):
        return f"UaRedundancySupport: {self.val_to_string[self._p_value]} ({str(self._p_value)})"

    def str_helper(self, n: int):
        return "\t" * n + str(self)



# -------------------------------------------------------------
# -------- Classes from types_generated.h (Structs) -----------
# -------------------------------------------------------------
# These autogenerated classes represent the open62541 structured types.
# The attribute val holds a ffi POINTER(!) on a a variable with the Type of the corresponding struct.
# The other attributes are the Python equivalents to the attributes of the c struct.

 
# +++++++++++++++++++ UaViewAttributes +++++++++++++++++++++++

class UaViewAttributes(UaType):
    def __init__(self, val=ffi.new("UA_ViewAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._containsNoLoops = UaBoolean(val.containsNoLoops)
        self._eventNotifier = UaByte(val.eventNotifier)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def containsNoLoops(self):
        return self._containsNoLoops

    @containsNoLoops.setter
    def containsNoLoops(self, val):
        self._containsNoLoops = val
        self._value.containsNoLoops = val.value

    @property
    def eventNotifier(self):
        return self._eventNotifier

    @eventNotifier.setter
    def eventNotifier(self, val):
        self._eventNotifier = val
        self._value.eventNotifier = val.value

    def __str__(self):
        return ("UaViewAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Byte.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaViewAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1))
                

 
# +++++++++++++++++++ UaXVType +++++++++++++++++++++++

class UaXVType(UaType):
    def __init__(self, val=ffi.new("UA_XVType*")):
        super().__init__(val)
        self._x = UaDouble(val.x)
        self._value = UaFloat(val.value)
    

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, val):
        self._x = val
        self._value.x = val.value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    def __str__(self):
        return ("UaXVType:\n" + 
                self._UA_Double.str_helper(1) +
                self._UA_Float.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaXVType:\n" + 
                self._UA_Double.str_helper(n+1) +
                self._UA_Float.str_helper(n+1))
                

 
# +++++++++++++++++++ UaElementOperand +++++++++++++++++++++++

class UaElementOperand(UaType):
    def __init__(self, val=ffi.new("UA_ElementOperand*")):
        super().__init__(val)
        self._index = UaUInt32(val.index)
    

    @property
    def index(self):
        return self._index

    @index.setter
    def index(self, val):
        self._index = val
        self._value.index = val.value

    def __str__(self):
        return ("UaElementOperand:\n" + 
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaElementOperand:\n" + 
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaVariableAttributes +++++++++++++++++++++++

class UaVariableAttributes(UaType):
    def __init__(self, val=ffi.new("UA_VariableAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._value = UaVariant(val.value)
        self._dataType = UaNodeId(val.dataType)
        self._valueRank = UaInt32(val.valueRank)
        self._arrayDimensionsSize = UaSizeT(val.arrayDimensionsSize)
        self._*arrayDimensions = UaUInt32(val.*arrayDimensions)
        self._accessLevel = UaByte(val.accessLevel)
        self._userAccessLevel = UaByte(val.userAccessLevel)
        self._minimumSamplingInterval = UaDouble(val.minimumSamplingInterval)
        self._historizing = UaBoolean(val.historizing)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    @property
    def dataType(self):
        return self._dataType

    @dataType.setter
    def dataType(self, val):
        self._dataType = val
        self._value.dataType = val.value

    @property
    def valueRank(self):
        return self._valueRank

    @valueRank.setter
    def valueRank(self, val):
        self._valueRank = val
        self._value.valueRank = val.value

    @property
    def arrayDimensionsSize(self):
        return self._arrayDimensionsSize

    @arrayDimensionsSize.setter
    def arrayDimensionsSize(self, val):
        self._arrayDimensionsSize = val
        self._value.arrayDimensionsSize = val.value

    @property
    def *arrayDimensions(self):
        return self._*arrayDimensions

    @*arrayDimensions.setter
    def *arrayDimensions(self, val):
        self._*arrayDimensions = val
        self._value.*arrayDimensions = val.value

    @property
    def accessLevel(self):
        return self._accessLevel

    @accessLevel.setter
    def accessLevel(self, val):
        self._accessLevel = val
        self._value.accessLevel = val.value

    @property
    def userAccessLevel(self):
        return self._userAccessLevel

    @userAccessLevel.setter
    def userAccessLevel(self, val):
        self._userAccessLevel = val
        self._value.userAccessLevel = val.value

    @property
    def minimumSamplingInterval(self):
        return self._minimumSamplingInterval

    @minimumSamplingInterval.setter
    def minimumSamplingInterval(self, val):
        self._minimumSamplingInterval = val
        self._value.minimumSamplingInterval = val.value

    @property
    def historizing(self):
        return self._historizing

    @historizing.setter
    def historizing(self, val):
        self._historizing = val
        self._value.historizing = val.value

    def __str__(self):
        return ("UaVariableAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Variant.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Int32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Byte.str_helper(1) +
                self._UA_Byte.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaVariableAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Variant.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Int32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEnumValueType +++++++++++++++++++++++

class UaEnumValueType(UaType):
    def __init__(self, val=ffi.new("UA_EnumValueType*")):
        super().__init__(val)
        self._value = UaInt64(val.value)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
    

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    def __str__(self):
        return ("UaEnumValueType:\n" + 
                self._UA_Int64.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEnumValueType:\n" + 
                self._UA_Int64.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEventFieldList +++++++++++++++++++++++

class UaEventFieldList(UaType):
    def __init__(self, val=ffi.new("UA_EventFieldList*")):
        super().__init__(val)
        self._clientHandle = UaUInt32(val.clientHandle)
        self._eventFieldsSize = UaSizeT(val.eventFieldsSize)
        self._*eventFields = UaVariant(val.*eventFields)
    

    @property
    def clientHandle(self):
        return self._clientHandle

    @clientHandle.setter
    def clientHandle(self, val):
        self._clientHandle = val
        self._value.clientHandle = val.value

    @property
    def eventFieldsSize(self):
        return self._eventFieldsSize

    @eventFieldsSize.setter
    def eventFieldsSize(self, val):
        self._eventFieldsSize = val
        self._value.eventFieldsSize = val.value

    @property
    def *eventFields(self):
        return self._*eventFields

    @*eventFields.setter
    def *eventFields(self, val):
        self._*eventFields = val
        self._value.*eventFields = val.value

    def __str__(self):
        return ("UaEventFieldList:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_Variant.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEventFieldList:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_Variant.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoredItemCreateResult +++++++++++++++++++++++

class UaMonitoredItemCreateResult(UaType):
    def __init__(self, val=ffi.new("UA_MonitoredItemCreateResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._monitoredItemId = UaUInt32(val.monitoredItemId)
        self._revisedSamplingInterval = UaDouble(val.revisedSamplingInterval)
        self._revisedQueueSize = UaUInt32(val.revisedQueueSize)
        self._filterResult = UaExtensionObject(val.filterResult)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def monitoredItemId(self):
        return self._monitoredItemId

    @monitoredItemId.setter
    def monitoredItemId(self, val):
        self._monitoredItemId = val
        self._value.monitoredItemId = val.value

    @property
    def revisedSamplingInterval(self):
        return self._revisedSamplingInterval

    @revisedSamplingInterval.setter
    def revisedSamplingInterval(self, val):
        self._revisedSamplingInterval = val
        self._value.revisedSamplingInterval = val.value

    @property
    def revisedQueueSize(self):
        return self._revisedQueueSize

    @revisedQueueSize.setter
    def revisedQueueSize(self, val):
        self._revisedQueueSize = val
        self._value.revisedQueueSize = val.value

    @property
    def filterResult(self):
        return self._filterResult

    @filterResult.setter
    def filterResult(self, val):
        self._filterResult = val
        self._value.filterResult = val.value

    def __str__(self):
        return ("UaMonitoredItemCreateResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoredItemCreateResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEUInformation +++++++++++++++++++++++

class UaEUInformation(UaType):
    def __init__(self, val=ffi.new("UA_EUInformation*")):
        super().__init__(val)
        self._namespaceUri = UaString(val.namespaceUri)
        self._unitId = UaInt32(val.unitId)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
    

    @property
    def namespaceUri(self):
        return self._namespaceUri

    @namespaceUri.setter
    def namespaceUri(self, val):
        self._namespaceUri = val
        self._value.namespaceUri = val.value

    @property
    def unitId(self):
        return self._unitId

    @unitId.setter
    def unitId(self, val):
        self._unitId = val
        self._value.unitId = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    def __str__(self):
        return ("UaEUInformation:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_Int32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEUInformation:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_Int32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1))
                

 
# +++++++++++++++++++ UaServerDiagnosticsSummaryDataType +++++++++++++++++++++++

class UaServerDiagnosticsSummaryDataType(UaType):
    def __init__(self, val=ffi.new("UA_ServerDiagnosticsSummaryDataType*")):
        super().__init__(val)
        self._serverViewCount = UaUInt32(val.serverViewCount)
        self._currentSessionCount = UaUInt32(val.currentSessionCount)
        self._cumulatedSessionCount = UaUInt32(val.cumulatedSessionCount)
        self._securityRejectedSessionCount = UaUInt32(val.securityRejectedSessionCount)
        self._rejectedSessionCount = UaUInt32(val.rejectedSessionCount)
        self._sessionTimeoutCount = UaUInt32(val.sessionTimeoutCount)
        self._sessionAbortCount = UaUInt32(val.sessionAbortCount)
        self._currentSubscriptionCount = UaUInt32(val.currentSubscriptionCount)
        self._cumulatedSubscriptionCount = UaUInt32(val.cumulatedSubscriptionCount)
        self._publishingIntervalCount = UaUInt32(val.publishingIntervalCount)
        self._securityRejectedRequestsCount = UaUInt32(val.securityRejectedRequestsCount)
        self._rejectedRequestsCount = UaUInt32(val.rejectedRequestsCount)
    

    @property
    def serverViewCount(self):
        return self._serverViewCount

    @serverViewCount.setter
    def serverViewCount(self, val):
        self._serverViewCount = val
        self._value.serverViewCount = val.value

    @property
    def currentSessionCount(self):
        return self._currentSessionCount

    @currentSessionCount.setter
    def currentSessionCount(self, val):
        self._currentSessionCount = val
        self._value.currentSessionCount = val.value

    @property
    def cumulatedSessionCount(self):
        return self._cumulatedSessionCount

    @cumulatedSessionCount.setter
    def cumulatedSessionCount(self, val):
        self._cumulatedSessionCount = val
        self._value.cumulatedSessionCount = val.value

    @property
    def securityRejectedSessionCount(self):
        return self._securityRejectedSessionCount

    @securityRejectedSessionCount.setter
    def securityRejectedSessionCount(self, val):
        self._securityRejectedSessionCount = val
        self._value.securityRejectedSessionCount = val.value

    @property
    def rejectedSessionCount(self):
        return self._rejectedSessionCount

    @rejectedSessionCount.setter
    def rejectedSessionCount(self, val):
        self._rejectedSessionCount = val
        self._value.rejectedSessionCount = val.value

    @property
    def sessionTimeoutCount(self):
        return self._sessionTimeoutCount

    @sessionTimeoutCount.setter
    def sessionTimeoutCount(self, val):
        self._sessionTimeoutCount = val
        self._value.sessionTimeoutCount = val.value

    @property
    def sessionAbortCount(self):
        return self._sessionAbortCount

    @sessionAbortCount.setter
    def sessionAbortCount(self, val):
        self._sessionAbortCount = val
        self._value.sessionAbortCount = val.value

    @property
    def currentSubscriptionCount(self):
        return self._currentSubscriptionCount

    @currentSubscriptionCount.setter
    def currentSubscriptionCount(self, val):
        self._currentSubscriptionCount = val
        self._value.currentSubscriptionCount = val.value

    @property
    def cumulatedSubscriptionCount(self):
        return self._cumulatedSubscriptionCount

    @cumulatedSubscriptionCount.setter
    def cumulatedSubscriptionCount(self, val):
        self._cumulatedSubscriptionCount = val
        self._value.cumulatedSubscriptionCount = val.value

    @property
    def publishingIntervalCount(self):
        return self._publishingIntervalCount

    @publishingIntervalCount.setter
    def publishingIntervalCount(self, val):
        self._publishingIntervalCount = val
        self._value.publishingIntervalCount = val.value

    @property
    def securityRejectedRequestsCount(self):
        return self._securityRejectedRequestsCount

    @securityRejectedRequestsCount.setter
    def securityRejectedRequestsCount(self, val):
        self._securityRejectedRequestsCount = val
        self._value.securityRejectedRequestsCount = val.value

    @property
    def rejectedRequestsCount(self):
        return self._rejectedRequestsCount

    @rejectedRequestsCount.setter
    def rejectedRequestsCount(self, val):
        self._rejectedRequestsCount = val
        self._value.rejectedRequestsCount = val.value

    def __str__(self):
        return ("UaServerDiagnosticsSummaryDataType:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaServerDiagnosticsSummaryDataType:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaContentFilterElementResult +++++++++++++++++++++++

class UaContentFilterElementResult(UaType):
    def __init__(self, val=ffi.new("UA_ContentFilterElementResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._operandStatusCodesSize = UaSizeT(val.operandStatusCodesSize)
        self._*operandStatusCodes = UaStatusCode(val.*operandStatusCodes)
        self._operandDiagnosticInfosSize = UaSizeT(val.operandDiagnosticInfosSize)
        self._*operandDiagnosticInfos = UaDiagnosticInfo(val.*operandDiagnosticInfos)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def operandStatusCodesSize(self):
        return self._operandStatusCodesSize

    @operandStatusCodesSize.setter
    def operandStatusCodesSize(self, val):
        self._operandStatusCodesSize = val
        self._value.operandStatusCodesSize = val.value

    @property
    def *operandStatusCodes(self):
        return self._*operandStatusCodes

    @*operandStatusCodes.setter
    def *operandStatusCodes(self, val):
        self._*operandStatusCodes = val
        self._value.*operandStatusCodes = val.value

    @property
    def operandDiagnosticInfosSize(self):
        return self._operandDiagnosticInfosSize

    @operandDiagnosticInfosSize.setter
    def operandDiagnosticInfosSize(self, val):
        self._operandDiagnosticInfosSize = val
        self._value.operandDiagnosticInfosSize = val.value

    @property
    def *operandDiagnosticInfos(self):
        return self._*operandDiagnosticInfos

    @*operandDiagnosticInfos.setter
    def *operandDiagnosticInfos(self, val):
        self._*operandDiagnosticInfos = val
        self._value.*operandDiagnosticInfos = val.value

    def __str__(self):
        return ("UaContentFilterElementResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaContentFilterElementResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaLiteralOperand +++++++++++++++++++++++

class UaLiteralOperand(UaType):
    def __init__(self, val=ffi.new("UA_LiteralOperand*")):
        super().__init__(val)
        self._value = UaVariant(val.value)
    

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    def __str__(self):
        return ("UaLiteralOperand:\n" + 
                self._UA_Variant.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaLiteralOperand:\n" + 
                self._UA_Variant.str_helper(n+1))
                

 
# +++++++++++++++++++ UaUserIdentityToken +++++++++++++++++++++++

class UaUserIdentityToken(UaType):
    def __init__(self, val=ffi.new("UA_UserIdentityToken*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    def __str__(self):
        return ("UaUserIdentityToken:\n" + 
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaUserIdentityToken:\n" + 
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaX509IdentityToken +++++++++++++++++++++++

class UaX509IdentityToken(UaType):
    def __init__(self, val=ffi.new("UA_X509IdentityToken*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
        self._certificateData = UaByteString(val.certificateData)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    @property
    def certificateData(self):
        return self._certificateData

    @certificateData.setter
    def certificateData(self, val):
        self._certificateData = val
        self._value.certificateData = val.value

    def __str__(self):
        return ("UaX509IdentityToken:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_ByteString.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaX509IdentityToken:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoredItemNotification +++++++++++++++++++++++

class UaMonitoredItemNotification(UaType):
    def __init__(self, val=ffi.new("UA_MonitoredItemNotification*")):
        super().__init__(val)
        self._clientHandle = UaUInt32(val.clientHandle)
        self._value = UaDataValue(val.value)
    

    @property
    def clientHandle(self):
        return self._clientHandle

    @clientHandle.setter
    def clientHandle(self, val):
        self._clientHandle = val
        self._value.clientHandle = val.value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    def __str__(self):
        return ("UaMonitoredItemNotification:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_DataValue.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoredItemNotification:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_DataValue.str_helper(n+1))
                

 
# +++++++++++++++++++ UaResponseHeader +++++++++++++++++++++++

class UaResponseHeader(UaType):
    def __init__(self, val=ffi.new("UA_ResponseHeader*")):
        super().__init__(val)
        self._timestamp = UaDateTime(val.timestamp)
        self._requestHandle = UaUInt32(val.requestHandle)
        self._serviceResult = UaStatusCode(val.serviceResult)
        self._serviceDiagnostics = UaDiagnosticInfo(val.serviceDiagnostics)
        self._stringTableSize = UaSizeT(val.stringTableSize)
        self._*stringTable = UaString(val.*stringTable)
        self._additionalHeader = UaExtensionObject(val.additionalHeader)
    

    @property
    def timestamp(self):
        return self._timestamp

    @timestamp.setter
    def timestamp(self, val):
        self._timestamp = val
        self._value.timestamp = val.value

    @property
    def requestHandle(self):
        return self._requestHandle

    @requestHandle.setter
    def requestHandle(self, val):
        self._requestHandle = val
        self._value.requestHandle = val.value

    @property
    def serviceResult(self):
        return self._serviceResult

    @serviceResult.setter
    def serviceResult(self, val):
        self._serviceResult = val
        self._value.serviceResult = val.value

    @property
    def serviceDiagnostics(self):
        return self._serviceDiagnostics

    @serviceDiagnostics.setter
    def serviceDiagnostics(self, val):
        self._serviceDiagnostics = val
        self._value.serviceDiagnostics = val.value

    @property
    def stringTableSize(self):
        return self._stringTableSize

    @stringTableSize.setter
    def stringTableSize(self, val):
        self._stringTableSize = val
        self._value.stringTableSize = val.value

    @property
    def *stringTable(self):
        return self._*stringTable

    @*stringTable.setter
    def *stringTable(self, val):
        self._*stringTable = val
        self._value.*stringTable = val.value

    @property
    def additionalHeader(self):
        return self._additionalHeader

    @additionalHeader.setter
    def additionalHeader(self, val):
        self._additionalHeader = val
        self._value.additionalHeader = val.value

    def __str__(self):
        return ("UaResponseHeader:\n" + 
                self._UA_DateTime.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaResponseHeader:\n" + 
                self._UA_DateTime.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSignatureData +++++++++++++++++++++++

class UaSignatureData(UaType):
    def __init__(self, val=ffi.new("UA_SignatureData*")):
        super().__init__(val)
        self._algorithm = UaString(val.algorithm)
        self._signature = UaByteString(val.signature)
    

    @property
    def algorithm(self):
        return self._algorithm

    @algorithm.setter
    def algorithm(self, val):
        self._algorithm = val
        self._value.algorithm = val.value

    @property
    def signature(self):
        return self._signature

    @signature.setter
    def signature(self, val):
        self._signature = val
        self._value.signature = val.value

    def __str__(self):
        return ("UaSignatureData:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_ByteString.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSignatureData:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1))
                

 
# +++++++++++++++++++ UaModifySubscriptionResponse +++++++++++++++++++++++

class UaModifySubscriptionResponse(UaType):
    def __init__(self, val=ffi.new("UA_ModifySubscriptionResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._revisedPublishingInterval = UaDouble(val.revisedPublishingInterval)
        self._revisedLifetimeCount = UaUInt32(val.revisedLifetimeCount)
        self._revisedMaxKeepAliveCount = UaUInt32(val.revisedMaxKeepAliveCount)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def revisedPublishingInterval(self):
        return self._revisedPublishingInterval

    @revisedPublishingInterval.setter
    def revisedPublishingInterval(self, val):
        self._revisedPublishingInterval = val
        self._value.revisedPublishingInterval = val.value

    @property
    def revisedLifetimeCount(self):
        return self._revisedLifetimeCount

    @revisedLifetimeCount.setter
    def revisedLifetimeCount(self, val):
        self._revisedLifetimeCount = val
        self._value.revisedLifetimeCount = val.value

    @property
    def revisedMaxKeepAliveCount(self):
        return self._revisedMaxKeepAliveCount

    @revisedMaxKeepAliveCount.setter
    def revisedMaxKeepAliveCount(self, val):
        self._revisedMaxKeepAliveCount = val
        self._value.revisedMaxKeepAliveCount = val.value

    def __str__(self):
        return ("UaModifySubscriptionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaModifySubscriptionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaNodeAttributes +++++++++++++++++++++++

class UaNodeAttributes(UaType):
    def __init__(self, val=ffi.new("UA_NodeAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    def __str__(self):
        return ("UaNodeAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaNodeAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaActivateSessionResponse +++++++++++++++++++++++

class UaActivateSessionResponse(UaType):
    def __init__(self, val=ffi.new("UA_ActivateSessionResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._serverNonce = UaByteString(val.serverNonce)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def serverNonce(self):
        return self._serverNonce

    @serverNonce.setter
    def serverNonce(self, val):
        self._serverNonce = val
        self._value.serverNonce = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaActivateSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaActivateSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEnumField +++++++++++++++++++++++

class UaEnumField(UaType):
    def __init__(self, val=ffi.new("UA_EnumField*")):
        super().__init__(val)
        self._value = UaInt64(val.value)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._name = UaString(val.name)
    

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, val):
        self._name = val
        self._value.name = val.value

    def __str__(self):
        return ("UaEnumField:\n" + 
                self._UA_Int64.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEnumField:\n" + 
                self._UA_Int64.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaVariableTypeAttributes +++++++++++++++++++++++

class UaVariableTypeAttributes(UaType):
    def __init__(self, val=ffi.new("UA_VariableTypeAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._value = UaVariant(val.value)
        self._dataType = UaNodeId(val.dataType)
        self._valueRank = UaInt32(val.valueRank)
        self._arrayDimensionsSize = UaSizeT(val.arrayDimensionsSize)
        self._*arrayDimensions = UaUInt32(val.*arrayDimensions)
        self._isAbstract = UaBoolean(val.isAbstract)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    @property
    def dataType(self):
        return self._dataType

    @dataType.setter
    def dataType(self, val):
        self._dataType = val
        self._value.dataType = val.value

    @property
    def valueRank(self):
        return self._valueRank

    @valueRank.setter
    def valueRank(self, val):
        self._valueRank = val
        self._value.valueRank = val.value

    @property
    def arrayDimensionsSize(self):
        return self._arrayDimensionsSize

    @arrayDimensionsSize.setter
    def arrayDimensionsSize(self, val):
        self._arrayDimensionsSize = val
        self._value.arrayDimensionsSize = val.value

    @property
    def *arrayDimensions(self):
        return self._*arrayDimensions

    @*arrayDimensions.setter
    def *arrayDimensions(self, val):
        self._*arrayDimensions = val
        self._value.*arrayDimensions = val.value

    @property
    def isAbstract(self):
        return self._isAbstract

    @isAbstract.setter
    def isAbstract(self, val):
        self._isAbstract = val
        self._value.isAbstract = val.value

    def __str__(self):
        return ("UaVariableTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Variant.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Int32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaVariableTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Variant.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Int32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCallMethodResult +++++++++++++++++++++++

class UaCallMethodResult(UaType):
    def __init__(self, val=ffi.new("UA_CallMethodResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._inputArgumentResultsSize = UaSizeT(val.inputArgumentResultsSize)
        self._*inputArgumentResults = UaStatusCode(val.*inputArgumentResults)
        self._inputArgumentDiagnosticInfosSize = UaSizeT(val.inputArgumentDiagnosticInfosSize)
        self._*inputArgumentDiagnosticInfos = UaDiagnosticInfo(val.*inputArgumentDiagnosticInfos)
        self._outputArgumentsSize = UaSizeT(val.outputArgumentsSize)
        self._*outputArguments = UaVariant(val.*outputArguments)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def inputArgumentResultsSize(self):
        return self._inputArgumentResultsSize

    @inputArgumentResultsSize.setter
    def inputArgumentResultsSize(self, val):
        self._inputArgumentResultsSize = val
        self._value.inputArgumentResultsSize = val.value

    @property
    def *inputArgumentResults(self):
        return self._*inputArgumentResults

    @*inputArgumentResults.setter
    def *inputArgumentResults(self, val):
        self._*inputArgumentResults = val
        self._value.*inputArgumentResults = val.value

    @property
    def inputArgumentDiagnosticInfosSize(self):
        return self._inputArgumentDiagnosticInfosSize

    @inputArgumentDiagnosticInfosSize.setter
    def inputArgumentDiagnosticInfosSize(self, val):
        self._inputArgumentDiagnosticInfosSize = val
        self._value.inputArgumentDiagnosticInfosSize = val.value

    @property
    def *inputArgumentDiagnosticInfos(self):
        return self._*inputArgumentDiagnosticInfos

    @*inputArgumentDiagnosticInfos.setter
    def *inputArgumentDiagnosticInfos(self, val):
        self._*inputArgumentDiagnosticInfos = val
        self._value.*inputArgumentDiagnosticInfos = val.value

    @property
    def outputArgumentsSize(self):
        return self._outputArgumentsSize

    @outputArgumentsSize.setter
    def outputArgumentsSize(self, val):
        self._outputArgumentsSize = val
        self._value.outputArgumentsSize = val.value

    @property
    def *outputArguments(self):
        return self._*outputArguments

    @*outputArguments.setter
    def *outputArguments(self, val):
        self._*outputArguments = val
        self._value.*outputArguments = val.value

    def __str__(self):
        return ("UaCallMethodResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_Variant.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCallMethodResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_Variant.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetMonitoringModeResponse +++++++++++++++++++++++

class UaSetMonitoringModeResponse(UaType):
    def __init__(self, val=ffi.new("UA_SetMonitoringModeResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaSetMonitoringModeResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetMonitoringModeResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRequestHeader +++++++++++++++++++++++

class UaRequestHeader(UaType):
    def __init__(self, val=ffi.new("UA_RequestHeader*")):
        super().__init__(val)
        self._authenticationToken = UaNodeId(val.authenticationToken)
        self._timestamp = UaDateTime(val.timestamp)
        self._requestHandle = UaUInt32(val.requestHandle)
        self._returnDiagnostics = UaUInt32(val.returnDiagnostics)
        self._auditEntryId = UaString(val.auditEntryId)
        self._timeoutHint = UaUInt32(val.timeoutHint)
        self._additionalHeader = UaExtensionObject(val.additionalHeader)
    

    @property
    def authenticationToken(self):
        return self._authenticationToken

    @authenticationToken.setter
    def authenticationToken(self, val):
        self._authenticationToken = val
        self._value.authenticationToken = val.value

    @property
    def timestamp(self):
        return self._timestamp

    @timestamp.setter
    def timestamp(self, val):
        self._timestamp = val
        self._value.timestamp = val.value

    @property
    def requestHandle(self):
        return self._requestHandle

    @requestHandle.setter
    def requestHandle(self, val):
        self._requestHandle = val
        self._value.requestHandle = val.value

    @property
    def returnDiagnostics(self):
        return self._returnDiagnostics

    @returnDiagnostics.setter
    def returnDiagnostics(self, val):
        self._returnDiagnostics = val
        self._value.returnDiagnostics = val.value

    @property
    def auditEntryId(self):
        return self._auditEntryId

    @auditEntryId.setter
    def auditEntryId(self, val):
        self._auditEntryId = val
        self._value.auditEntryId = val.value

    @property
    def timeoutHint(self):
        return self._timeoutHint

    @timeoutHint.setter
    def timeoutHint(self, val):
        self._timeoutHint = val
        self._value.timeoutHint = val.value

    @property
    def additionalHeader(self):
        return self._additionalHeader

    @additionalHeader.setter
    def additionalHeader(self, val):
        self._additionalHeader = val
        self._value.additionalHeader = val.value

    def __str__(self):
        return ("UaRequestHeader:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_DateTime.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRequestHeader:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoredItemModifyResult +++++++++++++++++++++++

class UaMonitoredItemModifyResult(UaType):
    def __init__(self, val=ffi.new("UA_MonitoredItemModifyResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._revisedSamplingInterval = UaDouble(val.revisedSamplingInterval)
        self._revisedQueueSize = UaUInt32(val.revisedQueueSize)
        self._filterResult = UaExtensionObject(val.filterResult)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def revisedSamplingInterval(self):
        return self._revisedSamplingInterval

    @revisedSamplingInterval.setter
    def revisedSamplingInterval(self, val):
        self._revisedSamplingInterval = val
        self._value.revisedSamplingInterval = val.value

    @property
    def revisedQueueSize(self):
        return self._revisedQueueSize

    @revisedQueueSize.setter
    def revisedQueueSize(self, val):
        self._revisedQueueSize = val
        self._value.revisedQueueSize = val.value

    @property
    def filterResult(self):
        return self._filterResult

    @filterResult.setter
    def filterResult(self, val):
        self._filterResult = val
        self._value.filterResult = val.value

    def __str__(self):
        return ("UaMonitoredItemModifyResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoredItemModifyResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCloseSecureChannelRequest +++++++++++++++++++++++

class UaCloseSecureChannelRequest(UaType):
    def __init__(self, val=ffi.new("UA_CloseSecureChannelRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    def __str__(self):
        return ("UaCloseSecureChannelRequest:\n" + 
                self._UA_RequestHeader.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCloseSecureChannelRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1))
                

 
# +++++++++++++++++++ UaNotificationMessage +++++++++++++++++++++++

class UaNotificationMessage(UaType):
    def __init__(self, val=ffi.new("UA_NotificationMessage*")):
        super().__init__(val)
        self._sequenceNumber = UaUInt32(val.sequenceNumber)
        self._publishTime = UaDateTime(val.publishTime)
        self._notificationDataSize = UaSizeT(val.notificationDataSize)
        self._*notificationData = UaExtensionObject(val.*notificationData)
    

    @property
    def sequenceNumber(self):
        return self._sequenceNumber

    @sequenceNumber.setter
    def sequenceNumber(self, val):
        self._sequenceNumber = val
        self._value.sequenceNumber = val.value

    @property
    def publishTime(self):
        return self._publishTime

    @publishTime.setter
    def publishTime(self, val):
        self._publishTime = val
        self._value.publishTime = val.value

    @property
    def notificationDataSize(self):
        return self._notificationDataSize

    @notificationDataSize.setter
    def notificationDataSize(self, val):
        self._notificationDataSize = val
        self._value.notificationDataSize = val.value

    @property
    def *notificationData(self):
        return self._*notificationData

    @*notificationData.setter
    def *notificationData(self, val):
        self._*notificationData = val
        self._value.*notificationData = val.value

    def __str__(self):
        return ("UaNotificationMessage:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_DateTime.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaNotificationMessage:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateSubscriptionResponse +++++++++++++++++++++++

class UaCreateSubscriptionResponse(UaType):
    def __init__(self, val=ffi.new("UA_CreateSubscriptionResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._revisedPublishingInterval = UaDouble(val.revisedPublishingInterval)
        self._revisedLifetimeCount = UaUInt32(val.revisedLifetimeCount)
        self._revisedMaxKeepAliveCount = UaUInt32(val.revisedMaxKeepAliveCount)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def revisedPublishingInterval(self):
        return self._revisedPublishingInterval

    @revisedPublishingInterval.setter
    def revisedPublishingInterval(self, val):
        self._revisedPublishingInterval = val
        self._value.revisedPublishingInterval = val.value

    @property
    def revisedLifetimeCount(self):
        return self._revisedLifetimeCount

    @revisedLifetimeCount.setter
    def revisedLifetimeCount(self, val):
        self._revisedLifetimeCount = val
        self._value.revisedLifetimeCount = val.value

    @property
    def revisedMaxKeepAliveCount(self):
        return self._revisedMaxKeepAliveCount

    @revisedMaxKeepAliveCount.setter
    def revisedMaxKeepAliveCount(self, val):
        self._revisedMaxKeepAliveCount = val
        self._value.revisedMaxKeepAliveCount = val.value

    def __str__(self):
        return ("UaCreateSubscriptionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateSubscriptionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEnumDefinition +++++++++++++++++++++++

class UaEnumDefinition(UaType):
    def __init__(self, val=ffi.new("UA_EnumDefinition*")):
        super().__init__(val)
        self._fieldsSize = UaSizeT(val.fieldsSize)
        self._*fields = UaEnumField(val.*fields)
    

    @property
    def fieldsSize(self):
        return self._fieldsSize

    @fieldsSize.setter
    def fieldsSize(self, val):
        self._fieldsSize = val
        self._value.fieldsSize = val.value

    @property
    def *fields(self):
        return self._*fields

    @*fields.setter
    def *fields(self, val):
        self._*fields = val
        self._value.*fields = val.value

    def __str__(self):
        return ("UaEnumDefinition:\n" + 
                self._size_t.str_helper(1) +
                self._UA_EnumField.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEnumDefinition:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_EnumField.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCallMethodRequest +++++++++++++++++++++++

class UaCallMethodRequest(UaType):
    def __init__(self, val=ffi.new("UA_CallMethodRequest*")):
        super().__init__(val)
        self._objectId = UaNodeId(val.objectId)
        self._methodId = UaNodeId(val.methodId)
        self._inputArgumentsSize = UaSizeT(val.inputArgumentsSize)
        self._*inputArguments = UaVariant(val.*inputArguments)
    

    @property
    def objectId(self):
        return self._objectId

    @objectId.setter
    def objectId(self, val):
        self._objectId = val
        self._value.objectId = val.value

    @property
    def methodId(self):
        return self._methodId

    @methodId.setter
    def methodId(self, val):
        self._methodId = val
        self._value.methodId = val.value

    @property
    def inputArgumentsSize(self):
        return self._inputArgumentsSize

    @inputArgumentsSize.setter
    def inputArgumentsSize(self, val):
        self._inputArgumentsSize = val
        self._value.inputArgumentsSize = val.value

    @property
    def *inputArguments(self):
        return self._*inputArguments

    @*inputArguments.setter
    def *inputArguments(self, val):
        self._*inputArguments = val
        self._value.*inputArguments = val.value

    def __str__(self):
        return ("UaCallMethodRequest:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_Variant.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCallMethodRequest:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_Variant.str_helper(n+1))
                

 
# +++++++++++++++++++ UaReadResponse +++++++++++++++++++++++

class UaReadResponse(UaType):
    def __init__(self, val=ffi.new("UA_ReadResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaDataValue(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaReadResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DataValue.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaReadResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DataValue.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaObjectTypeAttributes +++++++++++++++++++++++

class UaObjectTypeAttributes(UaType):
    def __init__(self, val=ffi.new("UA_ObjectTypeAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._isAbstract = UaBoolean(val.isAbstract)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def isAbstract(self):
        return self._isAbstract

    @isAbstract.setter
    def isAbstract(self, val):
        self._isAbstract = val
        self._value.isAbstract = val.value

    def __str__(self):
        return ("UaObjectTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaObjectTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCloseSessionResponse +++++++++++++++++++++++

class UaCloseSessionResponse(UaType):
    def __init__(self, val=ffi.new("UA_CloseSessionResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    def __str__(self):
        return ("UaCloseSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCloseSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetPublishingModeRequest +++++++++++++++++++++++

class UaSetPublishingModeRequest(UaType):
    def __init__(self, val=ffi.new("UA_SetPublishingModeRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._publishingEnabled = UaBoolean(val.publishingEnabled)
        self._subscriptionIdsSize = UaSizeT(val.subscriptionIdsSize)
        self._*subscriptionIds = UaUInt32(val.*subscriptionIds)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def publishingEnabled(self):
        return self._publishingEnabled

    @publishingEnabled.setter
    def publishingEnabled(self, val):
        self._publishingEnabled = val
        self._value.publishingEnabled = val.value

    @property
    def subscriptionIdsSize(self):
        return self._subscriptionIdsSize

    @subscriptionIdsSize.setter
    def subscriptionIdsSize(self, val):
        self._subscriptionIdsSize = val
        self._value.subscriptionIdsSize = val.value

    @property
    def *subscriptionIds(self):
        return self._*subscriptionIds

    @*subscriptionIds.setter
    def *subscriptionIds(self, val):
        self._*subscriptionIds = val
        self._value.*subscriptionIds = val.value

    def __str__(self):
        return ("UaSetPublishingModeRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetPublishingModeRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaIssuedIdentityToken +++++++++++++++++++++++

class UaIssuedIdentityToken(UaType):
    def __init__(self, val=ffi.new("UA_IssuedIdentityToken*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
        self._tokenData = UaByteString(val.tokenData)
        self._encryptionAlgorithm = UaString(val.encryptionAlgorithm)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    @property
    def tokenData(self):
        return self._tokenData

    @tokenData.setter
    def tokenData(self, val):
        self._tokenData = val
        self._value.tokenData = val.value

    @property
    def encryptionAlgorithm(self):
        return self._encryptionAlgorithm

    @encryptionAlgorithm.setter
    def encryptionAlgorithm(self, val):
        self._encryptionAlgorithm = val
        self._value.encryptionAlgorithm = val.value

    def __str__(self):
        return ("UaIssuedIdentityToken:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaIssuedIdentityToken:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteMonitoredItemsResponse +++++++++++++++++++++++

class UaDeleteMonitoredItemsResponse(UaType):
    def __init__(self, val=ffi.new("UA_DeleteMonitoredItemsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaDeleteMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseNextRequest +++++++++++++++++++++++

class UaBrowseNextRequest(UaType):
    def __init__(self, val=ffi.new("UA_BrowseNextRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._releaseContinuationPoints = UaBoolean(val.releaseContinuationPoints)
        self._continuationPointsSize = UaSizeT(val.continuationPointsSize)
        self._*continuationPoints = UaByteString(val.*continuationPoints)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def releaseContinuationPoints(self):
        return self._releaseContinuationPoints

    @releaseContinuationPoints.setter
    def releaseContinuationPoints(self, val):
        self._releaseContinuationPoints = val
        self._value.releaseContinuationPoints = val.value

    @property
    def continuationPointsSize(self):
        return self._continuationPointsSize

    @continuationPointsSize.setter
    def continuationPointsSize(self, val):
        self._continuationPointsSize = val
        self._value.continuationPointsSize = val.value

    @property
    def *continuationPoints(self):
        return self._*continuationPoints

    @*continuationPoints.setter
    def *continuationPoints(self, val):
        self._*continuationPoints = val
        self._value.*continuationPoints = val.value

    def __str__(self):
        return ("UaBrowseNextRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ByteString.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseNextRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1))
                

 
# +++++++++++++++++++ UaModifySubscriptionRequest +++++++++++++++++++++++

class UaModifySubscriptionRequest(UaType):
    def __init__(self, val=ffi.new("UA_ModifySubscriptionRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._requestedPublishingInterval = UaDouble(val.requestedPublishingInterval)
        self._requestedLifetimeCount = UaUInt32(val.requestedLifetimeCount)
        self._requestedMaxKeepAliveCount = UaUInt32(val.requestedMaxKeepAliveCount)
        self._maxNotificationsPerPublish = UaUInt32(val.maxNotificationsPerPublish)
        self._priority = UaByte(val.priority)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def requestedPublishingInterval(self):
        return self._requestedPublishingInterval

    @requestedPublishingInterval.setter
    def requestedPublishingInterval(self, val):
        self._requestedPublishingInterval = val
        self._value.requestedPublishingInterval = val.value

    @property
    def requestedLifetimeCount(self):
        return self._requestedLifetimeCount

    @requestedLifetimeCount.setter
    def requestedLifetimeCount(self, val):
        self._requestedLifetimeCount = val
        self._value.requestedLifetimeCount = val.value

    @property
    def requestedMaxKeepAliveCount(self):
        return self._requestedMaxKeepAliveCount

    @requestedMaxKeepAliveCount.setter
    def requestedMaxKeepAliveCount(self, val):
        self._requestedMaxKeepAliveCount = val
        self._value.requestedMaxKeepAliveCount = val.value

    @property
    def maxNotificationsPerPublish(self):
        return self._maxNotificationsPerPublish

    @maxNotificationsPerPublish.setter
    def maxNotificationsPerPublish(self, val):
        self._maxNotificationsPerPublish = val
        self._value.maxNotificationsPerPublish = val.value

    @property
    def priority(self):
        return self._priority

    @priority.setter
    def priority(self, val):
        self._priority = val
        self._value.priority = val.value

    def __str__(self):
        return ("UaModifySubscriptionRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Byte.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaModifySubscriptionRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseDescription +++++++++++++++++++++++

class UaBrowseDescription(UaType):
    def __init__(self, val=ffi.new("UA_BrowseDescription*")):
        super().__init__(val)
        self._nodeId = UaNodeId(val.nodeId)
        self._browseDirection = UaBrowseDirection(val.browseDirection)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._includeSubtypes = UaBoolean(val.includeSubtypes)
        self._nodeClassMask = UaUInt32(val.nodeClassMask)
        self._resultMask = UaUInt32(val.resultMask)
    

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def browseDirection(self):
        return self._browseDirection

    @browseDirection.setter
    def browseDirection(self, val):
        self._browseDirection = val
        self._value.browseDirection = val.value

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def includeSubtypes(self):
        return self._includeSubtypes

    @includeSubtypes.setter
    def includeSubtypes(self, val):
        self._includeSubtypes = val
        self._value.includeSubtypes = val.value

    @property
    def nodeClassMask(self):
        return self._nodeClassMask

    @nodeClassMask.setter
    def nodeClassMask(self, val):
        self._nodeClassMask = val
        self._value.nodeClassMask = val.value

    @property
    def resultMask(self):
        return self._resultMask

    @resultMask.setter
    def resultMask(self, val):
        self._resultMask = val
        self._value.resultMask = val.value

    def __str__(self):
        return ("UaBrowseDescription:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_BrowseDirection.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseDescription:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_BrowseDirection.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSignedSoftwareCertificate +++++++++++++++++++++++

class UaSignedSoftwareCertificate(UaType):
    def __init__(self, val=ffi.new("UA_SignedSoftwareCertificate*")):
        super().__init__(val)
        self._certificateData = UaByteString(val.certificateData)
        self._signature = UaByteString(val.signature)
    

    @property
    def certificateData(self):
        return self._certificateData

    @certificateData.setter
    def certificateData(self, val):
        self._certificateData = val
        self._value.certificateData = val.value

    @property
    def signature(self):
        return self._signature

    @signature.setter
    def signature(self, val):
        self._signature = val
        self._value.signature = val.value

    def __str__(self):
        return ("UaSignedSoftwareCertificate:\n" + 
                self._UA_ByteString.str_helper(1) +
                self._UA_ByteString.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSignedSoftwareCertificate:\n" + 
                self._UA_ByteString.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowsePathTarget +++++++++++++++++++++++

class UaBrowsePathTarget(UaType):
    def __init__(self, val=ffi.new("UA_BrowsePathTarget*")):
        super().__init__(val)
        self._targetId = UaExpandedNodeId(val.targetId)
        self._remainingPathIndex = UaUInt32(val.remainingPathIndex)
    

    @property
    def targetId(self):
        return self._targetId

    @targetId.setter
    def targetId(self, val):
        self._targetId = val
        self._value.targetId = val.value

    @property
    def remainingPathIndex(self):
        return self._remainingPathIndex

    @remainingPathIndex.setter
    def remainingPathIndex(self, val):
        self._remainingPathIndex = val
        self._value.remainingPathIndex = val.value

    def __str__(self):
        return ("UaBrowsePathTarget:\n" + 
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowsePathTarget:\n" + 
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaWriteResponse +++++++++++++++++++++++

class UaWriteResponse(UaType):
    def __init__(self, val=ffi.new("UA_WriteResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaWriteResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaWriteResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddNodesResult +++++++++++++++++++++++

class UaAddNodesResult(UaType):
    def __init__(self, val=ffi.new("UA_AddNodesResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._addedNodeId = UaNodeId(val.addedNodeId)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def addedNodeId(self):
        return self._addedNodeId

    @addedNodeId.setter
    def addedNodeId(self, val):
        self._addedNodeId = val
        self._value.addedNodeId = val.value

    def __str__(self):
        return ("UaAddNodesResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._UA_NodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddNodesResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddReferencesItem +++++++++++++++++++++++

class UaAddReferencesItem(UaType):
    def __init__(self, val=ffi.new("UA_AddReferencesItem*")):
        super().__init__(val)
        self._sourceNodeId = UaNodeId(val.sourceNodeId)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._isForward = UaBoolean(val.isForward)
        self._targetServerUri = UaString(val.targetServerUri)
        self._targetNodeId = UaExpandedNodeId(val.targetNodeId)
        self._targetNodeClass = UaNodeClass(val.targetNodeClass)
    

    @property
    def sourceNodeId(self):
        return self._sourceNodeId

    @sourceNodeId.setter
    def sourceNodeId(self, val):
        self._sourceNodeId = val
        self._value.sourceNodeId = val.value

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def isForward(self):
        return self._isForward

    @isForward.setter
    def isForward(self, val):
        self._isForward = val
        self._value.isForward = val.value

    @property
    def targetServerUri(self):
        return self._targetServerUri

    @targetServerUri.setter
    def targetServerUri(self, val):
        self._targetServerUri = val
        self._value.targetServerUri = val.value

    @property
    def targetNodeId(self):
        return self._targetNodeId

    @targetNodeId.setter
    def targetNodeId(self, val):
        self._targetNodeId = val
        self._value.targetNodeId = val.value

    @property
    def targetNodeClass(self):
        return self._targetNodeClass

    @targetNodeClass.setter
    def targetNodeClass(self, val):
        self._targetNodeClass = val
        self._value.targetNodeClass = val.value

    def __str__(self):
        return ("UaAddReferencesItem:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_NodeClass.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddReferencesItem:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_NodeClass.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteReferencesResponse +++++++++++++++++++++++

class UaDeleteReferencesResponse(UaType):
    def __init__(self, val=ffi.new("UA_DeleteReferencesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaDeleteReferencesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteReferencesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRelativePathElement +++++++++++++++++++++++

class UaRelativePathElement(UaType):
    def __init__(self, val=ffi.new("UA_RelativePathElement*")):
        super().__init__(val)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._isInverse = UaBoolean(val.isInverse)
        self._includeSubtypes = UaBoolean(val.includeSubtypes)
        self._targetName = UaQualifiedName(val.targetName)
    

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def isInverse(self):
        return self._isInverse

    @isInverse.setter
    def isInverse(self, val):
        self._isInverse = val
        self._value.isInverse = val.value

    @property
    def includeSubtypes(self):
        return self._includeSubtypes

    @includeSubtypes.setter
    def includeSubtypes(self, val):
        self._includeSubtypes = val
        self._value.includeSubtypes = val.value

    @property
    def targetName(self):
        return self._targetName

    @targetName.setter
    def targetName(self, val):
        self._targetName = val
        self._value.targetName = val.value

    def __str__(self):
        return ("UaRelativePathElement:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_QualifiedName.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRelativePathElement:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_QualifiedName.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSubscriptionAcknowledgement +++++++++++++++++++++++

class UaSubscriptionAcknowledgement(UaType):
    def __init__(self, val=ffi.new("UA_SubscriptionAcknowledgement*")):
        super().__init__(val)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._sequenceNumber = UaUInt32(val.sequenceNumber)
    

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def sequenceNumber(self):
        return self._sequenceNumber

    @sequenceNumber.setter
    def sequenceNumber(self, val):
        self._sequenceNumber = val
        self._value.sequenceNumber = val.value

    def __str__(self):
        return ("UaSubscriptionAcknowledgement:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSubscriptionAcknowledgement:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaTransferResult +++++++++++++++++++++++

class UaTransferResult(UaType):
    def __init__(self, val=ffi.new("UA_TransferResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._availableSequenceNumbersSize = UaSizeT(val.availableSequenceNumbersSize)
        self._*availableSequenceNumbers = UaUInt32(val.*availableSequenceNumbers)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def availableSequenceNumbersSize(self):
        return self._availableSequenceNumbersSize

    @availableSequenceNumbersSize.setter
    def availableSequenceNumbersSize(self, val):
        self._availableSequenceNumbersSize = val
        self._value.availableSequenceNumbersSize = val.value

    @property
    def *availableSequenceNumbers(self):
        return self._*availableSequenceNumbers

    @*availableSequenceNumbers.setter
    def *availableSequenceNumbers(self, val):
        self._*availableSequenceNumbers = val
        self._value.*availableSequenceNumbers = val.value

    def __str__(self):
        return ("UaTransferResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaTransferResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateMonitoredItemsResponse +++++++++++++++++++++++

class UaCreateMonitoredItemsResponse(UaType):
    def __init__(self, val=ffi.new("UA_CreateMonitoredItemsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaMonitoredItemCreateResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaCreateMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_MonitoredItemCreateResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_MonitoredItemCreateResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteReferencesItem +++++++++++++++++++++++

class UaDeleteReferencesItem(UaType):
    def __init__(self, val=ffi.new("UA_DeleteReferencesItem*")):
        super().__init__(val)
        self._sourceNodeId = UaNodeId(val.sourceNodeId)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._isForward = UaBoolean(val.isForward)
        self._targetNodeId = UaExpandedNodeId(val.targetNodeId)
        self._deleteBidirectional = UaBoolean(val.deleteBidirectional)
    

    @property
    def sourceNodeId(self):
        return self._sourceNodeId

    @sourceNodeId.setter
    def sourceNodeId(self, val):
        self._sourceNodeId = val
        self._value.sourceNodeId = val.value

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def isForward(self):
        return self._isForward

    @isForward.setter
    def isForward(self, val):
        self._isForward = val
        self._value.isForward = val.value

    @property
    def targetNodeId(self):
        return self._targetNodeId

    @targetNodeId.setter
    def targetNodeId(self, val):
        self._targetNodeId = val
        self._value.targetNodeId = val.value

    @property
    def deleteBidirectional(self):
        return self._deleteBidirectional

    @deleteBidirectional.setter
    def deleteBidirectional(self, val):
        self._deleteBidirectional = val
        self._value.deleteBidirectional = val.value

    def __str__(self):
        return ("UaDeleteReferencesItem:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteReferencesItem:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaWriteValue +++++++++++++++++++++++

class UaWriteValue(UaType):
    def __init__(self, val=ffi.new("UA_WriteValue*")):
        super().__init__(val)
        self._nodeId = UaNodeId(val.nodeId)
        self._attributeId = UaUInt32(val.attributeId)
        self._indexRange = UaString(val.indexRange)
        self._value = UaDataValue(val.value)
    

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def attributeId(self):
        return self._attributeId

    @attributeId.setter
    def attributeId(self, val):
        self._attributeId = val
        self._value.attributeId = val.value

    @property
    def indexRange(self):
        return self._indexRange

    @indexRange.setter
    def indexRange(self, val):
        self._indexRange = val
        self._value.indexRange = val.value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = val
        self._value.value = val.value

    def __str__(self):
        return ("UaWriteValue:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_DataValue.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaWriteValue:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_DataValue.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDataTypeAttributes +++++++++++++++++++++++

class UaDataTypeAttributes(UaType):
    def __init__(self, val=ffi.new("UA_DataTypeAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._isAbstract = UaBoolean(val.isAbstract)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def isAbstract(self):
        return self._isAbstract

    @isAbstract.setter
    def isAbstract(self, val):
        self._isAbstract = val
        self._value.isAbstract = val.value

    def __str__(self):
        return ("UaDataTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDataTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaTransferSubscriptionsResponse +++++++++++++++++++++++

class UaTransferSubscriptionsResponse(UaType):
    def __init__(self, val=ffi.new("UA_TransferSubscriptionsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaTransferResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaTransferSubscriptionsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_TransferResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaTransferSubscriptionsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_TransferResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddReferencesResponse +++++++++++++++++++++++

class UaAddReferencesResponse(UaType):
    def __init__(self, val=ffi.new("UA_AddReferencesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaAddReferencesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddReferencesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBuildInfo +++++++++++++++++++++++

class UaBuildInfo(UaType):
    def __init__(self, val=ffi.new("UA_BuildInfo*")):
        super().__init__(val)
        self._productUri = UaString(val.productUri)
        self._manufacturerName = UaString(val.manufacturerName)
        self._productName = UaString(val.productName)
        self._softwareVersion = UaString(val.softwareVersion)
        self._buildNumber = UaString(val.buildNumber)
        self._buildDate = UaDateTime(val.buildDate)
    

    @property
    def productUri(self):
        return self._productUri

    @productUri.setter
    def productUri(self, val):
        self._productUri = val
        self._value.productUri = val.value

    @property
    def manufacturerName(self):
        return self._manufacturerName

    @manufacturerName.setter
    def manufacturerName(self, val):
        self._manufacturerName = val
        self._value.manufacturerName = val.value

    @property
    def productName(self):
        return self._productName

    @productName.setter
    def productName(self, val):
        self._productName = val
        self._value.productName = val.value

    @property
    def softwareVersion(self):
        return self._softwareVersion

    @softwareVersion.setter
    def softwareVersion(self, val):
        self._softwareVersion = val
        self._value.softwareVersion = val.value

    @property
    def buildNumber(self):
        return self._buildNumber

    @buildNumber.setter
    def buildNumber(self, val):
        self._buildNumber = val
        self._value.buildNumber = val.value

    @property
    def buildDate(self):
        return self._buildDate

    @buildDate.setter
    def buildDate(self, val):
        self._buildDate = val
        self._value.buildDate = val.value

    def __str__(self):
        return ("UaBuildInfo:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_DateTime.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBuildInfo:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoringParameters +++++++++++++++++++++++

class UaMonitoringParameters(UaType):
    def __init__(self, val=ffi.new("UA_MonitoringParameters*")):
        super().__init__(val)
        self._clientHandle = UaUInt32(val.clientHandle)
        self._samplingInterval = UaDouble(val.samplingInterval)
        self._filter = UaExtensionObject(val.filter)
        self._queueSize = UaUInt32(val.queueSize)
        self._discardOldest = UaBoolean(val.discardOldest)
    

    @property
    def clientHandle(self):
        return self._clientHandle

    @clientHandle.setter
    def clientHandle(self, val):
        self._clientHandle = val
        self._value.clientHandle = val.value

    @property
    def samplingInterval(self):
        return self._samplingInterval

    @samplingInterval.setter
    def samplingInterval(self, val):
        self._samplingInterval = val
        self._value.samplingInterval = val.value

    @property
    def filter(self):
        return self._filter

    @filter.setter
    def filter(self, val):
        self._filter = val
        self._value.filter = val.value

    @property
    def queueSize(self):
        return self._queueSize

    @queueSize.setter
    def queueSize(self, val):
        self._queueSize = val
        self._value.queueSize = val.value

    @property
    def discardOldest(self):
        return self._discardOldest

    @discardOldest.setter
    def discardOldest(self, val):
        self._discardOldest = val
        self._value.discardOldest = val.value

    def __str__(self):
        return ("UaMonitoringParameters:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoringParameters:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDoubleComplexNumberType +++++++++++++++++++++++

class UaDoubleComplexNumberType(UaType):
    def __init__(self, val=ffi.new("UA_DoubleComplexNumberType*")):
        super().__init__(val)
        self._real = UaDouble(val.real)
        self._imaginary = UaDouble(val.imaginary)
    

    @property
    def real(self):
        return self._real

    @real.setter
    def real(self, val):
        self._real = val
        self._value.real = val.value

    @property
    def imaginary(self):
        return self._imaginary

    @imaginary.setter
    def imaginary(self, val):
        self._imaginary = val
        self._value.imaginary = val.value

    def __str__(self):
        return ("UaDoubleComplexNumberType:\n" + 
                self._UA_Double.str_helper(1) +
                self._UA_Double.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDoubleComplexNumberType:\n" + 
                self._UA_Double.str_helper(n+1) +
                self._UA_Double.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteNodesItem +++++++++++++++++++++++

class UaDeleteNodesItem(UaType):
    def __init__(self, val=ffi.new("UA_DeleteNodesItem*")):
        super().__init__(val)
        self._nodeId = UaNodeId(val.nodeId)
        self._deleteTargetReferences = UaBoolean(val.deleteTargetReferences)
    

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def deleteTargetReferences(self):
        return self._deleteTargetReferences

    @deleteTargetReferences.setter
    def deleteTargetReferences(self, val):
        self._deleteTargetReferences = val
        self._value.deleteTargetReferences = val.value

    def __str__(self):
        return ("UaDeleteNodesItem:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteNodesItem:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaReadValueId +++++++++++++++++++++++

class UaReadValueId(UaType):
    def __init__(self, val=ffi.new("UA_ReadValueId*")):
        super().__init__(val)
        self._nodeId = UaNodeId(val.nodeId)
        self._attributeId = UaUInt32(val.attributeId)
        self._indexRange = UaString(val.indexRange)
        self._dataEncoding = UaQualifiedName(val.dataEncoding)
    

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def attributeId(self):
        return self._attributeId

    @attributeId.setter
    def attributeId(self, val):
        self._attributeId = val
        self._value.attributeId = val.value

    @property
    def indexRange(self):
        return self._indexRange

    @indexRange.setter
    def indexRange(self, val):
        self._indexRange = val
        self._value.indexRange = val.value

    @property
    def dataEncoding(self):
        return self._dataEncoding

    @dataEncoding.setter
    def dataEncoding(self, val):
        self._dataEncoding = val
        self._value.dataEncoding = val.value

    def __str__(self):
        return ("UaReadValueId:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_QualifiedName.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaReadValueId:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_QualifiedName.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCallRequest +++++++++++++++++++++++

class UaCallRequest(UaType):
    def __init__(self, val=ffi.new("UA_CallRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._methodsToCallSize = UaSizeT(val.methodsToCallSize)
        self._*methodsToCall = UaCallMethodRequest(val.*methodsToCall)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def methodsToCallSize(self):
        return self._methodsToCallSize

    @methodsToCallSize.setter
    def methodsToCallSize(self, val):
        self._methodsToCallSize = val
        self._value.methodsToCallSize = val.value

    @property
    def *methodsToCall(self):
        return self._*methodsToCall

    @*methodsToCall.setter
    def *methodsToCall(self, val):
        self._*methodsToCall = val
        self._value.*methodsToCall = val.value

    def __str__(self):
        return ("UaCallRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_CallMethodRequest.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCallRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_CallMethodRequest.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRelativePath +++++++++++++++++++++++

class UaRelativePath(UaType):
    def __init__(self, val=ffi.new("UA_RelativePath*")):
        super().__init__(val)
        self._elementsSize = UaSizeT(val.elementsSize)
        self._*elements = UaRelativePathElement(val.*elements)
    

    @property
    def elementsSize(self):
        return self._elementsSize

    @elementsSize.setter
    def elementsSize(self, val):
        self._elementsSize = val
        self._value.elementsSize = val.value

    @property
    def *elements(self):
        return self._*elements

    @*elements.setter
    def *elements(self, val):
        self._*elements = val
        self._value.*elements = val.value

    def __str__(self):
        return ("UaRelativePath:\n" + 
                self._size_t.str_helper(1) +
                self._UA_RelativePathElement.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRelativePath:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_RelativePathElement.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteNodesRequest +++++++++++++++++++++++

class UaDeleteNodesRequest(UaType):
    def __init__(self, val=ffi.new("UA_DeleteNodesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._nodesToDeleteSize = UaSizeT(val.nodesToDeleteSize)
        self._*nodesToDelete = UaDeleteNodesItem(val.*nodesToDelete)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def nodesToDeleteSize(self):
        return self._nodesToDeleteSize

    @nodesToDeleteSize.setter
    def nodesToDeleteSize(self, val):
        self._nodesToDeleteSize = val
        self._value.nodesToDeleteSize = val.value

    @property
    def *nodesToDelete(self):
        return self._*nodesToDelete

    @*nodesToDelete.setter
    def *nodesToDelete(self, val):
        self._*nodesToDelete = val
        self._value.*nodesToDelete = val.value

    def __str__(self):
        return ("UaDeleteNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DeleteNodesItem.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DeleteNodesItem.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoredItemModifyRequest +++++++++++++++++++++++

class UaMonitoredItemModifyRequest(UaType):
    def __init__(self, val=ffi.new("UA_MonitoredItemModifyRequest*")):
        super().__init__(val)
        self._monitoredItemId = UaUInt32(val.monitoredItemId)
        self._requestedParameters = UaMonitoringParameters(val.requestedParameters)
    

    @property
    def monitoredItemId(self):
        return self._monitoredItemId

    @monitoredItemId.setter
    def monitoredItemId(self, val):
        self._monitoredItemId = val
        self._value.monitoredItemId = val.value

    @property
    def requestedParameters(self):
        return self._requestedParameters

    @requestedParameters.setter
    def requestedParameters(self, val):
        self._requestedParameters = val
        self._value.requestedParameters = val.value

    def __str__(self):
        return ("UaMonitoredItemModifyRequest:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_MonitoringParameters.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoredItemModifyRequest:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_MonitoringParameters.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAggregateConfiguration +++++++++++++++++++++++

class UaAggregateConfiguration(UaType):
    def __init__(self, val=ffi.new("UA_AggregateConfiguration*")):
        super().__init__(val)
        self._useServerCapabilitiesDefaults = UaBoolean(val.useServerCapabilitiesDefaults)
        self._treatUncertainAsBad = UaBoolean(val.treatUncertainAsBad)
        self._percentDataBad = UaByte(val.percentDataBad)
        self._percentDataGood = UaByte(val.percentDataGood)
        self._useSlopedExtrapolation = UaBoolean(val.useSlopedExtrapolation)
    

    @property
    def useServerCapabilitiesDefaults(self):
        return self._useServerCapabilitiesDefaults

    @useServerCapabilitiesDefaults.setter
    def useServerCapabilitiesDefaults(self, val):
        self._useServerCapabilitiesDefaults = val
        self._value.useServerCapabilitiesDefaults = val.value

    @property
    def treatUncertainAsBad(self):
        return self._treatUncertainAsBad

    @treatUncertainAsBad.setter
    def treatUncertainAsBad(self, val):
        self._treatUncertainAsBad = val
        self._value.treatUncertainAsBad = val.value

    @property
    def percentDataBad(self):
        return self._percentDataBad

    @percentDataBad.setter
    def percentDataBad(self, val):
        self._percentDataBad = val
        self._value.percentDataBad = val.value

    @property
    def percentDataGood(self):
        return self._percentDataGood

    @percentDataGood.setter
    def percentDataGood(self, val):
        self._percentDataGood = val
        self._value.percentDataGood = val.value

    @property
    def useSlopedExtrapolation(self):
        return self._useSlopedExtrapolation

    @useSlopedExtrapolation.setter
    def useSlopedExtrapolation(self, val):
        self._useSlopedExtrapolation = val
        self._value.useSlopedExtrapolation = val.value

    def __str__(self):
        return ("UaAggregateConfiguration:\n" + 
                self._UA_Boolean.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Byte.str_helper(1) +
                self._UA_Byte.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAggregateConfiguration:\n" + 
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaUnregisterNodesResponse +++++++++++++++++++++++

class UaUnregisterNodesResponse(UaType):
    def __init__(self, val=ffi.new("UA_UnregisterNodesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    def __str__(self):
        return ("UaUnregisterNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaUnregisterNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1))
                

 
# +++++++++++++++++++ UaContentFilterResult +++++++++++++++++++++++

class UaContentFilterResult(UaType):
    def __init__(self, val=ffi.new("UA_ContentFilterResult*")):
        super().__init__(val)
        self._elementResultsSize = UaSizeT(val.elementResultsSize)
        self._*elementResults = UaContentFilterElementResult(val.*elementResults)
        self._elementDiagnosticInfosSize = UaSizeT(val.elementDiagnosticInfosSize)
        self._*elementDiagnosticInfos = UaDiagnosticInfo(val.*elementDiagnosticInfos)
    

    @property
    def elementResultsSize(self):
        return self._elementResultsSize

    @elementResultsSize.setter
    def elementResultsSize(self, val):
        self._elementResultsSize = val
        self._value.elementResultsSize = val.value

    @property
    def *elementResults(self):
        return self._*elementResults

    @*elementResults.setter
    def *elementResults(self, val):
        self._*elementResults = val
        self._value.*elementResults = val.value

    @property
    def elementDiagnosticInfosSize(self):
        return self._elementDiagnosticInfosSize

    @elementDiagnosticInfosSize.setter
    def elementDiagnosticInfosSize(self, val):
        self._elementDiagnosticInfosSize = val
        self._value.elementDiagnosticInfosSize = val.value

    @property
    def *elementDiagnosticInfos(self):
        return self._*elementDiagnosticInfos

    @*elementDiagnosticInfos.setter
    def *elementDiagnosticInfos(self, val):
        self._*elementDiagnosticInfos = val
        self._value.*elementDiagnosticInfos = val.value

    def __str__(self):
        return ("UaContentFilterResult:\n" + 
                self._size_t.str_helper(1) +
                self._UA_ContentFilterElementResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaContentFilterResult:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_ContentFilterElementResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaUserTokenPolicy +++++++++++++++++++++++

class UaUserTokenPolicy(UaType):
    def __init__(self, val=ffi.new("UA_UserTokenPolicy*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
        self._tokenType = UaUserTokenType(val.tokenType)
        self._issuedTokenType = UaString(val.issuedTokenType)
        self._issuerEndpointUrl = UaString(val.issuerEndpointUrl)
        self._securityPolicyUri = UaString(val.securityPolicyUri)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    @property
    def tokenType(self):
        return self._tokenType

    @tokenType.setter
    def tokenType(self, val):
        self._tokenType = val
        self._value.tokenType = val.value

    @property
    def issuedTokenType(self):
        return self._issuedTokenType

    @issuedTokenType.setter
    def issuedTokenType(self, val):
        self._issuedTokenType = val
        self._value.issuedTokenType = val.value

    @property
    def issuerEndpointUrl(self):
        return self._issuerEndpointUrl

    @issuerEndpointUrl.setter
    def issuerEndpointUrl(self, val):
        self._issuerEndpointUrl = val
        self._value.issuerEndpointUrl = val.value

    @property
    def securityPolicyUri(self):
        return self._securityPolicyUri

    @securityPolicyUri.setter
    def securityPolicyUri(self, val):
        self._securityPolicyUri = val
        self._value.securityPolicyUri = val.value

    def __str__(self):
        return ("UaUserTokenPolicy:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_UserTokenType.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaUserTokenPolicy:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_UserTokenType.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteMonitoredItemsRequest +++++++++++++++++++++++

class UaDeleteMonitoredItemsRequest(UaType):
    def __init__(self, val=ffi.new("UA_DeleteMonitoredItemsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._monitoredItemIdsSize = UaSizeT(val.monitoredItemIdsSize)
        self._*monitoredItemIds = UaUInt32(val.*monitoredItemIds)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def monitoredItemIdsSize(self):
        return self._monitoredItemIdsSize

    @monitoredItemIdsSize.setter
    def monitoredItemIdsSize(self, val):
        self._monitoredItemIdsSize = val
        self._value.monitoredItemIdsSize = val.value

    @property
    def *monitoredItemIds(self):
        return self._*monitoredItemIds

    @*monitoredItemIds.setter
    def *monitoredItemIds(self, val):
        self._*monitoredItemIds = val
        self._value.*monitoredItemIds = val.value

    def __str__(self):
        return ("UaDeleteMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetMonitoringModeRequest +++++++++++++++++++++++

class UaSetMonitoringModeRequest(UaType):
    def __init__(self, val=ffi.new("UA_SetMonitoringModeRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._monitoringMode = UaMonitoringMode(val.monitoringMode)
        self._monitoredItemIdsSize = UaSizeT(val.monitoredItemIdsSize)
        self._*monitoredItemIds = UaUInt32(val.*monitoredItemIds)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def monitoringMode(self):
        return self._monitoringMode

    @monitoringMode.setter
    def monitoringMode(self, val):
        self._monitoringMode = val
        self._value.monitoringMode = val.value

    @property
    def monitoredItemIdsSize(self):
        return self._monitoredItemIdsSize

    @monitoredItemIdsSize.setter
    def monitoredItemIdsSize(self, val):
        self._monitoredItemIdsSize = val
        self._value.monitoredItemIdsSize = val.value

    @property
    def *monitoredItemIds(self):
        return self._*monitoredItemIds

    @*monitoredItemIds.setter
    def *monitoredItemIds(self, val):
        self._*monitoredItemIds = val
        self._value.*monitoredItemIds = val.value

    def __str__(self):
        return ("UaSetMonitoringModeRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_MonitoringMode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetMonitoringModeRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_MonitoringMode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaReferenceTypeAttributes +++++++++++++++++++++++

class UaReferenceTypeAttributes(UaType):
    def __init__(self, val=ffi.new("UA_ReferenceTypeAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._isAbstract = UaBoolean(val.isAbstract)
        self._symmetric = UaBoolean(val.symmetric)
        self._inverseName = UaLocalizedText(val.inverseName)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def isAbstract(self):
        return self._isAbstract

    @isAbstract.setter
    def isAbstract(self, val):
        self._isAbstract = val
        self._value.isAbstract = val.value

    @property
    def symmetric(self):
        return self._symmetric

    @symmetric.setter
    def symmetric(self, val):
        self._symmetric = val
        self._value.symmetric = val.value

    @property
    def inverseName(self):
        return self._inverseName

    @inverseName.setter
    def inverseName(self, val):
        self._inverseName = val
        self._value.inverseName = val.value

    def __str__(self):
        return ("UaReferenceTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_LocalizedText.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaReferenceTypeAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1))
                

 
# +++++++++++++++++++ UaGetEndpointsRequest +++++++++++++++++++++++

class UaGetEndpointsRequest(UaType):
    def __init__(self, val=ffi.new("UA_GetEndpointsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._endpointUrl = UaString(val.endpointUrl)
        self._localeIdsSize = UaSizeT(val.localeIdsSize)
        self._*localeIds = UaString(val.*localeIds)
        self._profileUrisSize = UaSizeT(val.profileUrisSize)
        self._*profileUris = UaString(val.*profileUris)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def endpointUrl(self):
        return self._endpointUrl

    @endpointUrl.setter
    def endpointUrl(self, val):
        self._endpointUrl = val
        self._value.endpointUrl = val.value

    @property
    def localeIdsSize(self):
        return self._localeIdsSize

    @localeIdsSize.setter
    def localeIdsSize(self, val):
        self._localeIdsSize = val
        self._value.localeIdsSize = val.value

    @property
    def *localeIds(self):
        return self._*localeIds

    @*localeIds.setter
    def *localeIds(self, val):
        self._*localeIds = val
        self._value.*localeIds = val.value

    @property
    def profileUrisSize(self):
        return self._profileUrisSize

    @profileUrisSize.setter
    def profileUrisSize(self, val):
        self._profileUrisSize = val
        self._value.profileUrisSize = val.value

    @property
    def *profileUris(self):
        return self._*profileUris

    @*profileUris.setter
    def *profileUris(self, val):
        self._*profileUris = val
        self._value.*profileUris = val.value

    def __str__(self):
        return ("UaGetEndpointsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaGetEndpointsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCloseSecureChannelResponse +++++++++++++++++++++++

class UaCloseSecureChannelResponse(UaType):
    def __init__(self, val=ffi.new("UA_CloseSecureChannelResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    def __str__(self):
        return ("UaCloseSecureChannelResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCloseSecureChannelResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1))
                

 
# +++++++++++++++++++ UaViewDescription +++++++++++++++++++++++

class UaViewDescription(UaType):
    def __init__(self, val=ffi.new("UA_ViewDescription*")):
        super().__init__(val)
        self._viewId = UaNodeId(val.viewId)
        self._timestamp = UaDateTime(val.timestamp)
        self._viewVersion = UaUInt32(val.viewVersion)
    

    @property
    def viewId(self):
        return self._viewId

    @viewId.setter
    def viewId(self, val):
        self._viewId = val
        self._value.viewId = val.value

    @property
    def timestamp(self):
        return self._timestamp

    @timestamp.setter
    def timestamp(self, val):
        self._timestamp = val
        self._value.timestamp = val.value

    @property
    def viewVersion(self):
        return self._viewVersion

    @viewVersion.setter
    def viewVersion(self, val):
        self._viewVersion = val
        self._value.viewVersion = val.value

    def __str__(self):
        return ("UaViewDescription:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_DateTime.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaViewDescription:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetPublishingModeResponse +++++++++++++++++++++++

class UaSetPublishingModeResponse(UaType):
    def __init__(self, val=ffi.new("UA_SetPublishingModeResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaSetPublishingModeResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetPublishingModeResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaStatusChangeNotification +++++++++++++++++++++++

class UaStatusChangeNotification(UaType):
    def __init__(self, val=ffi.new("UA_StatusChangeNotification*")):
        super().__init__(val)
        self._status = UaStatusCode(val.status)
        self._diagnosticInfo = UaDiagnosticInfo(val.diagnosticInfo)
    

    @property
    def status(self):
        return self._status

    @status.setter
    def status(self, val):
        self._status = val
        self._value.status = val.value

    @property
    def diagnosticInfo(self):
        return self._diagnosticInfo

    @diagnosticInfo.setter
    def diagnosticInfo(self, val):
        self._diagnosticInfo = val
        self._value.diagnosticInfo = val.value

    def __str__(self):
        return ("UaStatusChangeNotification:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaStatusChangeNotification:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaStructureField +++++++++++++++++++++++

class UaStructureField(UaType):
    def __init__(self, val=ffi.new("UA_StructureField*")):
        super().__init__(val)
        self._name = UaString(val.name)
        self._description = UaLocalizedText(val.description)
        self._dataType = UaNodeId(val.dataType)
        self._valueRank = UaInt32(val.valueRank)
        self._arrayDimensionsSize = UaSizeT(val.arrayDimensionsSize)
        self._*arrayDimensions = UaUInt32(val.*arrayDimensions)
        self._maxStringLength = UaUInt32(val.maxStringLength)
        self._isOptional = UaBoolean(val.isOptional)
    

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, val):
        self._name = val
        self._value.name = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def dataType(self):
        return self._dataType

    @dataType.setter
    def dataType(self, val):
        self._dataType = val
        self._value.dataType = val.value

    @property
    def valueRank(self):
        return self._valueRank

    @valueRank.setter
    def valueRank(self, val):
        self._valueRank = val
        self._value.valueRank = val.value

    @property
    def arrayDimensionsSize(self):
        return self._arrayDimensionsSize

    @arrayDimensionsSize.setter
    def arrayDimensionsSize(self, val):
        self._arrayDimensionsSize = val
        self._value.arrayDimensionsSize = val.value

    @property
    def *arrayDimensions(self):
        return self._*arrayDimensions

    @*arrayDimensions.setter
    def *arrayDimensions(self, val):
        self._*arrayDimensions = val
        self._value.*arrayDimensions = val.value

    @property
    def maxStringLength(self):
        return self._maxStringLength

    @maxStringLength.setter
    def maxStringLength(self, val):
        self._maxStringLength = val
        self._value.maxStringLength = val.value

    @property
    def isOptional(self):
        return self._isOptional

    @isOptional.setter
    def isOptional(self, val):
        self._isOptional = val
        self._value.isOptional = val.value

    def __str__(self):
        return ("UaStructureField:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Int32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaStructureField:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Int32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEventFilterResult +++++++++++++++++++++++

class UaEventFilterResult(UaType):
    def __init__(self, val=ffi.new("UA_EventFilterResult*")):
        super().__init__(val)
        self._selectClauseResultsSize = UaSizeT(val.selectClauseResultsSize)
        self._*selectClauseResults = UaStatusCode(val.*selectClauseResults)
        self._selectClauseDiagnosticInfosSize = UaSizeT(val.selectClauseDiagnosticInfosSize)
        self._*selectClauseDiagnosticInfos = UaDiagnosticInfo(val.*selectClauseDiagnosticInfos)
        self._whereClauseResult = UaContentFilterResult(val.whereClauseResult)
    

    @property
    def selectClauseResultsSize(self):
        return self._selectClauseResultsSize

    @selectClauseResultsSize.setter
    def selectClauseResultsSize(self, val):
        self._selectClauseResultsSize = val
        self._value.selectClauseResultsSize = val.value

    @property
    def *selectClauseResults(self):
        return self._*selectClauseResults

    @*selectClauseResults.setter
    def *selectClauseResults(self, val):
        self._*selectClauseResults = val
        self._value.*selectClauseResults = val.value

    @property
    def selectClauseDiagnosticInfosSize(self):
        return self._selectClauseDiagnosticInfosSize

    @selectClauseDiagnosticInfosSize.setter
    def selectClauseDiagnosticInfosSize(self, val):
        self._selectClauseDiagnosticInfosSize = val
        self._value.selectClauseDiagnosticInfosSize = val.value

    @property
    def *selectClauseDiagnosticInfos(self):
        return self._*selectClauseDiagnosticInfos

    @*selectClauseDiagnosticInfos.setter
    def *selectClauseDiagnosticInfos(self, val):
        self._*selectClauseDiagnosticInfos = val
        self._value.*selectClauseDiagnosticInfos = val.value

    @property
    def whereClauseResult(self):
        return self._whereClauseResult

    @whereClauseResult.setter
    def whereClauseResult(self, val):
        self._whereClauseResult = val
        self._value.whereClauseResult = val.value

    def __str__(self):
        return ("UaEventFilterResult:\n" + 
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1) +
                self._UA_ContentFilterResult.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEventFilterResult:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1) +
                self._UA_ContentFilterResult.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMonitoredItemCreateRequest +++++++++++++++++++++++

class UaMonitoredItemCreateRequest(UaType):
    def __init__(self, val=ffi.new("UA_MonitoredItemCreateRequest*")):
        super().__init__(val)
        self._itemToMonitor = UaReadValueId(val.itemToMonitor)
        self._monitoringMode = UaMonitoringMode(val.monitoringMode)
        self._requestedParameters = UaMonitoringParameters(val.requestedParameters)
    

    @property
    def itemToMonitor(self):
        return self._itemToMonitor

    @itemToMonitor.setter
    def itemToMonitor(self, val):
        self._itemToMonitor = val
        self._value.itemToMonitor = val.value

    @property
    def monitoringMode(self):
        return self._monitoringMode

    @monitoringMode.setter
    def monitoringMode(self, val):
        self._monitoringMode = val
        self._value.monitoringMode = val.value

    @property
    def requestedParameters(self):
        return self._requestedParameters

    @requestedParameters.setter
    def requestedParameters(self, val):
        self._requestedParameters = val
        self._value.requestedParameters = val.value

    def __str__(self):
        return ("UaMonitoredItemCreateRequest:\n" + 
                self._UA_ReadValueId.str_helper(1) +
                self._UA_MonitoringMode.str_helper(1) +
                self._UA_MonitoringParameters.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMonitoredItemCreateRequest:\n" + 
                self._UA_ReadValueId.str_helper(n+1) +
                self._UA_MonitoringMode.str_helper(n+1) +
                self._UA_MonitoringParameters.str_helper(n+1))
                

 
# +++++++++++++++++++ UaComplexNumberType +++++++++++++++++++++++

class UaComplexNumberType(UaType):
    def __init__(self, val=ffi.new("UA_ComplexNumberType*")):
        super().__init__(val)
        self._real = UaFloat(val.real)
        self._imaginary = UaFloat(val.imaginary)
    

    @property
    def real(self):
        return self._real

    @real.setter
    def real(self, val):
        self._real = val
        self._value.real = val.value

    @property
    def imaginary(self):
        return self._imaginary

    @imaginary.setter
    def imaginary(self, val):
        self._imaginary = val
        self._value.imaginary = val.value

    def __str__(self):
        return ("UaComplexNumberType:\n" + 
                self._UA_Float.str_helper(1) +
                self._UA_Float.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaComplexNumberType:\n" + 
                self._UA_Float.str_helper(n+1) +
                self._UA_Float.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRange +++++++++++++++++++++++

class UaRange(UaType):
    def __init__(self, val=ffi.new("UA_Range*")):
        super().__init__(val)
        self._low = UaDouble(val.low)
        self._high = UaDouble(val.high)
    

    @property
    def low(self):
        return self._low

    @low.setter
    def low(self, val):
        self._low = val
        self._value.low = val.value

    @property
    def high(self):
        return self._high

    @high.setter
    def high(self, val):
        self._high = val
        self._value.high = val.value

    def __str__(self):
        return ("UaRange:\n" + 
                self._UA_Double.str_helper(1) +
                self._UA_Double.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRange:\n" + 
                self._UA_Double.str_helper(n+1) +
                self._UA_Double.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDataChangeNotification +++++++++++++++++++++++

class UaDataChangeNotification(UaType):
    def __init__(self, val=ffi.new("UA_DataChangeNotification*")):
        super().__init__(val)
        self._monitoredItemsSize = UaSizeT(val.monitoredItemsSize)
        self._*monitoredItems = UaMonitoredItemNotification(val.*monitoredItems)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def monitoredItemsSize(self):
        return self._monitoredItemsSize

    @monitoredItemsSize.setter
    def monitoredItemsSize(self, val):
        self._monitoredItemsSize = val
        self._value.monitoredItemsSize = val.value

    @property
    def *monitoredItems(self):
        return self._*monitoredItems

    @*monitoredItems.setter
    def *monitoredItems(self, val):
        self._*monitoredItems = val
        self._value.*monitoredItems = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaDataChangeNotification:\n" + 
                self._size_t.str_helper(1) +
                self._UA_MonitoredItemNotification.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDataChangeNotification:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_MonitoredItemNotification.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaArgument +++++++++++++++++++++++

class UaArgument(UaType):
    def __init__(self, val=ffi.new("UA_Argument*")):
        super().__init__(val)
        self._name = UaString(val.name)
        self._dataType = UaNodeId(val.dataType)
        self._valueRank = UaInt32(val.valueRank)
        self._arrayDimensionsSize = UaSizeT(val.arrayDimensionsSize)
        self._*arrayDimensions = UaUInt32(val.*arrayDimensions)
        self._description = UaLocalizedText(val.description)
    

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, val):
        self._name = val
        self._value.name = val.value

    @property
    def dataType(self):
        return self._dataType

    @dataType.setter
    def dataType(self, val):
        self._dataType = val
        self._value.dataType = val.value

    @property
    def valueRank(self):
        return self._valueRank

    @valueRank.setter
    def valueRank(self, val):
        self._valueRank = val
        self._value.valueRank = val.value

    @property
    def arrayDimensionsSize(self):
        return self._arrayDimensionsSize

    @arrayDimensionsSize.setter
    def arrayDimensionsSize(self, val):
        self._arrayDimensionsSize = val
        self._value.arrayDimensionsSize = val.value

    @property
    def *arrayDimensions(self):
        return self._*arrayDimensions

    @*arrayDimensions.setter
    def *arrayDimensions(self, val):
        self._*arrayDimensions = val
        self._value.*arrayDimensions = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    def __str__(self):
        return ("UaArgument:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Int32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaArgument:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Int32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1))
                

 
# +++++++++++++++++++ UaTransferSubscriptionsRequest +++++++++++++++++++++++

class UaTransferSubscriptionsRequest(UaType):
    def __init__(self, val=ffi.new("UA_TransferSubscriptionsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionIdsSize = UaSizeT(val.subscriptionIdsSize)
        self._*subscriptionIds = UaUInt32(val.*subscriptionIds)
        self._sendInitialValues = UaBoolean(val.sendInitialValues)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionIdsSize(self):
        return self._subscriptionIdsSize

    @subscriptionIdsSize.setter
    def subscriptionIdsSize(self, val):
        self._subscriptionIdsSize = val
        self._value.subscriptionIdsSize = val.value

    @property
    def *subscriptionIds(self):
        return self._*subscriptionIds

    @*subscriptionIds.setter
    def *subscriptionIds(self, val):
        self._*subscriptionIds = val
        self._value.*subscriptionIds = val.value

    @property
    def sendInitialValues(self):
        return self._sendInitialValues

    @sendInitialValues.setter
    def sendInitialValues(self, val):
        self._sendInitialValues = val
        self._value.sendInitialValues = val.value

    def __str__(self):
        return ("UaTransferSubscriptionsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaTransferSubscriptionsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaChannelSecurityToken +++++++++++++++++++++++

class UaChannelSecurityToken(UaType):
    def __init__(self, val=ffi.new("UA_ChannelSecurityToken*")):
        super().__init__(val)
        self._channelId = UaUInt32(val.channelId)
        self._tokenId = UaUInt32(val.tokenId)
        self._createdAt = UaDateTime(val.createdAt)
        self._revisedLifetime = UaUInt32(val.revisedLifetime)
    

    @property
    def channelId(self):
        return self._channelId

    @channelId.setter
    def channelId(self, val):
        self._channelId = val
        self._value.channelId = val.value

    @property
    def tokenId(self):
        return self._tokenId

    @tokenId.setter
    def tokenId(self, val):
        self._tokenId = val
        self._value.tokenId = val.value

    @property
    def createdAt(self):
        return self._createdAt

    @createdAt.setter
    def createdAt(self, val):
        self._createdAt = val
        self._value.createdAt = val.value

    @property
    def revisedLifetime(self):
        return self._revisedLifetime

    @revisedLifetime.setter
    def revisedLifetime(self, val):
        self._revisedLifetime = val
        self._value.revisedLifetime = val.value

    def __str__(self):
        return ("UaChannelSecurityToken:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_DateTime.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaChannelSecurityToken:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEventNotificationList +++++++++++++++++++++++

class UaEventNotificationList(UaType):
    def __init__(self, val=ffi.new("UA_EventNotificationList*")):
        super().__init__(val)
        self._eventsSize = UaSizeT(val.eventsSize)
        self._*events = UaEventFieldList(val.*events)
    

    @property
    def eventsSize(self):
        return self._eventsSize

    @eventsSize.setter
    def eventsSize(self, val):
        self._eventsSize = val
        self._value.eventsSize = val.value

    @property
    def *events(self):
        return self._*events

    @*events.setter
    def *events(self, val):
        self._*events = val
        self._value.*events = val.value

    def __str__(self):
        return ("UaEventNotificationList:\n" + 
                self._size_t.str_helper(1) +
                self._UA_EventFieldList.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEventNotificationList:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_EventFieldList.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAnonymousIdentityToken +++++++++++++++++++++++

class UaAnonymousIdentityToken(UaType):
    def __init__(self, val=ffi.new("UA_AnonymousIdentityToken*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    def __str__(self):
        return ("UaAnonymousIdentityToken:\n" + 
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAnonymousIdentityToken:\n" + 
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAggregateFilter +++++++++++++++++++++++

class UaAggregateFilter(UaType):
    def __init__(self, val=ffi.new("UA_AggregateFilter*")):
        super().__init__(val)
        self._startTime = UaDateTime(val.startTime)
        self._aggregateType = UaNodeId(val.aggregateType)
        self._processingInterval = UaDouble(val.processingInterval)
        self._aggregateConfiguration = UaAggregateConfiguration(val.aggregateConfiguration)
    

    @property
    def startTime(self):
        return self._startTime

    @startTime.setter
    def startTime(self, val):
        self._startTime = val
        self._value.startTime = val.value

    @property
    def aggregateType(self):
        return self._aggregateType

    @aggregateType.setter
    def aggregateType(self, val):
        self._aggregateType = val
        self._value.aggregateType = val.value

    @property
    def processingInterval(self):
        return self._processingInterval

    @processingInterval.setter
    def processingInterval(self, val):
        self._processingInterval = val
        self._value.processingInterval = val.value

    @property
    def aggregateConfiguration(self):
        return self._aggregateConfiguration

    @aggregateConfiguration.setter
    def aggregateConfiguration(self, val):
        self._aggregateConfiguration = val
        self._value.aggregateConfiguration = val.value

    def __str__(self):
        return ("UaAggregateFilter:\n" + 
                self._UA_DateTime.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_AggregateConfiguration.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAggregateFilter:\n" + 
                self._UA_DateTime.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_AggregateConfiguration.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRepublishResponse +++++++++++++++++++++++

class UaRepublishResponse(UaType):
    def __init__(self, val=ffi.new("UA_RepublishResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._notificationMessage = UaNotificationMessage(val.notificationMessage)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def notificationMessage(self):
        return self._notificationMessage

    @notificationMessage.setter
    def notificationMessage(self, val):
        self._notificationMessage = val
        self._value.notificationMessage = val.value

    def __str__(self):
        return ("UaRepublishResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_NotificationMessage.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRepublishResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_NotificationMessage.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteSubscriptionsResponse +++++++++++++++++++++++

class UaDeleteSubscriptionsResponse(UaType):
    def __init__(self, val=ffi.new("UA_DeleteSubscriptionsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaDeleteSubscriptionsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteSubscriptionsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRegisterNodesRequest +++++++++++++++++++++++

class UaRegisterNodesRequest(UaType):
    def __init__(self, val=ffi.new("UA_RegisterNodesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._nodesToRegisterSize = UaSizeT(val.nodesToRegisterSize)
        self._*nodesToRegister = UaNodeId(val.*nodesToRegister)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def nodesToRegisterSize(self):
        return self._nodesToRegisterSize

    @nodesToRegisterSize.setter
    def nodesToRegisterSize(self, val):
        self._nodesToRegisterSize = val
        self._value.nodesToRegisterSize = val.value

    @property
    def *nodesToRegister(self):
        return self._*nodesToRegister

    @*nodesToRegister.setter
    def *nodesToRegister(self, val):
        self._*nodesToRegister = val
        self._value.*nodesToRegister = val.value

    def __str__(self):
        return ("UaRegisterNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_NodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRegisterNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaStructureDefinition +++++++++++++++++++++++

class UaStructureDefinition(UaType):
    def __init__(self, val=ffi.new("UA_StructureDefinition*")):
        super().__init__(val)
        self._defaultEncodingId = UaNodeId(val.defaultEncodingId)
        self._baseDataType = UaNodeId(val.baseDataType)
        self._structureType = UaStructureType(val.structureType)
        self._fieldsSize = UaSizeT(val.fieldsSize)
        self._*fields = UaStructureField(val.*fields)
    

    @property
    def defaultEncodingId(self):
        return self._defaultEncodingId

    @defaultEncodingId.setter
    def defaultEncodingId(self, val):
        self._defaultEncodingId = val
        self._value.defaultEncodingId = val.value

    @property
    def baseDataType(self):
        return self._baseDataType

    @baseDataType.setter
    def baseDataType(self, val):
        self._baseDataType = val
        self._value.baseDataType = val.value

    @property
    def structureType(self):
        return self._structureType

    @structureType.setter
    def structureType(self, val):
        self._structureType = val
        self._value.structureType = val.value

    @property
    def fieldsSize(self):
        return self._fieldsSize

    @fieldsSize.setter
    def fieldsSize(self, val):
        self._fieldsSize = val
        self._value.fieldsSize = val.value

    @property
    def *fields(self):
        return self._*fields

    @*fields.setter
    def *fields(self, val):
        self._*fields = val
        self._value.*fields = val.value

    def __str__(self):
        return ("UaStructureDefinition:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_StructureType.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StructureField.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaStructureDefinition:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_StructureType.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StructureField.str_helper(n+1))
                

 
# +++++++++++++++++++ UaMethodAttributes +++++++++++++++++++++++

class UaMethodAttributes(UaType):
    def __init__(self, val=ffi.new("UA_MethodAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._executable = UaBoolean(val.executable)
        self._userExecutable = UaBoolean(val.userExecutable)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def executable(self):
        return self._executable

    @executable.setter
    def executable(self, val):
        self._executable = val
        self._value.executable = val.value

    @property
    def userExecutable(self):
        return self._userExecutable

    @userExecutable.setter
    def userExecutable(self, val):
        self._userExecutable = val
        self._value.userExecutable = val.value

    def __str__(self):
        return ("UaMethodAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaMethodAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaUserNameIdentityToken +++++++++++++++++++++++

class UaUserNameIdentityToken(UaType):
    def __init__(self, val=ffi.new("UA_UserNameIdentityToken*")):
        super().__init__(val)
        self._policyId = UaString(val.policyId)
        self._userName = UaString(val.userName)
        self._password = UaByteString(val.password)
        self._encryptionAlgorithm = UaString(val.encryptionAlgorithm)
    

    @property
    def policyId(self):
        return self._policyId

    @policyId.setter
    def policyId(self, val):
        self._policyId = val
        self._value.policyId = val.value

    @property
    def userName(self):
        return self._userName

    @userName.setter
    def userName(self, val):
        self._userName = val
        self._value.userName = val.value

    @property
    def password(self):
        return self._password

    @password.setter
    def password(self, val):
        self._password = val
        self._value.password = val.value

    @property
    def encryptionAlgorithm(self):
        return self._encryptionAlgorithm

    @encryptionAlgorithm.setter
    def encryptionAlgorithm(self, val):
        self._encryptionAlgorithm = val
        self._value.encryptionAlgorithm = val.value

    def __str__(self):
        return ("UaUserNameIdentityToken:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaUserNameIdentityToken:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaUnregisterNodesRequest +++++++++++++++++++++++

class UaUnregisterNodesRequest(UaType):
    def __init__(self, val=ffi.new("UA_UnregisterNodesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._nodesToUnregisterSize = UaSizeT(val.nodesToUnregisterSize)
        self._*nodesToUnregister = UaNodeId(val.*nodesToUnregister)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def nodesToUnregisterSize(self):
        return self._nodesToUnregisterSize

    @nodesToUnregisterSize.setter
    def nodesToUnregisterSize(self, val):
        self._nodesToUnregisterSize = val
        self._value.nodesToUnregisterSize = val.value

    @property
    def *nodesToUnregister(self):
        return self._*nodesToUnregister

    @*nodesToUnregister.setter
    def *nodesToUnregister(self, val):
        self._*nodesToUnregister = val
        self._value.*nodesToUnregister = val.value

    def __str__(self):
        return ("UaUnregisterNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_NodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaUnregisterNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaOpenSecureChannelResponse +++++++++++++++++++++++

class UaOpenSecureChannelResponse(UaType):
    def __init__(self, val=ffi.new("UA_OpenSecureChannelResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._serverProtocolVersion = UaUInt32(val.serverProtocolVersion)
        self._securityToken = UaChannelSecurityToken(val.securityToken)
        self._serverNonce = UaByteString(val.serverNonce)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def serverProtocolVersion(self):
        return self._serverProtocolVersion

    @serverProtocolVersion.setter
    def serverProtocolVersion(self, val):
        self._serverProtocolVersion = val
        self._value.serverProtocolVersion = val.value

    @property
    def securityToken(self):
        return self._securityToken

    @securityToken.setter
    def securityToken(self, val):
        self._securityToken = val
        self._value.securityToken = val.value

    @property
    def serverNonce(self):
        return self._serverNonce

    @serverNonce.setter
    def serverNonce(self, val):
        self._serverNonce = val
        self._value.serverNonce = val.value

    def __str__(self):
        return ("UaOpenSecureChannelResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_ChannelSecurityToken.str_helper(1) +
                self._UA_ByteString.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaOpenSecureChannelResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_ChannelSecurityToken.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetTriggeringResponse +++++++++++++++++++++++

class UaSetTriggeringResponse(UaType):
    def __init__(self, val=ffi.new("UA_SetTriggeringResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._addResultsSize = UaSizeT(val.addResultsSize)
        self._*addResults = UaStatusCode(val.*addResults)
        self._addDiagnosticInfosSize = UaSizeT(val.addDiagnosticInfosSize)
        self._*addDiagnosticInfos = UaDiagnosticInfo(val.*addDiagnosticInfos)
        self._removeResultsSize = UaSizeT(val.removeResultsSize)
        self._*removeResults = UaStatusCode(val.*removeResults)
        self._removeDiagnosticInfosSize = UaSizeT(val.removeDiagnosticInfosSize)
        self._*removeDiagnosticInfos = UaDiagnosticInfo(val.*removeDiagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def addResultsSize(self):
        return self._addResultsSize

    @addResultsSize.setter
    def addResultsSize(self, val):
        self._addResultsSize = val
        self._value.addResultsSize = val.value

    @property
    def *addResults(self):
        return self._*addResults

    @*addResults.setter
    def *addResults(self, val):
        self._*addResults = val
        self._value.*addResults = val.value

    @property
    def addDiagnosticInfosSize(self):
        return self._addDiagnosticInfosSize

    @addDiagnosticInfosSize.setter
    def addDiagnosticInfosSize(self, val):
        self._addDiagnosticInfosSize = val
        self._value.addDiagnosticInfosSize = val.value

    @property
    def *addDiagnosticInfos(self):
        return self._*addDiagnosticInfos

    @*addDiagnosticInfos.setter
    def *addDiagnosticInfos(self, val):
        self._*addDiagnosticInfos = val
        self._value.*addDiagnosticInfos = val.value

    @property
    def removeResultsSize(self):
        return self._removeResultsSize

    @removeResultsSize.setter
    def removeResultsSize(self, val):
        self._removeResultsSize = val
        self._value.removeResultsSize = val.value

    @property
    def *removeResults(self):
        return self._*removeResults

    @*removeResults.setter
    def *removeResults(self, val):
        self._*removeResults = val
        self._value.*removeResults = val.value

    @property
    def removeDiagnosticInfosSize(self):
        return self._removeDiagnosticInfosSize

    @removeDiagnosticInfosSize.setter
    def removeDiagnosticInfosSize(self, val):
        self._removeDiagnosticInfosSize = val
        self._value.removeDiagnosticInfosSize = val.value

    @property
    def *removeDiagnosticInfos(self):
        return self._*removeDiagnosticInfos

    @*removeDiagnosticInfos.setter
    def *removeDiagnosticInfos(self, val):
        self._*removeDiagnosticInfos = val
        self._value.*removeDiagnosticInfos = val.value

    def __str__(self):
        return ("UaSetTriggeringResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetTriggeringResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSimpleAttributeOperand +++++++++++++++++++++++

class UaSimpleAttributeOperand(UaType):
    def __init__(self, val=ffi.new("UA_SimpleAttributeOperand*")):
        super().__init__(val)
        self._typeDefinitionId = UaNodeId(val.typeDefinitionId)
        self._browsePathSize = UaSizeT(val.browsePathSize)
        self._*browsePath = UaQualifiedName(val.*browsePath)
        self._attributeId = UaUInt32(val.attributeId)
        self._indexRange = UaString(val.indexRange)
    

    @property
    def typeDefinitionId(self):
        return self._typeDefinitionId

    @typeDefinitionId.setter
    def typeDefinitionId(self, val):
        self._typeDefinitionId = val
        self._value.typeDefinitionId = val.value

    @property
    def browsePathSize(self):
        return self._browsePathSize

    @browsePathSize.setter
    def browsePathSize(self, val):
        self._browsePathSize = val
        self._value.browsePathSize = val.value

    @property
    def *browsePath(self):
        return self._*browsePath

    @*browsePath.setter
    def *browsePath(self, val):
        self._*browsePath = val
        self._value.*browsePath = val.value

    @property
    def attributeId(self):
        return self._attributeId

    @attributeId.setter
    def attributeId(self, val):
        self._attributeId = val
        self._value.attributeId = val.value

    @property
    def indexRange(self):
        return self._indexRange

    @indexRange.setter
    def indexRange(self, val):
        self._indexRange = val
        self._value.indexRange = val.value

    def __str__(self):
        return ("UaSimpleAttributeOperand:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_QualifiedName.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSimpleAttributeOperand:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_QualifiedName.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRepublishRequest +++++++++++++++++++++++

class UaRepublishRequest(UaType):
    def __init__(self, val=ffi.new("UA_RepublishRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._retransmitSequenceNumber = UaUInt32(val.retransmitSequenceNumber)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def retransmitSequenceNumber(self):
        return self._retransmitSequenceNumber

    @retransmitSequenceNumber.setter
    def retransmitSequenceNumber(self, val):
        self._retransmitSequenceNumber = val
        self._value.retransmitSequenceNumber = val.value

    def __str__(self):
        return ("UaRepublishRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRepublishRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaRegisterNodesResponse +++++++++++++++++++++++

class UaRegisterNodesResponse(UaType):
    def __init__(self, val=ffi.new("UA_RegisterNodesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._registeredNodeIdsSize = UaSizeT(val.registeredNodeIdsSize)
        self._*registeredNodeIds = UaNodeId(val.*registeredNodeIds)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def registeredNodeIdsSize(self):
        return self._registeredNodeIdsSize

    @registeredNodeIdsSize.setter
    def registeredNodeIdsSize(self, val):
        self._registeredNodeIdsSize = val
        self._value.registeredNodeIdsSize = val.value

    @property
    def *registeredNodeIds(self):
        return self._*registeredNodeIds

    @*registeredNodeIds.setter
    def *registeredNodeIds(self, val):
        self._*registeredNodeIds = val
        self._value.*registeredNodeIds = val.value

    def __str__(self):
        return ("UaRegisterNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_NodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaRegisterNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaModifyMonitoredItemsResponse +++++++++++++++++++++++

class UaModifyMonitoredItemsResponse(UaType):
    def __init__(self, val=ffi.new("UA_ModifyMonitoredItemsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaMonitoredItemModifyResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaModifyMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_MonitoredItemModifyResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaModifyMonitoredItemsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_MonitoredItemModifyResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteSubscriptionsRequest +++++++++++++++++++++++

class UaDeleteSubscriptionsRequest(UaType):
    def __init__(self, val=ffi.new("UA_DeleteSubscriptionsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionIdsSize = UaSizeT(val.subscriptionIdsSize)
        self._*subscriptionIds = UaUInt32(val.*subscriptionIds)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionIdsSize(self):
        return self._subscriptionIdsSize

    @subscriptionIdsSize.setter
    def subscriptionIdsSize(self, val):
        self._subscriptionIdsSize = val
        self._value.subscriptionIdsSize = val.value

    @property
    def *subscriptionIds(self):
        return self._*subscriptionIds

    @*subscriptionIds.setter
    def *subscriptionIds(self, val):
        self._*subscriptionIds = val
        self._value.*subscriptionIds = val.value

    def __str__(self):
        return ("UaDeleteSubscriptionsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteSubscriptionsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowsePath +++++++++++++++++++++++

class UaBrowsePath(UaType):
    def __init__(self, val=ffi.new("UA_BrowsePath*")):
        super().__init__(val)
        self._startingNode = UaNodeId(val.startingNode)
        self._relativePath = UaRelativePath(val.relativePath)
    

    @property
    def startingNode(self):
        return self._startingNode

    @startingNode.setter
    def startingNode(self, val):
        self._startingNode = val
        self._value.startingNode = val.value

    @property
    def relativePath(self):
        return self._relativePath

    @relativePath.setter
    def relativePath(self, val):
        self._relativePath = val
        self._value.relativePath = val.value

    def __str__(self):
        return ("UaBrowsePath:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_RelativePath.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowsePath:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_RelativePath.str_helper(n+1))
                

 
# +++++++++++++++++++ UaObjectAttributes +++++++++++++++++++++++

class UaObjectAttributes(UaType):
    def __init__(self, val=ffi.new("UA_ObjectAttributes*")):
        super().__init__(val)
        self._specifiedAttributes = UaUInt32(val.specifiedAttributes)
        self._displayName = UaLocalizedText(val.displayName)
        self._description = UaLocalizedText(val.description)
        self._writeMask = UaUInt32(val.writeMask)
        self._userWriteMask = UaUInt32(val.userWriteMask)
        self._eventNotifier = UaByte(val.eventNotifier)
    

    @property
    def specifiedAttributes(self):
        return self._specifiedAttributes

    @specifiedAttributes.setter
    def specifiedAttributes(self, val):
        self._specifiedAttributes = val
        self._value.specifiedAttributes = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, val):
        self._description = val
        self._value.description = val.value

    @property
    def writeMask(self):
        return self._writeMask

    @writeMask.setter
    def writeMask(self, val):
        self._writeMask = val
        self._value.writeMask = val.value

    @property
    def userWriteMask(self):
        return self._userWriteMask

    @userWriteMask.setter
    def userWriteMask(self, val):
        self._userWriteMask = val
        self._value.userWriteMask = val.value

    @property
    def eventNotifier(self):
        return self._eventNotifier

    @eventNotifier.setter
    def eventNotifier(self, val):
        self._eventNotifier = val
        self._value.eventNotifier = val.value

    def __str__(self):
        return ("UaObjectAttributes:\n" + 
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Byte.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaObjectAttributes:\n" + 
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1))
                

 
# +++++++++++++++++++ UaPublishRequest +++++++++++++++++++++++

class UaPublishRequest(UaType):
    def __init__(self, val=ffi.new("UA_PublishRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionAcknowledgementsSize = UaSizeT(val.subscriptionAcknowledgementsSize)
        self._*subscriptionAcknowledgements = UaSubscriptionAcknowledgement(val.*subscriptionAcknowledgements)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionAcknowledgementsSize(self):
        return self._subscriptionAcknowledgementsSize

    @subscriptionAcknowledgementsSize.setter
    def subscriptionAcknowledgementsSize(self, val):
        self._subscriptionAcknowledgementsSize = val
        self._value.subscriptionAcknowledgementsSize = val.value

    @property
    def *subscriptionAcknowledgements(self):
        return self._*subscriptionAcknowledgements

    @*subscriptionAcknowledgements.setter
    def *subscriptionAcknowledgements(self, val):
        self._*subscriptionAcknowledgements = val
        self._value.*subscriptionAcknowledgements = val.value

    def __str__(self):
        return ("UaPublishRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_SubscriptionAcknowledgement.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaPublishRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_SubscriptionAcknowledgement.str_helper(n+1))
                

 
# +++++++++++++++++++ UaFindServersRequest +++++++++++++++++++++++

class UaFindServersRequest(UaType):
    def __init__(self, val=ffi.new("UA_FindServersRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._endpointUrl = UaString(val.endpointUrl)
        self._localeIdsSize = UaSizeT(val.localeIdsSize)
        self._*localeIds = UaString(val.*localeIds)
        self._serverUrisSize = UaSizeT(val.serverUrisSize)
        self._*serverUris = UaString(val.*serverUris)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def endpointUrl(self):
        return self._endpointUrl

    @endpointUrl.setter
    def endpointUrl(self, val):
        self._endpointUrl = val
        self._value.endpointUrl = val.value

    @property
    def localeIdsSize(self):
        return self._localeIdsSize

    @localeIdsSize.setter
    def localeIdsSize(self, val):
        self._localeIdsSize = val
        self._value.localeIdsSize = val.value

    @property
    def *localeIds(self):
        return self._*localeIds

    @*localeIds.setter
    def *localeIds(self, val):
        self._*localeIds = val
        self._value.*localeIds = val.value

    @property
    def serverUrisSize(self):
        return self._serverUrisSize

    @serverUrisSize.setter
    def serverUrisSize(self, val):
        self._serverUrisSize = val
        self._value.serverUrisSize = val.value

    @property
    def *serverUris(self):
        return self._*serverUris

    @*serverUris.setter
    def *serverUris(self, val):
        self._*serverUris = val
        self._value.*serverUris = val.value

    def __str__(self):
        return ("UaFindServersRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaFindServersRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaReferenceDescription +++++++++++++++++++++++

class UaReferenceDescription(UaType):
    def __init__(self, val=ffi.new("UA_ReferenceDescription*")):
        super().__init__(val)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._isForward = UaBoolean(val.isForward)
        self._nodeId = UaExpandedNodeId(val.nodeId)
        self._browseName = UaQualifiedName(val.browseName)
        self._displayName = UaLocalizedText(val.displayName)
        self._nodeClass = UaNodeClass(val.nodeClass)
        self._typeDefinition = UaExpandedNodeId(val.typeDefinition)
    

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def isForward(self):
        return self._isForward

    @isForward.setter
    def isForward(self, val):
        self._isForward = val
        self._value.isForward = val.value

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def browseName(self):
        return self._browseName

    @browseName.setter
    def browseName(self, val):
        self._browseName = val
        self._value.browseName = val.value

    @property
    def displayName(self):
        return self._displayName

    @displayName.setter
    def displayName(self, val):
        self._displayName = val
        self._value.displayName = val.value

    @property
    def nodeClass(self):
        return self._nodeClass

    @nodeClass.setter
    def nodeClass(self, val):
        self._nodeClass = val
        self._value.nodeClass = val.value

    @property
    def typeDefinition(self):
        return self._typeDefinition

    @typeDefinition.setter
    def typeDefinition(self, val):
        self._typeDefinition = val
        self._value.typeDefinition = val.value

    def __str__(self):
        return ("UaReferenceDescription:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_QualifiedName.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_NodeClass.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaReferenceDescription:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_QualifiedName.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_NodeClass.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateSubscriptionRequest +++++++++++++++++++++++

class UaCreateSubscriptionRequest(UaType):
    def __init__(self, val=ffi.new("UA_CreateSubscriptionRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._requestedPublishingInterval = UaDouble(val.requestedPublishingInterval)
        self._requestedLifetimeCount = UaUInt32(val.requestedLifetimeCount)
        self._requestedMaxKeepAliveCount = UaUInt32(val.requestedMaxKeepAliveCount)
        self._maxNotificationsPerPublish = UaUInt32(val.maxNotificationsPerPublish)
        self._publishingEnabled = UaBoolean(val.publishingEnabled)
        self._priority = UaByte(val.priority)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def requestedPublishingInterval(self):
        return self._requestedPublishingInterval

    @requestedPublishingInterval.setter
    def requestedPublishingInterval(self, val):
        self._requestedPublishingInterval = val
        self._value.requestedPublishingInterval = val.value

    @property
    def requestedLifetimeCount(self):
        return self._requestedLifetimeCount

    @requestedLifetimeCount.setter
    def requestedLifetimeCount(self, val):
        self._requestedLifetimeCount = val
        self._value.requestedLifetimeCount = val.value

    @property
    def requestedMaxKeepAliveCount(self):
        return self._requestedMaxKeepAliveCount

    @requestedMaxKeepAliveCount.setter
    def requestedMaxKeepAliveCount(self, val):
        self._requestedMaxKeepAliveCount = val
        self._value.requestedMaxKeepAliveCount = val.value

    @property
    def maxNotificationsPerPublish(self):
        return self._maxNotificationsPerPublish

    @maxNotificationsPerPublish.setter
    def maxNotificationsPerPublish(self, val):
        self._maxNotificationsPerPublish = val
        self._value.maxNotificationsPerPublish = val.value

    @property
    def publishingEnabled(self):
        return self._publishingEnabled

    @publishingEnabled.setter
    def publishingEnabled(self, val):
        self._publishingEnabled = val
        self._value.publishingEnabled = val.value

    @property
    def priority(self):
        return self._priority

    @priority.setter
    def priority(self, val):
        self._priority = val
        self._value.priority = val.value

    def __str__(self):
        return ("UaCreateSubscriptionRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_Byte.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateSubscriptionRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCallResponse +++++++++++++++++++++++

class UaCallResponse(UaType):
    def __init__(self, val=ffi.new("UA_CallResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaCallMethodResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaCallResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_CallMethodResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCallResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_CallMethodResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteNodesResponse +++++++++++++++++++++++

class UaDeleteNodesResponse(UaType):
    def __init__(self, val=ffi.new("UA_DeleteNodesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaDeleteNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaModifyMonitoredItemsRequest +++++++++++++++++++++++

class UaModifyMonitoredItemsRequest(UaType):
    def __init__(self, val=ffi.new("UA_ModifyMonitoredItemsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._timestampsToReturn = UaTimestampsToReturn(val.timestampsToReturn)
        self._itemsToModifySize = UaSizeT(val.itemsToModifySize)
        self._*itemsToModify = UaMonitoredItemModifyRequest(val.*itemsToModify)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def timestampsToReturn(self):
        return self._timestampsToReturn

    @timestampsToReturn.setter
    def timestampsToReturn(self, val):
        self._timestampsToReturn = val
        self._value.timestampsToReturn = val.value

    @property
    def itemsToModifySize(self):
        return self._itemsToModifySize

    @itemsToModifySize.setter
    def itemsToModifySize(self, val):
        self._itemsToModifySize = val
        self._value.itemsToModifySize = val.value

    @property
    def *itemsToModify(self):
        return self._*itemsToModify

    @*itemsToModify.setter
    def *itemsToModify(self, val):
        self._*itemsToModify = val
        self._value.*itemsToModify = val.value

    def __str__(self):
        return ("UaModifyMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_TimestampsToReturn.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_MonitoredItemModifyRequest.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaModifyMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_TimestampsToReturn.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_MonitoredItemModifyRequest.str_helper(n+1))
                

 
# +++++++++++++++++++ UaServiceFault +++++++++++++++++++++++

class UaServiceFault(UaType):
    def __init__(self, val=ffi.new("UA_ServiceFault*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    def __str__(self):
        return ("UaServiceFault:\n" + 
                self._UA_ResponseHeader.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaServiceFault:\n" + 
                self._UA_ResponseHeader.str_helper(n+1))
                

 
# +++++++++++++++++++ UaPublishResponse +++++++++++++++++++++++

class UaPublishResponse(UaType):
    def __init__(self, val=ffi.new("UA_PublishResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._availableSequenceNumbersSize = UaSizeT(val.availableSequenceNumbersSize)
        self._*availableSequenceNumbers = UaUInt32(val.*availableSequenceNumbers)
        self._moreNotifications = UaBoolean(val.moreNotifications)
        self._notificationMessage = UaNotificationMessage(val.notificationMessage)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaStatusCode(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def availableSequenceNumbersSize(self):
        return self._availableSequenceNumbersSize

    @availableSequenceNumbersSize.setter
    def availableSequenceNumbersSize(self, val):
        self._availableSequenceNumbersSize = val
        self._value.availableSequenceNumbersSize = val.value

    @property
    def *availableSequenceNumbers(self):
        return self._*availableSequenceNumbers

    @*availableSequenceNumbers.setter
    def *availableSequenceNumbers(self, val):
        self._*availableSequenceNumbers = val
        self._value.*availableSequenceNumbers = val.value

    @property
    def moreNotifications(self):
        return self._moreNotifications

    @moreNotifications.setter
    def moreNotifications(self, val):
        self._moreNotifications = val
        self._value.moreNotifications = val.value

    @property
    def notificationMessage(self):
        return self._notificationMessage

    @notificationMessage.setter
    def notificationMessage(self, val):
        self._notificationMessage = val
        self._value.notificationMessage = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaPublishResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Boolean.str_helper(1) +
                self._UA_NotificationMessage.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaPublishResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1) +
                self._UA_NotificationMessage.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateMonitoredItemsRequest +++++++++++++++++++++++

class UaCreateMonitoredItemsRequest(UaType):
    def __init__(self, val=ffi.new("UA_CreateMonitoredItemsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._timestampsToReturn = UaTimestampsToReturn(val.timestampsToReturn)
        self._itemsToCreateSize = UaSizeT(val.itemsToCreateSize)
        self._*itemsToCreate = UaMonitoredItemCreateRequest(val.*itemsToCreate)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def timestampsToReturn(self):
        return self._timestampsToReturn

    @timestampsToReturn.setter
    def timestampsToReturn(self, val):
        self._timestampsToReturn = val
        self._value.timestampsToReturn = val.value

    @property
    def itemsToCreateSize(self):
        return self._itemsToCreateSize

    @itemsToCreateSize.setter
    def itemsToCreateSize(self, val):
        self._itemsToCreateSize = val
        self._value.itemsToCreateSize = val.value

    @property
    def *itemsToCreate(self):
        return self._*itemsToCreate

    @*itemsToCreate.setter
    def *itemsToCreate(self, val):
        self._*itemsToCreate = val
        self._value.*itemsToCreate = val.value

    def __str__(self):
        return ("UaCreateMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_TimestampsToReturn.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_MonitoredItemCreateRequest.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateMonitoredItemsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_TimestampsToReturn.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_MonitoredItemCreateRequest.str_helper(n+1))
                

 
# +++++++++++++++++++ UaOpenSecureChannelRequest +++++++++++++++++++++++

class UaOpenSecureChannelRequest(UaType):
    def __init__(self, val=ffi.new("UA_OpenSecureChannelRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._clientProtocolVersion = UaUInt32(val.clientProtocolVersion)
        self._requestType = UaSecurityTokenRequestType(val.requestType)
        self._securityMode = UaMessageSecurityMode(val.securityMode)
        self._clientNonce = UaByteString(val.clientNonce)
        self._requestedLifetime = UaUInt32(val.requestedLifetime)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def clientProtocolVersion(self):
        return self._clientProtocolVersion

    @clientProtocolVersion.setter
    def clientProtocolVersion(self, val):
        self._clientProtocolVersion = val
        self._value.clientProtocolVersion = val.value

    @property
    def requestType(self):
        return self._requestType

    @requestType.setter
    def requestType(self, val):
        self._requestType = val
        self._value.requestType = val.value

    @property
    def securityMode(self):
        return self._securityMode

    @securityMode.setter
    def securityMode(self, val):
        self._securityMode = val
        self._value.securityMode = val.value

    @property
    def clientNonce(self):
        return self._clientNonce

    @clientNonce.setter
    def clientNonce(self, val):
        self._clientNonce = val
        self._value.clientNonce = val.value

    @property
    def requestedLifetime(self):
        return self._requestedLifetime

    @requestedLifetime.setter
    def requestedLifetime(self, val):
        self._requestedLifetime = val
        self._value.requestedLifetime = val.value

    def __str__(self):
        return ("UaOpenSecureChannelRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_SecurityTokenRequestType.str_helper(1) +
                self._UA_MessageSecurityMode.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaOpenSecureChannelRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_SecurityTokenRequestType.str_helper(n+1) +
                self._UA_MessageSecurityMode.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCloseSessionRequest +++++++++++++++++++++++

class UaCloseSessionRequest(UaType):
    def __init__(self, val=ffi.new("UA_CloseSessionRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._deleteSubscriptions = UaBoolean(val.deleteSubscriptions)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def deleteSubscriptions(self):
        return self._deleteSubscriptions

    @deleteSubscriptions.setter
    def deleteSubscriptions(self, val):
        self._deleteSubscriptions = val
        self._value.deleteSubscriptions = val.value

    def __str__(self):
        return ("UaCloseSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_Boolean.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCloseSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_Boolean.str_helper(n+1))
                

 
# +++++++++++++++++++ UaSetTriggeringRequest +++++++++++++++++++++++

class UaSetTriggeringRequest(UaType):
    def __init__(self, val=ffi.new("UA_SetTriggeringRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._subscriptionId = UaUInt32(val.subscriptionId)
        self._triggeringItemId = UaUInt32(val.triggeringItemId)
        self._linksToAddSize = UaSizeT(val.linksToAddSize)
        self._*linksToAdd = UaUInt32(val.*linksToAdd)
        self._linksToRemoveSize = UaSizeT(val.linksToRemoveSize)
        self._*linksToRemove = UaUInt32(val.*linksToRemove)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, val):
        self._subscriptionId = val
        self._value.subscriptionId = val.value

    @property
    def triggeringItemId(self):
        return self._triggeringItemId

    @triggeringItemId.setter
    def triggeringItemId(self, val):
        self._triggeringItemId = val
        self._value.triggeringItemId = val.value

    @property
    def linksToAddSize(self):
        return self._linksToAddSize

    @linksToAddSize.setter
    def linksToAddSize(self, val):
        self._linksToAddSize = val
        self._value.linksToAddSize = val.value

    @property
    def *linksToAdd(self):
        return self._*linksToAdd

    @*linksToAdd.setter
    def *linksToAdd(self, val):
        self._*linksToAdd = val
        self._value.*linksToAdd = val.value

    @property
    def linksToRemoveSize(self):
        return self._linksToRemoveSize

    @linksToRemoveSize.setter
    def linksToRemoveSize(self, val):
        self._linksToRemoveSize = val
        self._value.linksToRemoveSize = val.value

    @property
    def *linksToRemove(self):
        return self._*linksToRemove

    @*linksToRemove.setter
    def *linksToRemove(self, val):
        self._*linksToRemove = val
        self._value.*linksToRemove = val.value

    def __str__(self):
        return ("UaSetTriggeringRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaSetTriggeringRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseResult +++++++++++++++++++++++

class UaBrowseResult(UaType):
    def __init__(self, val=ffi.new("UA_BrowseResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._continuationPoint = UaByteString(val.continuationPoint)
        self._referencesSize = UaSizeT(val.referencesSize)
        self._*references = UaReferenceDescription(val.*references)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def continuationPoint(self):
        return self._continuationPoint

    @continuationPoint.setter
    def continuationPoint(self, val):
        self._continuationPoint = val
        self._value.continuationPoint = val.value

    @property
    def referencesSize(self):
        return self._referencesSize

    @referencesSize.setter
    def referencesSize(self, val):
        self._referencesSize = val
        self._value.referencesSize = val.value

    @property
    def *references(self):
        return self._*references

    @*references.setter
    def *references(self, val):
        self._*references = val
        self._value.*references = val.value

    def __str__(self):
        return ("UaBrowseResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ReferenceDescription.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ReferenceDescription.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddReferencesRequest +++++++++++++++++++++++

class UaAddReferencesRequest(UaType):
    def __init__(self, val=ffi.new("UA_AddReferencesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._referencesToAddSize = UaSizeT(val.referencesToAddSize)
        self._*referencesToAdd = UaAddReferencesItem(val.*referencesToAdd)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def referencesToAddSize(self):
        return self._referencesToAddSize

    @referencesToAddSize.setter
    def referencesToAddSize(self, val):
        self._referencesToAddSize = val
        self._value.referencesToAddSize = val.value

    @property
    def *referencesToAdd(self):
        return self._*referencesToAdd

    @*referencesToAdd.setter
    def *referencesToAdd(self, val):
        self._*referencesToAdd = val
        self._value.*referencesToAdd = val.value

    def __str__(self):
        return ("UaAddReferencesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_AddReferencesItem.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddReferencesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_AddReferencesItem.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddNodesItem +++++++++++++++++++++++

class UaAddNodesItem(UaType):
    def __init__(self, val=ffi.new("UA_AddNodesItem*")):
        super().__init__(val)
        self._parentNodeId = UaExpandedNodeId(val.parentNodeId)
        self._referenceTypeId = UaNodeId(val.referenceTypeId)
        self._requestedNewNodeId = UaExpandedNodeId(val.requestedNewNodeId)
        self._browseName = UaQualifiedName(val.browseName)
        self._nodeClass = UaNodeClass(val.nodeClass)
        self._nodeAttributes = UaExtensionObject(val.nodeAttributes)
        self._typeDefinition = UaExpandedNodeId(val.typeDefinition)
    

    @property
    def parentNodeId(self):
        return self._parentNodeId

    @parentNodeId.setter
    def parentNodeId(self, val):
        self._parentNodeId = val
        self._value.parentNodeId = val.value

    @property
    def referenceTypeId(self):
        return self._referenceTypeId

    @referenceTypeId.setter
    def referenceTypeId(self, val):
        self._referenceTypeId = val
        self._value.referenceTypeId = val.value

    @property
    def requestedNewNodeId(self):
        return self._requestedNewNodeId

    @requestedNewNodeId.setter
    def requestedNewNodeId(self, val):
        self._requestedNewNodeId = val
        self._value.requestedNewNodeId = val.value

    @property
    def browseName(self):
        return self._browseName

    @browseName.setter
    def browseName(self, val):
        self._browseName = val
        self._value.browseName = val.value

    @property
    def nodeClass(self):
        return self._nodeClass

    @nodeClass.setter
    def nodeClass(self, val):
        self._nodeClass = val
        self._value.nodeClass = val.value

    @property
    def nodeAttributes(self):
        return self._nodeAttributes

    @nodeAttributes.setter
    def nodeAttributes(self, val):
        self._nodeAttributes = val
        self._value.nodeAttributes = val.value

    @property
    def typeDefinition(self):
        return self._typeDefinition

    @typeDefinition.setter
    def typeDefinition(self, val):
        self._typeDefinition = val
        self._value.typeDefinition = val.value

    def __str__(self):
        return ("UaAddNodesItem:\n" + 
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1) +
                self._UA_QualifiedName.str_helper(1) +
                self._UA_NodeClass.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1) +
                self._UA_ExpandedNodeId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddNodesItem:\n" + 
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1) +
                self._UA_QualifiedName.str_helper(n+1) +
                self._UA_NodeClass.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1) +
                self._UA_ExpandedNodeId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaServerStatusDataType +++++++++++++++++++++++

class UaServerStatusDataType(UaType):
    def __init__(self, val=ffi.new("UA_ServerStatusDataType*")):
        super().__init__(val)
        self._startTime = UaDateTime(val.startTime)
        self._currentTime = UaDateTime(val.currentTime)
        self._state = UaServerState(val.state)
        self._buildInfo = UaBuildInfo(val.buildInfo)
        self._secondsTillShutdown = UaUInt32(val.secondsTillShutdown)
        self._shutdownReason = UaLocalizedText(val.shutdownReason)
    

    @property
    def startTime(self):
        return self._startTime

    @startTime.setter
    def startTime(self, val):
        self._startTime = val
        self._value.startTime = val.value

    @property
    def currentTime(self):
        return self._currentTime

    @currentTime.setter
    def currentTime(self, val):
        self._currentTime = val
        self._value.currentTime = val.value

    @property
    def state(self):
        return self._state

    @state.setter
    def state(self, val):
        self._state = val
        self._value.state = val.value

    @property
    def buildInfo(self):
        return self._buildInfo

    @buildInfo.setter
    def buildInfo(self, val):
        self._buildInfo = val
        self._value.buildInfo = val.value

    @property
    def secondsTillShutdown(self):
        return self._secondsTillShutdown

    @secondsTillShutdown.setter
    def secondsTillShutdown(self, val):
        self._secondsTillShutdown = val
        self._value.secondsTillShutdown = val.value

    @property
    def shutdownReason(self):
        return self._shutdownReason

    @shutdownReason.setter
    def shutdownReason(self, val):
        self._shutdownReason = val
        self._value.shutdownReason = val.value

    def __str__(self):
        return ("UaServerStatusDataType:\n" + 
                self._UA_DateTime.str_helper(1) +
                self._UA_DateTime.str_helper(1) +
                self._UA_ServerState.str_helper(1) +
                self._UA_BuildInfo.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_LocalizedText.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaServerStatusDataType:\n" + 
                self._UA_DateTime.str_helper(n+1) +
                self._UA_DateTime.str_helper(n+1) +
                self._UA_ServerState.str_helper(n+1) +
                self._UA_BuildInfo.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseNextResponse +++++++++++++++++++++++

class UaBrowseNextResponse(UaType):
    def __init__(self, val=ffi.new("UA_BrowseNextResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaBrowseResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaBrowseNextResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowseResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseNextResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowseResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAxisInformation +++++++++++++++++++++++

class UaAxisInformation(UaType):
    def __init__(self, val=ffi.new("UA_AxisInformation*")):
        super().__init__(val)
        self._engineeringUnits = UaEUInformation(val.engineeringUnits)
        self._eURange = UaRange(val.eURange)
        self._title = UaLocalizedText(val.title)
        self._axisScaleType = UaAxisScaleEnumeration(val.axisScaleType)
        self._axisStepsSize = UaSizeT(val.axisStepsSize)
        self._*axisSteps = UaDouble(val.*axisSteps)
    

    @property
    def engineeringUnits(self):
        return self._engineeringUnits

    @engineeringUnits.setter
    def engineeringUnits(self, val):
        self._engineeringUnits = val
        self._value.engineeringUnits = val.value

    @property
    def eURange(self):
        return self._eURange

    @eURange.setter
    def eURange(self, val):
        self._eURange = val
        self._value.eURange = val.value

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, val):
        self._title = val
        self._value.title = val.value

    @property
    def axisScaleType(self):
        return self._axisScaleType

    @axisScaleType.setter
    def axisScaleType(self, val):
        self._axisScaleType = val
        self._value.axisScaleType = val.value

    @property
    def axisStepsSize(self):
        return self._axisStepsSize

    @axisStepsSize.setter
    def axisStepsSize(self, val):
        self._axisStepsSize = val
        self._value.axisStepsSize = val.value

    @property
    def *axisSteps(self):
        return self._*axisSteps

    @*axisSteps.setter
    def *axisSteps(self, val):
        self._*axisSteps = val
        self._value.*axisSteps = val.value

    def __str__(self):
        return ("UaAxisInformation:\n" + 
                self._UA_EUInformation.str_helper(1) +
                self._UA_Range.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_AxisScaleEnumeration.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_Double.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAxisInformation:\n" + 
                self._UA_EUInformation.str_helper(n+1) +
                self._UA_Range.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_AxisScaleEnumeration.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_Double.str_helper(n+1))
                

 
# +++++++++++++++++++ UaApplicationDescription +++++++++++++++++++++++

class UaApplicationDescription(UaType):
    def __init__(self, val=ffi.new("UA_ApplicationDescription*")):
        super().__init__(val)
        self._applicationUri = UaString(val.applicationUri)
        self._productUri = UaString(val.productUri)
        self._applicationName = UaLocalizedText(val.applicationName)
        self._applicationType = UaApplicationType(val.applicationType)
        self._gatewayServerUri = UaString(val.gatewayServerUri)
        self._discoveryProfileUri = UaString(val.discoveryProfileUri)
        self._discoveryUrlsSize = UaSizeT(val.discoveryUrlsSize)
        self._*discoveryUrls = UaString(val.*discoveryUrls)
    

    @property
    def applicationUri(self):
        return self._applicationUri

    @applicationUri.setter
    def applicationUri(self, val):
        self._applicationUri = val
        self._value.applicationUri = val.value

    @property
    def productUri(self):
        return self._productUri

    @productUri.setter
    def productUri(self, val):
        self._productUri = val
        self._value.productUri = val.value

    @property
    def applicationName(self):
        return self._applicationName

    @applicationName.setter
    def applicationName(self, val):
        self._applicationName = val
        self._value.applicationName = val.value

    @property
    def applicationType(self):
        return self._applicationType

    @applicationType.setter
    def applicationType(self, val):
        self._applicationType = val
        self._value.applicationType = val.value

    @property
    def gatewayServerUri(self):
        return self._gatewayServerUri

    @gatewayServerUri.setter
    def gatewayServerUri(self, val):
        self._gatewayServerUri = val
        self._value.gatewayServerUri = val.value

    @property
    def discoveryProfileUri(self):
        return self._discoveryProfileUri

    @discoveryProfileUri.setter
    def discoveryProfileUri(self, val):
        self._discoveryProfileUri = val
        self._value.discoveryProfileUri = val.value

    @property
    def discoveryUrlsSize(self):
        return self._discoveryUrlsSize

    @discoveryUrlsSize.setter
    def discoveryUrlsSize(self, val):
        self._discoveryUrlsSize = val
        self._value.discoveryUrlsSize = val.value

    @property
    def *discoveryUrls(self):
        return self._*discoveryUrls

    @*discoveryUrls.setter
    def *discoveryUrls(self, val):
        self._*discoveryUrls = val
        self._value.*discoveryUrls = val.value

    def __str__(self):
        return ("UaApplicationDescription:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_LocalizedText.str_helper(1) +
                self._UA_ApplicationType.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaApplicationDescription:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_LocalizedText.str_helper(n+1) +
                self._UA_ApplicationType.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaReadRequest +++++++++++++++++++++++

class UaReadRequest(UaType):
    def __init__(self, val=ffi.new("UA_ReadRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._maxAge = UaDouble(val.maxAge)
        self._timestampsToReturn = UaTimestampsToReturn(val.timestampsToReturn)
        self._nodesToReadSize = UaSizeT(val.nodesToReadSize)
        self._*nodesToRead = UaReadValueId(val.*nodesToRead)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def maxAge(self):
        return self._maxAge

    @maxAge.setter
    def maxAge(self, val):
        self._maxAge = val
        self._value.maxAge = val.value

    @property
    def timestampsToReturn(self):
        return self._timestampsToReturn

    @timestampsToReturn.setter
    def timestampsToReturn(self, val):
        self._timestampsToReturn = val
        self._value.timestampsToReturn = val.value

    @property
    def nodesToReadSize(self):
        return self._nodesToReadSize

    @nodesToReadSize.setter
    def nodesToReadSize(self, val):
        self._nodesToReadSize = val
        self._value.nodesToReadSize = val.value

    @property
    def *nodesToRead(self):
        return self._*nodesToRead

    @*nodesToRead.setter
    def *nodesToRead(self, val):
        self._*nodesToRead = val
        self._value.*nodesToRead = val.value

    def __str__(self):
        return ("UaReadRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_TimestampsToReturn.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ReadValueId.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaReadRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_TimestampsToReturn.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ReadValueId.str_helper(n+1))
                

 
# +++++++++++++++++++ UaActivateSessionRequest +++++++++++++++++++++++

class UaActivateSessionRequest(UaType):
    def __init__(self, val=ffi.new("UA_ActivateSessionRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._clientSignature = UaSignatureData(val.clientSignature)
        self._clientSoftwareCertificatesSize = UaSizeT(val.clientSoftwareCertificatesSize)
        self._*clientSoftwareCertificates = UaSignedSoftwareCertificate(val.*clientSoftwareCertificates)
        self._localeIdsSize = UaSizeT(val.localeIdsSize)
        self._*localeIds = UaString(val.*localeIds)
        self._userIdentityToken = UaExtensionObject(val.userIdentityToken)
        self._userTokenSignature = UaSignatureData(val.userTokenSignature)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def clientSignature(self):
        return self._clientSignature

    @clientSignature.setter
    def clientSignature(self, val):
        self._clientSignature = val
        self._value.clientSignature = val.value

    @property
    def clientSoftwareCertificatesSize(self):
        return self._clientSoftwareCertificatesSize

    @clientSoftwareCertificatesSize.setter
    def clientSoftwareCertificatesSize(self, val):
        self._clientSoftwareCertificatesSize = val
        self._value.clientSoftwareCertificatesSize = val.value

    @property
    def *clientSoftwareCertificates(self):
        return self._*clientSoftwareCertificates

    @*clientSoftwareCertificates.setter
    def *clientSoftwareCertificates(self, val):
        self._*clientSoftwareCertificates = val
        self._value.*clientSoftwareCertificates = val.value

    @property
    def localeIdsSize(self):
        return self._localeIdsSize

    @localeIdsSize.setter
    def localeIdsSize(self, val):
        self._localeIdsSize = val
        self._value.localeIdsSize = val.value

    @property
    def *localeIds(self):
        return self._*localeIds

    @*localeIds.setter
    def *localeIds(self, val):
        self._*localeIds = val
        self._value.*localeIds = val.value

    @property
    def userIdentityToken(self):
        return self._userIdentityToken

    @userIdentityToken.setter
    def userIdentityToken(self, val):
        self._userIdentityToken = val
        self._value.userIdentityToken = val.value

    @property
    def userTokenSignature(self):
        return self._userTokenSignature

    @userTokenSignature.setter
    def userTokenSignature(self, val):
        self._userTokenSignature = val
        self._value.userTokenSignature = val.value

    def __str__(self):
        return ("UaActivateSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_SignatureData.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_SignedSoftwareCertificate.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1) +
                self._UA_SignatureData.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaActivateSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_SignatureData.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_SignedSoftwareCertificate.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1) +
                self._UA_SignatureData.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowsePathResult +++++++++++++++++++++++

class UaBrowsePathResult(UaType):
    def __init__(self, val=ffi.new("UA_BrowsePathResult*")):
        super().__init__(val)
        self._statusCode = UaStatusCode(val.statusCode)
        self._targetsSize = UaSizeT(val.targetsSize)
        self._*targets = UaBrowsePathTarget(val.*targets)
    

    @property
    def statusCode(self):
        return self._statusCode

    @statusCode.setter
    def statusCode(self, val):
        self._statusCode = val
        self._value.statusCode = val.value

    @property
    def targetsSize(self):
        return self._targetsSize

    @targetsSize.setter
    def targetsSize(self, val):
        self._targetsSize = val
        self._value.targetsSize = val.value

    @property
    def *targets(self):
        return self._*targets

    @*targets.setter
    def *targets(self, val):
        self._*targets = val
        self._value.*targets = val.value

    def __str__(self):
        return ("UaBrowsePathResult:\n" + 
                self._UA_StatusCode.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowsePathTarget.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowsePathResult:\n" + 
                self._UA_StatusCode.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowsePathTarget.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddNodesRequest +++++++++++++++++++++++

class UaAddNodesRequest(UaType):
    def __init__(self, val=ffi.new("UA_AddNodesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._nodesToAddSize = UaSizeT(val.nodesToAddSize)
        self._*nodesToAdd = UaAddNodesItem(val.*nodesToAdd)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def nodesToAddSize(self):
        return self._nodesToAddSize

    @nodesToAddSize.setter
    def nodesToAddSize(self, val):
        self._nodesToAddSize = val
        self._value.nodesToAddSize = val.value

    @property
    def *nodesToAdd(self):
        return self._*nodesToAdd

    @*nodesToAdd.setter
    def *nodesToAdd(self, val):
        self._*nodesToAdd = val
        self._value.*nodesToAdd = val.value

    def __str__(self):
        return ("UaAddNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_AddNodesItem.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddNodesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_AddNodesItem.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseRequest +++++++++++++++++++++++

class UaBrowseRequest(UaType):
    def __init__(self, val=ffi.new("UA_BrowseRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._view = UaViewDescription(val.view)
        self._requestedMaxReferencesPerNode = UaUInt32(val.requestedMaxReferencesPerNode)
        self._nodesToBrowseSize = UaSizeT(val.nodesToBrowseSize)
        self._*nodesToBrowse = UaBrowseDescription(val.*nodesToBrowse)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def view(self):
        return self._view

    @view.setter
    def view(self, val):
        self._view = val
        self._value.view = val.value

    @property
    def requestedMaxReferencesPerNode(self):
        return self._requestedMaxReferencesPerNode

    @requestedMaxReferencesPerNode.setter
    def requestedMaxReferencesPerNode(self, val):
        self._requestedMaxReferencesPerNode = val
        self._value.requestedMaxReferencesPerNode = val.value

    @property
    def nodesToBrowseSize(self):
        return self._nodesToBrowseSize

    @nodesToBrowseSize.setter
    def nodesToBrowseSize(self, val):
        self._nodesToBrowseSize = val
        self._value.nodesToBrowseSize = val.value

    @property
    def *nodesToBrowse(self):
        return self._*nodesToBrowse

    @*nodesToBrowse.setter
    def *nodesToBrowse(self, val):
        self._*nodesToBrowse = val
        self._value.*nodesToBrowse = val.value

    def __str__(self):
        return ("UaBrowseRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_ViewDescription.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowseDescription.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_ViewDescription.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowseDescription.str_helper(n+1))
                

 
# +++++++++++++++++++ UaWriteRequest +++++++++++++++++++++++

class UaWriteRequest(UaType):
    def __init__(self, val=ffi.new("UA_WriteRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._nodesToWriteSize = UaSizeT(val.nodesToWriteSize)
        self._*nodesToWrite = UaWriteValue(val.*nodesToWrite)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def nodesToWriteSize(self):
        return self._nodesToWriteSize

    @nodesToWriteSize.setter
    def nodesToWriteSize(self, val):
        self._nodesToWriteSize = val
        self._value.nodesToWriteSize = val.value

    @property
    def *nodesToWrite(self):
        return self._*nodesToWrite

    @*nodesToWrite.setter
    def *nodesToWrite(self, val):
        self._*nodesToWrite = val
        self._value.*nodesToWrite = val.value

    def __str__(self):
        return ("UaWriteRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_WriteValue.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaWriteRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_WriteValue.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAddNodesResponse +++++++++++++++++++++++

class UaAddNodesResponse(UaType):
    def __init__(self, val=ffi.new("UA_AddNodesResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaAddNodesResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaAddNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_AddNodesResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAddNodesResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_AddNodesResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaAttributeOperand +++++++++++++++++++++++

class UaAttributeOperand(UaType):
    def __init__(self, val=ffi.new("UA_AttributeOperand*")):
        super().__init__(val)
        self._nodeId = UaNodeId(val.nodeId)
        self._alias = UaString(val.alias)
        self._browsePath = UaRelativePath(val.browsePath)
        self._attributeId = UaUInt32(val.attributeId)
        self._indexRange = UaString(val.indexRange)
    

    @property
    def nodeId(self):
        return self._nodeId

    @nodeId.setter
    def nodeId(self, val):
        self._nodeId = val
        self._value.nodeId = val.value

    @property
    def alias(self):
        return self._alias

    @alias.setter
    def alias(self, val):
        self._alias = val
        self._value.alias = val.value

    @property
    def browsePath(self):
        return self._browsePath

    @browsePath.setter
    def browsePath(self, val):
        self._browsePath = val
        self._value.browsePath = val.value

    @property
    def attributeId(self):
        return self._attributeId

    @attributeId.setter
    def attributeId(self, val):
        self._attributeId = val
        self._value.attributeId = val.value

    @property
    def indexRange(self):
        return self._indexRange

    @indexRange.setter
    def indexRange(self, val):
        self._indexRange = val
        self._value.indexRange = val.value

    def __str__(self):
        return ("UaAttributeOperand:\n" + 
                self._UA_NodeId.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_RelativePath.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_String.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaAttributeOperand:\n" + 
                self._UA_NodeId.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_RelativePath.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_String.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDataChangeFilter +++++++++++++++++++++++

class UaDataChangeFilter(UaType):
    def __init__(self, val=ffi.new("UA_DataChangeFilter*")):
        super().__init__(val)
        self._trigger = UaDataChangeTrigger(val.trigger)
        self._deadbandType = UaUInt32(val.deadbandType)
        self._deadbandValue = UaDouble(val.deadbandValue)
    

    @property
    def trigger(self):
        return self._trigger

    @trigger.setter
    def trigger(self, val):
        self._trigger = val
        self._value.trigger = val.value

    @property
    def deadbandType(self):
        return self._deadbandType

    @deadbandType.setter
    def deadbandType(self, val):
        self._deadbandType = val
        self._value.deadbandType = val.value

    @property
    def deadbandValue(self):
        return self._deadbandValue

    @deadbandValue.setter
    def deadbandValue(self, val):
        self._deadbandValue = val
        self._value.deadbandValue = val.value

    def __str__(self):
        return ("UaDataChangeFilter:\n" + 
                self._UA_DataChangeTrigger.str_helper(1) +
                self._UA_UInt32.str_helper(1) +
                self._UA_Double.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDataChangeFilter:\n" + 
                self._UA_DataChangeTrigger.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1) +
                self._UA_Double.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEndpointDescription +++++++++++++++++++++++

class UaEndpointDescription(UaType):
    def __init__(self, val=ffi.new("UA_EndpointDescription*")):
        super().__init__(val)
        self._endpointUrl = UaString(val.endpointUrl)
        self._server = UaApplicationDescription(val.server)
        self._serverCertificate = UaByteString(val.serverCertificate)
        self._securityMode = UaMessageSecurityMode(val.securityMode)
        self._securityPolicyUri = UaString(val.securityPolicyUri)
        self._userIdentityTokensSize = UaSizeT(val.userIdentityTokensSize)
        self._*userIdentityTokens = UaUserTokenPolicy(val.*userIdentityTokens)
        self._transportProfileUri = UaString(val.transportProfileUri)
        self._securityLevel = UaByte(val.securityLevel)
    

    @property
    def endpointUrl(self):
        return self._endpointUrl

    @endpointUrl.setter
    def endpointUrl(self, val):
        self._endpointUrl = val
        self._value.endpointUrl = val.value

    @property
    def server(self):
        return self._server

    @server.setter
    def server(self, val):
        self._server = val
        self._value.server = val.value

    @property
    def serverCertificate(self):
        return self._serverCertificate

    @serverCertificate.setter
    def serverCertificate(self, val):
        self._serverCertificate = val
        self._value.serverCertificate = val.value

    @property
    def securityMode(self):
        return self._securityMode

    @securityMode.setter
    def securityMode(self, val):
        self._securityMode = val
        self._value.securityMode = val.value

    @property
    def securityPolicyUri(self):
        return self._securityPolicyUri

    @securityPolicyUri.setter
    def securityPolicyUri(self, val):
        self._securityPolicyUri = val
        self._value.securityPolicyUri = val.value

    @property
    def userIdentityTokensSize(self):
        return self._userIdentityTokensSize

    @userIdentityTokensSize.setter
    def userIdentityTokensSize(self, val):
        self._userIdentityTokensSize = val
        self._value.userIdentityTokensSize = val.value

    @property
    def *userIdentityTokens(self):
        return self._*userIdentityTokens

    @*userIdentityTokens.setter
    def *userIdentityTokens(self, val):
        self._*userIdentityTokens = val
        self._value.*userIdentityTokens = val.value

    @property
    def transportProfileUri(self):
        return self._transportProfileUri

    @transportProfileUri.setter
    def transportProfileUri(self, val):
        self._transportProfileUri = val
        self._value.transportProfileUri = val.value

    @property
    def securityLevel(self):
        return self._securityLevel

    @securityLevel.setter
    def securityLevel(self, val):
        self._securityLevel = val
        self._value.securityLevel = val.value

    def __str__(self):
        return ("UaEndpointDescription:\n" + 
                self._UA_String.str_helper(1) +
                self._UA_ApplicationDescription.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_MessageSecurityMode.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_UserTokenPolicy.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_Byte.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEndpointDescription:\n" + 
                self._UA_String.str_helper(n+1) +
                self._UA_ApplicationDescription.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_MessageSecurityMode.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_UserTokenPolicy.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_Byte.str_helper(n+1))
                

 
# +++++++++++++++++++ UaDeleteReferencesRequest +++++++++++++++++++++++

class UaDeleteReferencesRequest(UaType):
    def __init__(self, val=ffi.new("UA_DeleteReferencesRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._referencesToDeleteSize = UaSizeT(val.referencesToDeleteSize)
        self._*referencesToDelete = UaDeleteReferencesItem(val.*referencesToDelete)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def referencesToDeleteSize(self):
        return self._referencesToDeleteSize

    @referencesToDeleteSize.setter
    def referencesToDeleteSize(self, val):
        self._referencesToDeleteSize = val
        self._value.referencesToDeleteSize = val.value

    @property
    def *referencesToDelete(self):
        return self._*referencesToDelete

    @*referencesToDelete.setter
    def *referencesToDelete(self, val):
        self._*referencesToDelete = val
        self._value.*referencesToDelete = val.value

    def __str__(self):
        return ("UaDeleteReferencesRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DeleteReferencesItem.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaDeleteReferencesRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DeleteReferencesItem.str_helper(n+1))
                

 
# +++++++++++++++++++ UaTranslateBrowsePathsToNodeIdsRequest +++++++++++++++++++++++

class UaTranslateBrowsePathsToNodeIdsRequest(UaType):
    def __init__(self, val=ffi.new("UA_TranslateBrowsePathsToNodeIdsRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._browsePathsSize = UaSizeT(val.browsePathsSize)
        self._*browsePaths = UaBrowsePath(val.*browsePaths)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def browsePathsSize(self):
        return self._browsePathsSize

    @browsePathsSize.setter
    def browsePathsSize(self, val):
        self._browsePathsSize = val
        self._value.browsePathsSize = val.value

    @property
    def *browsePaths(self):
        return self._*browsePaths

    @*browsePaths.setter
    def *browsePaths(self, val):
        self._*browsePaths = val
        self._value.*browsePaths = val.value

    def __str__(self):
        return ("UaTranslateBrowsePathsToNodeIdsRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowsePath.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaTranslateBrowsePathsToNodeIdsRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowsePath.str_helper(n+1))
                

 
# +++++++++++++++++++ UaFindServersResponse +++++++++++++++++++++++

class UaFindServersResponse(UaType):
    def __init__(self, val=ffi.new("UA_FindServersResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._serversSize = UaSizeT(val.serversSize)
        self._*servers = UaApplicationDescription(val.*servers)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def serversSize(self):
        return self._serversSize

    @serversSize.setter
    def serversSize(self, val):
        self._serversSize = val
        self._value.serversSize = val.value

    @property
    def *servers(self):
        return self._*servers

    @*servers.setter
    def *servers(self, val):
        self._*servers = val
        self._value.*servers = val.value

    def __str__(self):
        return ("UaFindServersResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ApplicationDescription.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaFindServersResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ApplicationDescription.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateSessionRequest +++++++++++++++++++++++

class UaCreateSessionRequest(UaType):
    def __init__(self, val=ffi.new("UA_CreateSessionRequest*")):
        super().__init__(val)
        self._requestHeader = UaRequestHeader(val.requestHeader)
        self._clientDescription = UaApplicationDescription(val.clientDescription)
        self._serverUri = UaString(val.serverUri)
        self._endpointUrl = UaString(val.endpointUrl)
        self._sessionName = UaString(val.sessionName)
        self._clientNonce = UaByteString(val.clientNonce)
        self._clientCertificate = UaByteString(val.clientCertificate)
        self._requestedSessionTimeout = UaDouble(val.requestedSessionTimeout)
        self._maxResponseMessageSize = UaUInt32(val.maxResponseMessageSize)
    

    @property
    def requestHeader(self):
        return self._requestHeader

    @requestHeader.setter
    def requestHeader(self, val):
        self._requestHeader = val
        self._value.requestHeader = val.value

    @property
    def clientDescription(self):
        return self._clientDescription

    @clientDescription.setter
    def clientDescription(self, val):
        self._clientDescription = val
        self._value.clientDescription = val.value

    @property
    def serverUri(self):
        return self._serverUri

    @serverUri.setter
    def serverUri(self, val):
        self._serverUri = val
        self._value.serverUri = val.value

    @property
    def endpointUrl(self):
        return self._endpointUrl

    @endpointUrl.setter
    def endpointUrl(self, val):
        self._endpointUrl = val
        self._value.endpointUrl = val.value

    @property
    def sessionName(self):
        return self._sessionName

    @sessionName.setter
    def sessionName(self, val):
        self._sessionName = val
        self._value.sessionName = val.value

    @property
    def clientNonce(self):
        return self._clientNonce

    @clientNonce.setter
    def clientNonce(self, val):
        self._clientNonce = val
        self._value.clientNonce = val.value

    @property
    def clientCertificate(self):
        return self._clientCertificate

    @clientCertificate.setter
    def clientCertificate(self, val):
        self._clientCertificate = val
        self._value.clientCertificate = val.value

    @property
    def requestedSessionTimeout(self):
        return self._requestedSessionTimeout

    @requestedSessionTimeout.setter
    def requestedSessionTimeout(self, val):
        self._requestedSessionTimeout = val
        self._value.requestedSessionTimeout = val.value

    @property
    def maxResponseMessageSize(self):
        return self._maxResponseMessageSize

    @maxResponseMessageSize.setter
    def maxResponseMessageSize(self, val):
        self._maxResponseMessageSize = val
        self._value.maxResponseMessageSize = val.value

    def __str__(self):
        return ("UaCreateSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(1) +
                self._UA_ApplicationDescription.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_String.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateSessionRequest:\n" + 
                self._UA_RequestHeader.str_helper(n+1) +
                self._UA_ApplicationDescription.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_String.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaContentFilterElement +++++++++++++++++++++++

class UaContentFilterElement(UaType):
    def __init__(self, val=ffi.new("UA_ContentFilterElement*")):
        super().__init__(val)
        self._filterOperator = UaFilterOperator(val.filterOperator)
        self._filterOperandsSize = UaSizeT(val.filterOperandsSize)
        self._*filterOperands = UaExtensionObject(val.*filterOperands)
    

    @property
    def filterOperator(self):
        return self._filterOperator

    @filterOperator.setter
    def filterOperator(self, val):
        self._filterOperator = val
        self._value.filterOperator = val.value

    @property
    def filterOperandsSize(self):
        return self._filterOperandsSize

    @filterOperandsSize.setter
    def filterOperandsSize(self, val):
        self._filterOperandsSize = val
        self._value.filterOperandsSize = val.value

    @property
    def *filterOperands(self):
        return self._*filterOperands

    @*filterOperands.setter
    def *filterOperands(self, val):
        self._*filterOperands = val
        self._value.*filterOperands = val.value

    def __str__(self):
        return ("UaContentFilterElement:\n" + 
                self._UA_FilterOperator.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_ExtensionObject.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaContentFilterElement:\n" + 
                self._UA_FilterOperator.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_ExtensionObject.str_helper(n+1))
                

 
# +++++++++++++++++++ UaTranslateBrowsePathsToNodeIdsResponse +++++++++++++++++++++++

class UaTranslateBrowsePathsToNodeIdsResponse(UaType):
    def __init__(self, val=ffi.new("UA_TranslateBrowsePathsToNodeIdsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaBrowsePathResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaTranslateBrowsePathsToNodeIdsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowsePathResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaTranslateBrowsePathsToNodeIdsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowsePathResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaBrowseResponse +++++++++++++++++++++++

class UaBrowseResponse(UaType):
    def __init__(self, val=ffi.new("UA_BrowseResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._resultsSize = UaSizeT(val.resultsSize)
        self._*results = UaBrowseResult(val.*results)
        self._diagnosticInfosSize = UaSizeT(val.diagnosticInfosSize)
        self._*diagnosticInfos = UaDiagnosticInfo(val.*diagnosticInfos)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def resultsSize(self):
        return self._resultsSize

    @resultsSize.setter
    def resultsSize(self, val):
        self._resultsSize = val
        self._value.resultsSize = val.value

    @property
    def *results(self):
        return self._*results

    @*results.setter
    def *results(self, val):
        self._*results = val
        self._value.*results = val.value

    @property
    def diagnosticInfosSize(self):
        return self._diagnosticInfosSize

    @diagnosticInfosSize.setter
    def diagnosticInfosSize(self, val):
        self._diagnosticInfosSize = val
        self._value.diagnosticInfosSize = val.value

    @property
    def *diagnosticInfos(self):
        return self._*diagnosticInfos

    @*diagnosticInfos.setter
    def *diagnosticInfos(self, val):
        self._*diagnosticInfos = val
        self._value.*diagnosticInfos = val.value

    def __str__(self):
        return ("UaBrowseResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_BrowseResult.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_DiagnosticInfo.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaBrowseResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_BrowseResult.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_DiagnosticInfo.str_helper(n+1))
                

 
# +++++++++++++++++++ UaCreateSessionResponse +++++++++++++++++++++++

class UaCreateSessionResponse(UaType):
    def __init__(self, val=ffi.new("UA_CreateSessionResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._sessionId = UaNodeId(val.sessionId)
        self._authenticationToken = UaNodeId(val.authenticationToken)
        self._revisedSessionTimeout = UaDouble(val.revisedSessionTimeout)
        self._serverNonce = UaByteString(val.serverNonce)
        self._serverCertificate = UaByteString(val.serverCertificate)
        self._serverEndpointsSize = UaSizeT(val.serverEndpointsSize)
        self._*serverEndpoints = UaEndpointDescription(val.*serverEndpoints)
        self._serverSoftwareCertificatesSize = UaSizeT(val.serverSoftwareCertificatesSize)
        self._*serverSoftwareCertificates = UaSignedSoftwareCertificate(val.*serverSoftwareCertificates)
        self._serverSignature = UaSignatureData(val.serverSignature)
        self._maxRequestMessageSize = UaUInt32(val.maxRequestMessageSize)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def sessionId(self):
        return self._sessionId

    @sessionId.setter
    def sessionId(self, val):
        self._sessionId = val
        self._value.sessionId = val.value

    @property
    def authenticationToken(self):
        return self._authenticationToken

    @authenticationToken.setter
    def authenticationToken(self, val):
        self._authenticationToken = val
        self._value.authenticationToken = val.value

    @property
    def revisedSessionTimeout(self):
        return self._revisedSessionTimeout

    @revisedSessionTimeout.setter
    def revisedSessionTimeout(self, val):
        self._revisedSessionTimeout = val
        self._value.revisedSessionTimeout = val.value

    @property
    def serverNonce(self):
        return self._serverNonce

    @serverNonce.setter
    def serverNonce(self, val):
        self._serverNonce = val
        self._value.serverNonce = val.value

    @property
    def serverCertificate(self):
        return self._serverCertificate

    @serverCertificate.setter
    def serverCertificate(self, val):
        self._serverCertificate = val
        self._value.serverCertificate = val.value

    @property
    def serverEndpointsSize(self):
        return self._serverEndpointsSize

    @serverEndpointsSize.setter
    def serverEndpointsSize(self, val):
        self._serverEndpointsSize = val
        self._value.serverEndpointsSize = val.value

    @property
    def *serverEndpoints(self):
        return self._*serverEndpoints

    @*serverEndpoints.setter
    def *serverEndpoints(self, val):
        self._*serverEndpoints = val
        self._value.*serverEndpoints = val.value

    @property
    def serverSoftwareCertificatesSize(self):
        return self._serverSoftwareCertificatesSize

    @serverSoftwareCertificatesSize.setter
    def serverSoftwareCertificatesSize(self, val):
        self._serverSoftwareCertificatesSize = val
        self._value.serverSoftwareCertificatesSize = val.value

    @property
    def *serverSoftwareCertificates(self):
        return self._*serverSoftwareCertificates

    @*serverSoftwareCertificates.setter
    def *serverSoftwareCertificates(self, val):
        self._*serverSoftwareCertificates = val
        self._value.*serverSoftwareCertificates = val.value

    @property
    def serverSignature(self):
        return self._serverSignature

    @serverSignature.setter
    def serverSignature(self, val):
        self._serverSignature = val
        self._value.serverSignature = val.value

    @property
    def maxRequestMessageSize(self):
        return self._maxRequestMessageSize

    @maxRequestMessageSize.setter
    def maxRequestMessageSize(self, val):
        self._maxRequestMessageSize = val
        self._value.maxRequestMessageSize = val.value

    def __str__(self):
        return ("UaCreateSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_NodeId.str_helper(1) +
                self._UA_Double.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._UA_ByteString.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_EndpointDescription.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_SignedSoftwareCertificate.str_helper(1) +
                self._UA_SignatureData.str_helper(1) +
                self._UA_UInt32.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaCreateSessionResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_NodeId.str_helper(n+1) +
                self._UA_Double.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._UA_ByteString.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_EndpointDescription.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_SignedSoftwareCertificate.str_helper(n+1) +
                self._UA_SignatureData.str_helper(n+1) +
                self._UA_UInt32.str_helper(n+1))
                

 
# +++++++++++++++++++ UaContentFilter +++++++++++++++++++++++

class UaContentFilter(UaType):
    def __init__(self, val=ffi.new("UA_ContentFilter*")):
        super().__init__(val)
        self._elementsSize = UaSizeT(val.elementsSize)
        self._*elements = UaContentFilterElement(val.*elements)
    

    @property
    def elementsSize(self):
        return self._elementsSize

    @elementsSize.setter
    def elementsSize(self, val):
        self._elementsSize = val
        self._value.elementsSize = val.value

    @property
    def *elements(self):
        return self._*elements

    @*elements.setter
    def *elements(self, val):
        self._*elements = val
        self._value.*elements = val.value

    def __str__(self):
        return ("UaContentFilter:\n" + 
                self._size_t.str_helper(1) +
                self._UA_ContentFilterElement.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaContentFilter:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_ContentFilterElement.str_helper(n+1))
                

 
# +++++++++++++++++++ UaGetEndpointsResponse +++++++++++++++++++++++

class UaGetEndpointsResponse(UaType):
    def __init__(self, val=ffi.new("UA_GetEndpointsResponse*")):
        super().__init__(val)
        self._responseHeader = UaResponseHeader(val.responseHeader)
        self._endpointsSize = UaSizeT(val.endpointsSize)
        self._*endpoints = UaEndpointDescription(val.*endpoints)
    

    @property
    def responseHeader(self):
        return self._responseHeader

    @responseHeader.setter
    def responseHeader(self, val):
        self._responseHeader = val
        self._value.responseHeader = val.value

    @property
    def endpointsSize(self):
        return self._endpointsSize

    @endpointsSize.setter
    def endpointsSize(self, val):
        self._endpointsSize = val
        self._value.endpointsSize = val.value

    @property
    def *endpoints(self):
        return self._*endpoints

    @*endpoints.setter
    def *endpoints(self, val):
        self._*endpoints = val
        self._value.*endpoints = val.value

    def __str__(self):
        return ("UaGetEndpointsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(1) +
                self._size_t.str_helper(1) +
                self._UA_EndpointDescription.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaGetEndpointsResponse:\n" + 
                self._UA_ResponseHeader.str_helper(n+1) +
                self._size_t.str_helper(n+1) +
                self._UA_EndpointDescription.str_helper(n+1))
                

 
# +++++++++++++++++++ UaEventFilter +++++++++++++++++++++++

class UaEventFilter(UaType):
    def __init__(self, val=ffi.new("UA_EventFilter*")):
        super().__init__(val)
        self._selectClausesSize = UaSizeT(val.selectClausesSize)
        self._*selectClauses = UaSimpleAttributeOperand(val.*selectClauses)
        self._whereClause = UaContentFilter(val.whereClause)
    

    @property
    def selectClausesSize(self):
        return self._selectClausesSize

    @selectClausesSize.setter
    def selectClausesSize(self, val):
        self._selectClausesSize = val
        self._value.selectClausesSize = val.value

    @property
    def *selectClauses(self):
        return self._*selectClauses

    @*selectClauses.setter
    def *selectClauses(self, val):
        self._*selectClauses = val
        self._value.*selectClauses = val.value

    @property
    def whereClause(self):
        return self._whereClause

    @whereClause.setter
    def whereClause(self, val):
        self._whereClause = val
        self._value.whereClause = val.value

    def __str__(self):
        return ("UaEventFilter:\n" + 
                self._size_t.str_helper(1) +
                self._UA_SimpleAttributeOperand.str_helper(1) +
                self._UA_ContentFilter.str_helper(1))
    
    def str_helper(self, n: int):
        return ("\t"*n + "UaEventFilter:\n" + 
                self._size_t.str_helper(n+1) +
                self._UA_SimpleAttributeOperand.str_helper(n+1) +
                self._UA_ContentFilter.str_helper(n+1))
                