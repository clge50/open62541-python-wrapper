typedef enum {
 UA_ATTRIBUTEID_NODEID = 1,
 UA_ATTRIBUTEID_NODECLASS = 2,
 UA_ATTRIBUTEID_BROWSENAME = 3,
 UA_ATTRIBUTEID_DISPLAYNAME = 4,
 UA_ATTRIBUTEID_DESCRIPTION = 5,
 UA_ATTRIBUTEID_WRITEMASK = 6,
 UA_ATTRIBUTEID_USERWRITEMASK = 7,
 UA_ATTRIBUTEID_ISABSTRACT = 8,
 UA_ATTRIBUTEID_SYMMETRIC = 9,
 UA_ATTRIBUTEID_INVERSENAME = 10,
 UA_ATTRIBUTEID_CONTAINSNOLOOPS = 11,
 UA_ATTRIBUTEID_EVENTNOTIFIER = 12,
 UA_ATTRIBUTEID_VALUE = 13,
 UA_ATTRIBUTEID_DATATYPE = 14,
 UA_ATTRIBUTEID_VALUERANK = 15,
 UA_ATTRIBUTEID_ARRAYDIMENSIONS = 16,
 UA_ATTRIBUTEID_ACCESSLEVEL = 17,
 UA_ATTRIBUTEID_USERACCESSLEVEL = 18,
 UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL = 19,
 UA_ATTRIBUTEID_HISTORIZING = 20,
 UA_ATTRIBUTEID_EXECUTABLE = 21,
 UA_ATTRIBUTEID_USEREXECUTABLE = 22,
 UA_ATTRIBUTEID_DATATYPEDEFINITION = 23,
 UA_ATTRIBUTEID_ROLEPERMISSIONS = 24,
 UA_ATTRIBUTEID_USERROLEPERMISSIONS = 25,
 UA_ATTRIBUTEID_ACCESSRESTRICTIONS = 26,
 UA_ATTRIBUTEID_ACCESSLEVELEX = 27
} UA_AttributeId;


typedef enum {
 UA_RULEHANDLING_DEFAULT = 0,
 UA_RULEHANDLING_ABORT = 1,
 UA_RULEHANDLING_WARN = 2,
 UA_RULEHANDLING_ACCEPT = 3,
} UA_RuleHandling;


typedef enum {
 UA_ORDER_LESS = -1,
 UA_ORDER_EQ = 0,
 UA_ORDER_MORE = 1
} UA_Order;


typedef enum {
 UA_SECURECHANNELSTATE_CLOSED = 0,
 UA_SECURECHANNELSTATE_HEL_SENT = 1,
 UA_SECURECHANNELSTATE_HEL_RECEIVED = 2,
 UA_SECURECHANNELSTATE_ACK_SENT = 3,
 UA_SECURECHANNELSTATE_ACK_RECEIVED = 4,
 UA_SECURECHANNELSTATE_OPN_SENT = 5,
 UA_SECURECHANNELSTATE_OPEN = 6,
 UA_SECURECHANNELSTATE_CLOSING = 7
} UA_SecureChannelState;


typedef enum {
 UA_SESSIONSTATE_CLOSED = 0,
 UA_SESSIONSTATE_CREATE_REQUESTED = 1,
 UA_SESSIONSTATE_CREATED = 2,
 UA_SESSIONSTATE_ACTIVATE_REQUESTED = 3,
 UA_SESSIONSTATE_ACTIVATED = 4,
 UA_SESSIONSTATE_CLOSING = 5
} UA_SessionState;


typedef struct {
 size_t currentConnectionCount;
 size_t cumulatedConnectionCount;
 size_t rejectedConnectionCount;
 size_t connectionTimeoutCount;
 size_t connectionAbortCount;
} UA_NetworkStatistics;


typedef struct {
 size_t currentChannelCount;
 size_t cumulatedChannelCount;
 size_t rejectedChannelCount;
 size_t channelTimeoutCount;
 size_t channelAbortCount;
 size_t channelPurgeCount;
} UA_SecureChannelStatistics;


typedef struct {
 size_t currentSessionCount;
 size_t cumulatedSessionCount;
 size_t securityRejectedSessionCount;
 size_t rejectedSessionCount;
 size_t sessionTimeoutCount;
 size_t sessionAbortCount;
} UA_SessionStatistics;


typedef struct {
 UA_UInt16 nanoSec;
 UA_UInt16 microSec;
 UA_UInt16 milliSec;
 UA_UInt16 sec;
 UA_UInt16 min;
 UA_UInt16 hour;
 UA_UInt16 day;
 UA_UInt16 month;
 UA_UInt16 year;
} UA_DateTimeStruct;



typedef struct {
 UA_UInt32 data1;
 UA_UInt16 data2;
 UA_UInt16 data3;
 UA_Byte data4[8];
} UA_Guid;


typedef enum UA_NodeIdType {
 UA_NODEIDTYPE_NUMERIC = 0,
 UA_NODEIDTYPE_STRING = 3,
 UA_NODEIDTYPE_GUID = 4,
 UA_NODEIDTYPE_BYTESTRING = 5
};


typedef struct {
 UA_NodeId nodeId;
 UA_String namespaceUri;
 UA_UInt32 serverIndex;
} UA_ExpandedNodeId;


typedef struct {
 UA_UInt16 namespaceIndex;
 UA_String name;
} UA_QualifiedName;


typedef struct {
 UA_String locale;
 UA_String text;
} UA_LocalizedText;



typedef struct {
 UA_UInt32 min;
 UA_UInt32 max;
} UA_NumericRangeDimension;


typedef struct {
 size_t dimensionsSize;
 UA_NumericRangeDimension *dimensions;
} UA_NumericRange;



typedef enum {
 UA_VARIANT_DATA = 0,
 UA_VARIANT_DATA_NODELETE = 1
} UA_VariantStorageType;

typedef struct {
 const UA_DataType *type;
 UA_VariantStorageType storageType;
 size_t arrayLength;
 void *data;
 size_t arrayDimensionsSize;
 UA_UInt32 *arrayDimensions;
} UA_Variant;


typedef enum {
 UA_EXTENSIONOBJECT_ENCODED_NOBODY = 0,
 UA_EXTENSIONOBJECT_ENCODED_BYTESTRING = 1,
 UA_EXTENSIONOBJECT_ENCODED_XML = 2,
 UA_EXTENSIONOBJECT_DECODED = 3,
 UA_EXTENSIONOBJECT_DECODED_NODELETE = 4
} UA_ExtensionObjectEncoding;



typedef struct {
 UA_Variant value;
 UA_DateTime sourceTimestamp;
 UA_DateTime serverTimestamp;
 UA_UInt16 sourcePicoseconds;
 UA_UInt16 serverPicoseconds;
 UA_StatusCode status;
 UA_Boolean hasValue ;
 UA_Boolean hasStatus ;
 UA_Boolean hasSourceTimestamp ;
 UA_Boolean hasServerTimestamp ;
 UA_Boolean hasSourcePicoseconds ;
 UA_Boolean hasServerPicoseconds ;
} UA_DataValue;



typedef struct UA_DiagnosticInfo {
 UA_Boolean hasSymbolicId ;
 UA_Boolean hasNamespaceUri ;
 UA_Boolean hasLocalizedText ;
 UA_Boolean hasLocale ;
 UA_Boolean hasAdditionalInfo ;
 UA_Boolean hasInnerStatusCode ;
 UA_Boolean hasInnerDiagnosticInfo ;
 UA_Int32 symbolicId;
 UA_Int32 namespaceUri;
 UA_Int32 localizedText;
 UA_Int32 locale;
 UA_String additionalInfo;
 UA_StatusCode innerStatusCode;
 struct UA_DiagnosticInfo *innerDiagnosticInfo;
} UA_DiagnosticInfo;



typedef struct {
 UA_UInt16 memberTypeIndex;
 UA_Byte padding;
 UA_Boolean namespaceZero ;
 UA_Boolean isArray ;
 UA_Boolean isOptional ;
 const char *memberName;

} UA_DataTypeMember;



typedef enum {
 UA_DATATYPEKIND_BOOLEAN = 0,
 UA_DATATYPEKIND_SBYTE = 1,
 UA_DATATYPEKIND_BYTE = 2,
 UA_DATATYPEKIND_INT16 = 3,
 UA_DATATYPEKIND_UINT16 = 4,
 UA_DATATYPEKIND_INT32 = 5,
 UA_DATATYPEKIND_UINT32 = 6,
 UA_DATATYPEKIND_INT64 = 7,
 UA_DATATYPEKIND_UINT64 = 8,
 UA_DATATYPEKIND_FLOAT = 9,
 UA_DATATYPEKIND_DOUBLE = 10,
 UA_DATATYPEKIND_STRING = 11,
 UA_DATATYPEKIND_DATETIME = 12,
 UA_DATATYPEKIND_GUID = 13,
 UA_DATATYPEKIND_BYTESTRING = 14,
 UA_DATATYPEKIND_XMLELEMENT = 15,
 UA_DATATYPEKIND_NODEID = 16,
 UA_DATATYPEKIND_EXPANDEDNODEID = 17,
 UA_DATATYPEKIND_STATUSCODE = 18,
 UA_DATATYPEKIND_QUALIFIEDNAME = 19,
 UA_DATATYPEKIND_LOCALIZEDTEXT = 20,
 UA_DATATYPEKIND_EXTENSIONOBJECT = 21,
 UA_DATATYPEKIND_DATAVALUE = 22,
 UA_DATATYPEKIND_VARIANT = 23,
 UA_DATATYPEKIND_DIAGNOSTICINFO = 24,
 UA_DATATYPEKIND_DECIMAL = 25,
 UA_DATATYPEKIND_ENUM = 26,
 UA_DATATYPEKIND_STRUCTURE = 27,
 UA_DATATYPEKIND_OPTSTRUCT = 28,
 UA_DATATYPEKIND_UNION = 29,
 UA_DATATYPEKIND_BITFIELDCLUSTER = 30
} UA_DataTypeKind;



typedef struct {
 UA_NodeId typeId;
 UA_NodeId binaryEncodingId;
 UA_UInt16 memSize;
 UA_UInt16 typeIndex;
 UA_UInt32 typeKind ;
 UA_UInt32 pointerFree ;
 UA_UInt32 overlayable ;
 UA_UInt32 membersSize ;
 UA_DataTypeMember *members;
 char *typeName;
} UA_DataType; 



typedef struct UA_DataTypeArray {
 struct UA_DataTypeArray *next;
 size_t typesSize;
 UA_DataType *types;
} UA_DataTypeArray;

